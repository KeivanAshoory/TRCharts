/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/DataOffsetConstraintBehaviour.h>
#import <TRChartsObjc/Axis.h>
#import <TRChartsObjc/Chart.h>

#import <TRCharts/DataOffsetConstraintBehaviour.hpp>
#import <TRCharts/Axis.hpp>
#import <TRCharts/Chart.hpp>

#import <TRChartsObjc/Support/Marshallers.hh>
#import <TRCodegenSupportObjc/Handle.hh>

@implementation TRDataOffsetConstraintBehaviour

-(TRDataOffsetConstraintBehaviour*)init {
	TRChartsObjc::verifyCurrentQueue();
	self = [super initConcrete];
	Charts::DataOffsetConstraintBehaviour * const obj = new Charts::DataOffsetConstraintBehaviour();
	CodegenSupportObjc::Handle * const handle = new CodegenSupportObjc::Handle(obj, self);
	obj->setHandle(handle);
	[self setHandle:handle];
	return self;
}

-(NSArray *)axes {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::DataOffsetConstraintBehaviour> obj = handle->getNativeObject<Charts::DataOffsetConstraintBehaviour>();
	return TRChartsObjc::getListAxisMarshaller().unmarshall(obj->getAxes());
}

-(void)setAxes:(NSArray *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::DataOffsetConstraintBehaviour> obj = handle->getNativeObject<Charts::DataOffsetConstraintBehaviour>();
	obj->setAxes(TRChartsObjc::getListAxisMarshaller().marshall(value));
}

-(NSArray *)edges {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::DataOffsetConstraintBehaviour> obj = handle->getNativeObject<Charts::DataOffsetConstraintBehaviour>();
	return TRChartsObjc::getListEdgeMarshaller().unmarshall(obj->getEdges());
}

-(void)setEdges:(NSArray *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::DataOffsetConstraintBehaviour> obj = handle->getNativeObject<Charts::DataOffsetConstraintBehaviour>();
	obj->setEdges(TRChartsObjc::getListEdgeMarshaller().marshall(value));
}

-(double)multiplier {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::DataOffsetConstraintBehaviour> obj = handle->getNativeObject<Charts::DataOffsetConstraintBehaviour>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getMultiplier());
}

-(void)setMultiplier:(double)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::DataOffsetConstraintBehaviour> obj = handle->getNativeObject<Charts::DataOffsetConstraintBehaviour>();
	obj->setMultiplier(TRChartsObjc::getNumberMarshaller().marshall(value));
}

-(TRTransform *)apply:(TRChart *)chart size:(TRSize *)size transform:(TRTransform *)transform {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::DataOffsetConstraintBehaviour> obj = handle->getNativeObject<Charts::DataOffsetConstraintBehaviour>();
	return TRChartsObjc::getTransformMarshaller().unmarshall(obj->apply(TRChartsObjc::getChartMarshaller().marshall(chart), TRChartsObjc::getSizeMarshaller().marshall(size), TRChartsObjc::getTransformMarshaller().marshall(transform)));	
}

@end