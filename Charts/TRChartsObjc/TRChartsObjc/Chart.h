/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/Drawable.h>
#import <TRChartsObjc/Renderable.h>
#import <TRChartsObjc/Color.h>
#import <TRChartsObjc/Margin.h>
#import <TRChartsObjc/Touch.h>
#import <TRChartsObjc/Size.h>
#import <TRChartsObjc/ResizeMode.h>
#import <TRChartsObjc/Transform.h>
#import <TRChartsObjc/Point.h>
@class TRLabel;
@class TRAxis;
@class TRSeries;
@class TRDecoration;
@class TRConstraint;
@class TRAnimation;

/**
 * Root container for all chart objects.
 *
 * @warning This is an automatically generated wrapper around a native object;
 * overriding methods will not work as expected.
 *
 */
@interface TRChart : TRDrawable<TRRenderable>

/** @name Fields */

/**
 * The title is displayed above the chart. It is optional.
 *
 * @return The current chart title.
 * @see setTitle:
 */
-(TRLabel *)title;

/**
 * The title is displayed above the chart. It is optional.
 *
 * @param value The new chart title.
 * @see title
 */
-(void)setTitle:(TRLabel *)value;

/**
 * The background color is used to paint the chart container.
 *
 * @return The current background color.
 * @see setBackgroundColor:
 */
-(TRColor *)backgroundColor;

/**
 * The background color is used to paint the chart container.
 *
 * @param value The new background color.
 * @see backgroundColor
 */
-(void)setBackgroundColor:(TRColor *)value;

/**
 * The fill color is used to paint the area within the chart's axes.
 *
 * @return The current area color.
 * @see setFillColor:
 */
-(TRColor *)fillColor;

/**
 * The fill color is used to paint the area within the chart's axes.
 *
 * @param value The new area color.
 * @see fillColor
 */
-(void)setFillColor:(TRColor *)value;

/**
 * The margin is the empty space around the chart.
 *
 * @return The current margin.
 * @see setMargin:
 */
-(TRMargin *)margin;

/**
 * The margin is the empty space around the chart.
 *
 * @param value The new margin.
 * @see margin
 */
-(void)setMargin:(TRMargin *)value;

/**
 * The axis list contains all currently associated axes.
 *
 * @return The current axis list.
 */
-(NSArray *)axisList;

/**
 * The series list contains all currently associated series.
 *
 * @return The current series list.
 */
-(NSArray *)seriesList;

/**
 * The series list contains all currently associated decorations.
 *
 * @return The current decoration list.
 */
-(NSArray *)decorationList;

/**
 * The series list contains all currently associated constraints.
 *
 * @return The current constraint list.
 */
-(NSArray *)constraintList;

/**
 * The active animation list contains all attached animations.
 *
 * @return The current active animation list.
 */
-(NSArray *)activeAnimationList;

/**
 * @return The current latest touch list.
 */
-(NSArray *)lastTouches;

/**
 * Size of the render area in points (actual pixel render area is multiplied by
 * the content scale factor)
 *
 * @return The current size.
 */
-(TRSize *)size;

/**
 * Content scale factor (iOS specific)
 *
 * @return The current content scale factor.
 */
-(double)contentScaleFactor;

/**
 * @return The current resize mode.
 * @see setResizeMode:
 */
-(TRResizeMode)resizeMode;

/**
 * @param value The new resize mode.
 * @see resizeMode
 */
-(void)setResizeMode:(TRResizeMode)value;

/**
 * @return The current current transform.
 * @see setTransform:
 */
-(TRTransform *)transform;

/**
 * @param value The new current transform.
 * @see transform
 */
-(void)setTransform:(TRTransform *)value;

/** @name Methods */

/**
 * Set the render area size (nothing will be drawn outside this area).
 *
 * In iOS, a content scale factor is used to help with specifying
 * Retina/non-Retina sizes. The content scale factor should be supplied to the
 * chart (the size value itself should not be pre-multiplied by the scale
 * factor). On non-iOS platforms the default value of 1.0 can be used.
 *
 * @param size Size of the area in points
 * @param contentScaleFactor Content scale factor (iOS specific)
 */
-(void)resize:(TRSize *)size contentScaleFactor:(double)contentScaleFactor;

/**
 * Mark the chart as needing layout recalculation. The recalculation happens
 * during the next update phase.
 *
 */
-(void)relayout;

/**
 * Adds an axis to the chart.
 *
 * The axis will be attached to this chart, until removeAxis is called or the
 * chart is destroyed.
 *
 * @see Attachable
 *
 * @param axis The axis to add.
 */
-(void)addAxis:(TRAxis *)axis;

/**
 * Adds a series to the chart.
 *
 * The series will be attached to this chart, until removeSeries is called or
 * the chart is destroyed.
 *
 * @see Attachable
 *
 * @param series The series to add.
 */
-(void)addSeries:(TRSeries *)series;

/**
 * Adds a decoration to the chart.
 *
 * The decoration will be attached to this chart, until removeDecoration is
 * called or the chart is destroyed.
 *
 * @see Attachable
 *
 * @param decoration The decoration to add.
 */
-(void)addDecoration:(TRDecoration *)decoration;

/**
 * Adds a constraint to the chart.
 *
 * The constraint will be attached to this chart, until removeConstraint is
 * called or the chart is destroyed.
 *
 * @see Attachable
 *
 * @param constraint The constraint to add.
 */
-(void)addConstraint:(TRConstraint *)constraint;

/**
 * Removes a previously added axis.
 *
 * The axis will also be detached from the chart
 *
 * @see Attachable
 *
 * @param axis The axis to remove.
 */
-(void)removeAxis:(TRAxis *)axis;

/**
 * Removes a previously added series.
 *
 * The series will also be detached from the chart
 *
 * @see Attachable
 *
 * @param series The series to remove.
 */
-(void)removeSeries:(TRSeries *)series;

/**
 * Removes a previously added decoration
 *
 * The decoration will also be detached from the chart
 *
 * @see Attachable
 *
 * @param decoration The decoration to remove.
 */
-(void)removeDecoration:(TRDecoration *)decoration;

/**
 * Removes a previously added constraint
 *
 * The constraint will also be detached from the chart
 *
 * @see Attachable
 *
 * @param constraint The constraint to remove.
 */
-(void)removeConstraint:(TRConstraint *)constraint;

/**
 * Attaches an animation, it will be automatically unattached when it completes
 * or is cancelled.
 *
 * @see Attachable
 *
 * @param animation The animation to add.
 */
-(void)applyAnimation:(TRAnimation *)animation;

/**
 * Load new data
 *
 * Calling this method is optional (it will be called by update)
 *
 */
-(void)preUpdate;

/**
 * Synchronize changed properties with internal state
 *
 * A valid size must be set before calling this method
 *
 * @return The result.
 */
-(BOOL)update;

/**
 * Prepare OpenGL context for rendering
 *
 * Must be called from a thread which has the correct OpenGL context.
 *
 * Calling this method is optional (it will be called by render)
 *
 */
-(void)preRender;

/**
 * Must be called from a thread which has the correct OpenGL context.
 *
 */
-(void)render;

/**
 * Render a partial region, at a given scale.
 *
 * Must be called from a thread which has the correct OpenGL context.
 *
 * @param position Region top left corner
 * @param size Region size
 * @param scale Scale factor
 */
-(void)renderRegion:(TRPoint *)position size:(TRSize *)size scale:(double)scale;

/**
 * Disposes of graphical memory associated with the chart (this will happen
 * automatically when the chart is deallocated, but this method is provided for
 * cases where deallocation is non-deterministic (eg Java).
 *
 * Must be called from a thread which has the correct OpenGL context.
 *
 */
-(void)dispose;

/**
 * Handle interactions (touch movement).
 *
 * The next pan/zoom value are calculated from the position and previous
 * position of all active touches.
 *
 * @param touches Input touches.
 */
-(void)handleTouches:(NSArray *)touches;

@end