/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/PointDecoration.h>
#import <TRChartsObjc/ContinuousAxis.h>

#import <TRCharts/PointDecoration.hpp>
#import <TRCharts/ContinuousAxis.hpp>

#import <TRChartsObjc/Support/Marshallers.hh>
#import <TRCodegenSupportObjc/Handle.hh>

@implementation TRPointDecoration

-(TRPointDecoration*)init {
	TRChartsObjc::verifyCurrentQueue();
	self = [super initConcrete];
	Charts::PointDecoration * const obj = new Charts::PointDecoration();
	CodegenSupportObjc::Handle * const handle = new CodegenSupportObjc::Handle(obj, self);
	obj->setHandle(handle);
	[self setHandle:handle];
	return self;
}

-(TRContinuousAxis *)abscissaAxis {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::PointDecoration> obj = handle->getNativeObject<Charts::PointDecoration>();
	return TRChartsObjc::getContinuousAxisMarshaller().unmarshall(obj->getAbscissaAxis());
}

-(void)setAbscissaAxis:(TRContinuousAxis *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::PointDecoration> obj = handle->getNativeObject<Charts::PointDecoration>();
	obj->setAbscissaAxis(TRChartsObjc::getContinuousAxisMarshaller().marshall(value));
}

-(TRContinuousAxis *)ordinateAxis {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::PointDecoration> obj = handle->getNativeObject<Charts::PointDecoration>();
	return TRChartsObjc::getContinuousAxisMarshaller().unmarshall(obj->getOrdinateAxis());
}

-(void)setOrdinateAxis:(TRContinuousAxis *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::PointDecoration> obj = handle->getNativeObject<Charts::PointDecoration>();
	obj->setOrdinateAxis(TRChartsObjc::getContinuousAxisMarshaller().marshall(value));
}

-(TRCoordinates *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::PointDecoration> obj = handle->getNativeObject<Charts::PointDecoration>();
	return TRChartsObjc::getCoordinatesMarshaller().unmarshall(obj->getValue());
}

-(void)setValue:(TRCoordinates *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::PointDecoration> obj = handle->getNativeObject<Charts::PointDecoration>();
	obj->setValue(TRChartsObjc::getCoordinatesMarshaller().marshall(value));
}

-(TRPointStyle *)pointStyle {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::PointDecoration> obj = handle->getNativeObject<Charts::PointDecoration>();
	return TRChartsObjc::getPointStyleMarshaller().unmarshall(obj->getPointStyle());
}

-(void)setPointStyle:(TRPointStyle *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::PointDecoration> obj = handle->getNativeObject<Charts::PointDecoration>();
	obj->setPointStyle(TRChartsObjc::getPointStyleMarshaller().marshall(value));
}

@end