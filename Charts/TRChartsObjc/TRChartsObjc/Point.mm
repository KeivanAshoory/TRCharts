/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/Point.h>
#import <TRChartsObjc/Support/Marshallers.hh>

@implementation TRPoint

-(TRPoint *)init
{
	self = [super init];
	if(self) {
		self.x = 0.0;
		self.y = 0.0;
	}
	return self;
}

+(TRPoint *)x:(double)x y:(double)y
{
	TRPoint * const result = [[TRPoint alloc] init];
	result.x = x;
	result.y = y;
	return result;
}

+(TRPoint *)add:(TRPoint *)point otherPoint:(TRPoint *)otherPoint
{
	return TRChartsObjc::getPointMarshaller().unmarshall(Charts::Point::add(TRChartsObjc::getPointMarshaller().marshall(point), TRChartsObjc::getPointMarshaller().marshall(otherPoint)));	
}

+(TRPoint *)subtract:(TRPoint *)point otherPoint:(TRPoint *)otherPoint
{
	return TRChartsObjc::getPointMarshaller().unmarshall(Charts::Point::subtract(TRChartsObjc::getPointMarshaller().marshall(point), TRChartsObjc::getPointMarshaller().marshall(otherPoint)));	
}

+(TRPoint *)multiply:(TRPoint *)point otherPoint:(TRPoint *)otherPoint
{
	return TRChartsObjc::getPointMarshaller().unmarshall(Charts::Point::multiply(TRChartsObjc::getPointMarshaller().marshall(point), TRChartsObjc::getPointMarshaller().marshall(otherPoint)));	
}

+(TRPoint *)divide:(TRPoint *)point otherPoint:(TRPoint *)otherPoint
{
	return TRChartsObjc::getPointMarshaller().unmarshall(Charts::Point::divide(TRChartsObjc::getPointMarshaller().marshall(point), TRChartsObjc::getPointMarshaller().marshall(otherPoint)));	
}

-(BOOL)isEqual:(id)anObject
{
	if(anObject == nil || ! [anObject isKindOfClass:[TRPoint class]]) {
		return NO;
	}
	TRPoint * other = anObject;
	BOOL result = YES;
	result = result && (self.x == other.x);
	result = result && (self.y == other.y);
	return result;
}

-(NSUInteger)hash
{
	NSUInteger result = 7;
    result = 31 * result + (NSUInteger)self.x;
    result = 31 * result + (NSUInteger)self.y;
	return result;
}

-(id)copyWithZone:(NSZone *)zone
{
	TRPoint * copy = [[self class] allocWithZone:zone];
	copy.x = self.x;
	copy.y = self.y;
	return copy;
}

-(NSString*)description
{
	return [NSString stringWithFormat:@"TRPoint[%f, %f]", self.x, self.y];
}

@end