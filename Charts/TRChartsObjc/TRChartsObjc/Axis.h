/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/ChartElement.h>
#import <TRChartsObjc/Edge.h>
#import <TRChartsObjc/Color.h>
#import <TRChartsObjc/LineStyle.h>
#import <TRChartsObjc/Font.h>
@class TRLabel;

/**
 * Base axis class, see concrete implementations for more details
 *
 * A chart can hae a number of axes, each is assigned a given edge. If a chart
 * has multiple axes on a given edge, they will be stacked.
 *
 * This base class provides configuration for the generalized display of an
 * axis. An axis has a primary line (drawn on the selected edge), gridlines
 * (drawn inside the data area and perpendicular to the edge) and ticks (drawn
 * on the outside of the data area and perpendicular to the edge).
 *
 * @warning It is important to always set the tickLabelMaxSize field for an
 * axis, the maximum size is not calculated based on the text width
 *
 * @warning This is an automatically generated wrapper around a native object;
 * overriding methods will not work as expected.
 *
 */
@interface TRAxis : TRChartElement

/** @name Fields */

/**
 * Defines which edge of the chart the axis is placed on
 *
 * @return The current axis edge.
 * @see setEdge:
 */
-(TREdge)edge;

/**
 * Defines which edge of the chart the axis is placed on
 *
 * @param value The new axis edge.
 * @see edge
 */
-(void)setEdge:(TREdge)value;

/**
 * Text label displayed on the axis, the orientation and display of the label is
 * based on the edge
 *
 * @return The current axis title.
 * @see setTitle:
 */
-(TRLabel *)title;

/**
 * Text label displayed on the axis, the orientation and display of the label is
 * based on the edge
 *
 * @param value The new axis title.
 * @see title
 */
-(void)setTitle:(TRLabel *)value;

/**
 * Color for the label and main line of the axis
 *
 * @return The current axis color.
 * @see setAxisColor:
 */
-(TRColor *)axisColor;

/**
 * Color for the label and main line of the axis
 *
 * @param value The new axis color.
 * @see axisColor
 */
-(void)setAxisColor:(TRColor *)value;

/**
 * The line style used for the main line of the axis
 *
 * @return The current axis line style.
 * @see setAxisLineStyle:
 */
-(TRLineStyle *)axisLineStyle;

/**
 * The line style used for the main line of the axis
 *
 * @param value The new axis line style.
 * @see axisLineStyle
 */
-(void)setAxisLineStyle:(TRLineStyle *)value;

/**
 * If true, a grid will be drawn perpendicular to the axis, at the tick
 * frequency
 *
 * @return The current grid visibility flag.
 * @see setGridVisible:
 */
-(BOOL)gridVisible;

/**
 * If true, a grid will be drawn perpendicular to the axis, at the tick
 * frequency
 *
 * @param value The new grid visibility flag.
 * @see gridVisible
 */
-(void)setGridVisible:(BOOL)value;

/**
 * Color for the grid lines (if enabled)
 *
 * @return The current grid color.
 * @see setGridColor:
 */
-(TRColor *)gridColor;

/**
 * Color for the grid lines (if enabled)
 *
 * @param value The new grid color.
 * @see gridColor
 */
-(void)setGridColor:(TRColor *)value;

/**
 * Line style for the grid lines (if enabled)
 *
 * @return The current grid line style.
 * @see setGridLineStyle:
 */
-(TRLineStyle *)gridLineStyle;

/**
 * Line style for the grid lines (if enabled)
 *
 * @param value The new grid line style.
 * @see gridLineStyle
 */
-(void)setGridLineStyle:(TRLineStyle *)value;

/**
 * Color used for tick marks and labels
 *
 * @return The current tick color.
 * @see setTickColor:
 */
-(TRColor *)tickColor;

/**
 * Color used for tick marks and labels
 *
 * @param value The new tick color.
 * @see tickColor
 */
-(void)setTickColor:(TRColor *)value;

/**
 * Line style used for the tick marks
 *
 * @return The current tick line style.
 * @see setTickLineStyle:
 */
-(TRLineStyle *)tickLineStyle;

/**
 * Line style used for the tick marks
 *
 * @param value The new tick line style.
 * @see tickLineStyle
 */
-(void)setTickLineStyle:(TRLineStyle *)value;

/**
 * Point offset of the ticks relative to the edge (positive number moves the
 * tick away from the edge)
 *
 * @return The current tick offset.
 * @see setTickOffset:
 */
-(double)tickOffset;

/**
 * Point offset of the ticks relative to the edge (positive number moves the
 * tick away from the edge)
 *
 * @param value The new tick offset.
 * @see tickOffset
 */
-(void)setTickOffset:(double)value;

/**
 * @return The current tick size.
 * @see setTickSize:
 */
-(double)tickSize;

/**
 * @param value The new tick size.
 * @see tickSize
 */
-(void)setTickSize:(double)value;

/**
 * Color used for the tick label
 *
 * @return The current tick label color.
 * @see setTickLabelColor:
 */
-(TRColor *)tickLabelColor;

/**
 * Color used for the tick label
 *
 * @param value The new tick label color.
 * @see tickLabelColor
 */
-(void)setTickLabelColor:(TRColor *)value;

/**
 * Font used for the tick label
 *
 * @return The current tick label font.
 * @see setTickLabelFont:
 */
-(TRFont *)tickLabelFont;

/**
 * Font used for the tick label
 *
 * @param value The new tick label font.
 * @see tickLabelFont
 */
-(void)setTickLabelFont:(TRFont *)value;

/**
 * Maximum size of the tick label (must be specified size it influences the
 * chart layout)
 *
 * @return The current tick label maximum size.
 * @see setTickLabelMaxSize:
 */
-(double)tickLabelMaxSize;

/**
 * Maximum size of the tick label (must be specified size it influences the
 * chart layout)
 *
 * @param value The new tick label maximum size.
 * @see tickLabelMaxSize
 */
-(void)setTickLabelMaxSize:(double)value;

/**
 * Offset of the label from the tick mark (positive number moves the label away
 * from the tick mark)
 *
 * @return The current tick label offset.
 * @see setTickLabelOffset:
 */
-(double)tickLabelOffset;

/**
 * Offset of the label from the tick mark (positive number moves the label away
 * from the tick mark)
 *
 * @param value The new tick label offset.
 * @see tickLabelOffset
 */
-(void)setTickLabelOffset:(double)value;

/**
 * Read-only property that indicates the total calculated screen length of the
 * axis (perpendicular to edge)
 *
 * @return The current current screen length.
 */
-(double)screenLength;

/** @name Methods */

/**
 * Call to cause the axis to be laid out again on the next update call
 *
 */
-(void)relayout;

@end