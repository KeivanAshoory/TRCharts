/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/Axis.h>
#import <TRChartsObjc/Label.h>

#import <TRCharts/Axis.hpp>
#import <TRCharts/Label.hpp>

#import <TRChartsObjc/Support/Marshallers.hh>
#import <TRCodegenSupportObjc/Handle.hh>

@implementation TRAxis

-(TRAxis*)init {
	TRChartsObjc::verifyCurrentQueue();
	@throw [NSException exceptionWithName:@"Init" reason:@"Cannot construct TRAxis directly" userInfo:nil];
}

-(TREdge)edge {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getEdgeMarshaller().unmarshall(obj->getEdge());
}

-(void)setEdge:(TREdge)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setEdge(TRChartsObjc::getEdgeMarshaller().marshall(value));
}

-(TRLabel *)title {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getLabelMarshaller().unmarshall(obj->getTitle());
}

-(void)setTitle:(TRLabel *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setTitle(TRChartsObjc::getLabelMarshaller().marshall(value));
}

-(TRColor *)axisColor {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getColorMarshaller().unmarshall(obj->getAxisColor());
}

-(void)setAxisColor:(TRColor *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setAxisColor(TRChartsObjc::getColorMarshaller().marshall(value));
}

-(TRLineStyle *)axisLineStyle {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getLineStyleMarshaller().unmarshall(obj->getAxisLineStyle());
}

-(void)setAxisLineStyle:(TRLineStyle *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setAxisLineStyle(TRChartsObjc::getLineStyleMarshaller().marshall(value));
}

-(BOOL)gridVisible {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getBooleanMarshaller().unmarshall(obj->isGridVisible());
}

-(void)setGridVisible:(BOOL)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setGridVisible(TRChartsObjc::getBooleanMarshaller().marshall(value));
}

-(TRColor *)gridColor {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getColorMarshaller().unmarshall(obj->getGridColor());
}

-(void)setGridColor:(TRColor *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setGridColor(TRChartsObjc::getColorMarshaller().marshall(value));
}

-(TRLineStyle *)gridLineStyle {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getLineStyleMarshaller().unmarshall(obj->getGridLineStyle());
}

-(void)setGridLineStyle:(TRLineStyle *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setGridLineStyle(TRChartsObjc::getLineStyleMarshaller().marshall(value));
}

-(TRColor *)tickColor {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getColorMarshaller().unmarshall(obj->getTickColor());
}

-(void)setTickColor:(TRColor *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setTickColor(TRChartsObjc::getColorMarshaller().marshall(value));
}

-(TRLineStyle *)tickLineStyle {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getLineStyleMarshaller().unmarshall(obj->getTickLineStyle());
}

-(void)setTickLineStyle:(TRLineStyle *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setTickLineStyle(TRChartsObjc::getLineStyleMarshaller().marshall(value));
}

-(double)tickOffset {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getTickOffset());
}

-(void)setTickOffset:(double)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setTickOffset(TRChartsObjc::getNumberMarshaller().marshall(value));
}

-(double)tickSize {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getTickSize());
}

-(void)setTickSize:(double)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setTickSize(TRChartsObjc::getNumberMarshaller().marshall(value));
}

-(TRColor *)tickLabelColor {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getColorMarshaller().unmarshall(obj->getTickLabelColor());
}

-(void)setTickLabelColor:(TRColor *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setTickLabelColor(TRChartsObjc::getColorMarshaller().marshall(value));
}

-(TRFont *)tickLabelFont {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getFontMarshaller().unmarshall(obj->getTickLabelFont());
}

-(void)setTickLabelFont:(TRFont *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setTickLabelFont(TRChartsObjc::getFontMarshaller().marshall(value));
}

-(double)tickLabelMaxSize {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getTickLabelMaxSize());
}

-(void)setTickLabelMaxSize:(double)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setTickLabelMaxSize(TRChartsObjc::getNumberMarshaller().marshall(value));
}

-(double)tickLabelOffset {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getTickLabelOffset());
}

-(void)setTickLabelOffset:(double)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->setTickLabelOffset(TRChartsObjc::getNumberMarshaller().marshall(value));
}

-(double)screenLength {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getScreenLength());
}

-(void)relayout {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Axis> obj = handle->getNativeObject<Charts::Axis>();
	obj->relayout();
}

@end