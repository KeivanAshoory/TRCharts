/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/Chart.h>
#import <TRChartsObjc/Label.h>
#import <TRChartsObjc/Axis.h>
#import <TRChartsObjc/Series.h>
#import <TRChartsObjc/Decoration.h>
#import <TRChartsObjc/Constraint.h>
#import <TRChartsObjc/Animation.h>

#import <TRCharts/Chart.hpp>
#import <TRCharts/Label.hpp>
#import <TRCharts/Axis.hpp>
#import <TRCharts/Series.hpp>
#import <TRCharts/Decoration.hpp>
#import <TRCharts/Constraint.hpp>
#import <TRCharts/Animation.hpp>

#import <TRChartsObjc/Support/Marshallers.hh>
#import <TRCodegenSupportObjc/Handle.hh>

@implementation TRChart

-(TRChart*)init {
	TRChartsObjc::verifyCurrentQueue();
	self = [super initConcrete];
	Charts::Chart * const obj = new Charts::Chart();
	CodegenSupportObjc::Handle * const handle = new CodegenSupportObjc::Handle(obj, self);
	obj->setHandle(handle);
	[self setHandle:handle];
	return self;
}

-(TRLabel *)title {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getLabelMarshaller().unmarshall(obj->getTitle());
}

-(void)setTitle:(TRLabel *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->setTitle(TRChartsObjc::getLabelMarshaller().marshall(value));
}

-(TRColor *)backgroundColor {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getColorMarshaller().unmarshall(obj->getBackgroundColor());
}

-(void)setBackgroundColor:(TRColor *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->setBackgroundColor(TRChartsObjc::getColorMarshaller().marshall(value));
}

-(TRColor *)fillColor {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getColorMarshaller().unmarshall(obj->getFillColor());
}

-(void)setFillColor:(TRColor *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->setFillColor(TRChartsObjc::getColorMarshaller().marshall(value));
}

-(TRMargin *)margin {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getMarginMarshaller().unmarshall(obj->getMargin());
}

-(void)setMargin:(TRMargin *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->setMargin(TRChartsObjc::getMarginMarshaller().marshall(value));
}

-(NSArray *)axisList {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getListAxisMarshaller().unmarshall(obj->getAxisList());
}

-(NSArray *)seriesList {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getListSeriesMarshaller().unmarshall(obj->getSeriesList());
}

-(NSArray *)decorationList {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getListDecorationMarshaller().unmarshall(obj->getDecorationList());
}

-(NSArray *)constraintList {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getListConstraintMarshaller().unmarshall(obj->getConstraintList());
}

-(NSArray *)activeAnimationList {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getListAnimationMarshaller().unmarshall(obj->getActiveAnimationList());
}

-(NSArray *)lastTouches {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getListTouchMarshaller().unmarshall(obj->getLastTouches());
}

-(TRSize *)size {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getSizeMarshaller().unmarshall(obj->getSize());
}

-(double)contentScaleFactor {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getContentScaleFactor());
}

-(TRResizeMode)resizeMode {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getResizeModeMarshaller().unmarshall(obj->getResizeMode());
}

-(void)setResizeMode:(TRResizeMode)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->setResizeMode(TRChartsObjc::getResizeModeMarshaller().marshall(value));
}

-(TRTransform *)transform {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getTransformMarshaller().unmarshall(obj->getTransform());
}

-(void)setTransform:(TRTransform *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->setTransform(TRChartsObjc::getTransformMarshaller().marshall(value));
}

-(void)resize:(TRSize *)size contentScaleFactor:(double)contentScaleFactor {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->resize(TRChartsObjc::getSizeMarshaller().marshall(size), TRChartsObjc::getNumberMarshaller().marshall(contentScaleFactor));
}

-(void)relayout {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->relayout();
}

-(void)addAxis:(TRAxis *)axis {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->addAxis(TRChartsObjc::getAxisMarshaller().marshall(axis));
}

-(void)addSeries:(TRSeries *)series {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->addSeries(TRChartsObjc::getSeriesMarshaller().marshall(series));
}

-(void)addDecoration:(TRDecoration *)decoration {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->addDecoration(TRChartsObjc::getDecorationMarshaller().marshall(decoration));
}

-(void)addConstraint:(TRConstraint *)constraint {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->addConstraint(TRChartsObjc::getConstraintMarshaller().marshall(constraint));
}

-(void)removeAxis:(TRAxis *)axis {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->removeAxis(TRChartsObjc::getAxisMarshaller().marshall(axis));
}

-(void)removeSeries:(TRSeries *)series {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->removeSeries(TRChartsObjc::getSeriesMarshaller().marshall(series));
}

-(void)removeDecoration:(TRDecoration *)decoration {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->removeDecoration(TRChartsObjc::getDecorationMarshaller().marshall(decoration));
}

-(void)removeConstraint:(TRConstraint *)constraint {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->removeConstraint(TRChartsObjc::getConstraintMarshaller().marshall(constraint));
}

-(void)applyAnimation:(TRAnimation *)animation {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->applyAnimation(TRChartsObjc::getAnimationMarshaller().marshall(animation));
}

-(void)preUpdate {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->preUpdate();
}

-(BOOL)update {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	return TRChartsObjc::getBooleanMarshaller().unmarshall(obj->update());	
}

-(void)preRender {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->preRender();
}

-(void)render {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->render();
}

-(void)renderRegion:(TRPoint *)position size:(TRSize *)size scale:(double)scale {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->renderRegion(TRChartsObjc::getPointMarshaller().marshall(position), TRChartsObjc::getSizeMarshaller().marshall(size), TRChartsObjc::getNumberMarshaller().marshall(scale));
}

-(void)dispose {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->dispose();
}

-(void)handleTouches:(NSArray *)touches {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Chart> obj = handle->getNativeObject<Charts::Chart>();
	obj->handleTouches(TRChartsObjc::getListTouchMarshaller().marshall(touches));
}

@end