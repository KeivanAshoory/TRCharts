/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/Series.h>
#import <TRChartsObjc/ContinuousAxis.h>

#import <TRCharts/Series.hpp>
#import <TRCharts/ContinuousAxis.hpp>

#import <TRChartsObjc/Support/Marshallers.hh>
#import <TRCodegenSupportObjc/Handle.hh>

@implementation TRSeries

-(TRSeries*)init {
	TRChartsObjc::verifyCurrentQueue();
	@throw [NSException exceptionWithName:@"Init" reason:@"Cannot construct TRSeries directly" userInfo:nil];
}

-(TRContinuousAxis *)ordinateAxis {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Series> obj = handle->getNativeObject<Charts::Series>();
	return TRChartsObjc::getContinuousAxisMarshaller().unmarshall(obj->getOrdinateAxis());
}

-(void)setOrdinateAxis:(TRContinuousAxis *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Series> obj = handle->getNativeObject<Charts::Series>();
	obj->setOrdinateAxis(TRChartsObjc::getContinuousAxisMarshaller().marshall(value));
}

-(TRColor *)color {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Series> obj = handle->getNativeObject<Charts::Series>();
	return TRChartsObjc::getColorMarshaller().unmarshall(obj->getColor());
}

-(void)setColor:(TRColor *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Series> obj = handle->getNativeObject<Charts::Series>();
	obj->setColor(TRChartsObjc::getColorMarshaller().marshall(value));
}

-(void)markDirty {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Series> obj = handle->getNativeObject<Charts::Series>();
	obj->markDirty();
}

-(void)markRangeDirty:(TRIndexRange *)range {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Series> obj = handle->getNativeObject<Charts::Series>();
	obj->markRangeDirty(TRChartsObjc::getIndexRangeMarshaller().marshall(range));
}

@end