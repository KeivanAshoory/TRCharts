/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/RangeCalculator.h>
#import <TRChartsObjc/Range.h>
#import <TRCodegenSupportObjc/BaseObject.h>
@protocol TRRangeCalculator;

/**
 * If this range calculator is used with the AutomaticNumberTickCalculator, it
 * will produce a range that can be automatically aligned (that is, it will be
 * aligned to a power of 2 and 5)
 *
 * NOTE: This will only currently work properly for positive ranges (where
 * in.min and in.max are greater than or equal 0), it will also clamp the
 * minimum value of the range to zero. The support for non-positive ranges is
 * buggy and has been disabled.
 *
 * @warning This is an automatically generated wrapper around a native object;
 * overriding methods will not work as expected.
 *
 */
@interface TRTickAligningRangeCalculator : TRBaseObject<TRRangeCalculator>

/** @name Fields */

/**
 * Optional input range calculator (if specified, this is called first and the
 * result used as the input to calculateRange)
 *
 * @return The current rangeCalculator.
 * @see setRangeCalculator:
 */
-(id<TRRangeCalculator>)rangeCalculator;

/**
 * Optional input range calculator (if specified, this is called first and the
 * result used as the input to calculateRange)
 *
 * @param value The new rangeCalculator.
 * @see rangeCalculator
 */
-(void)setRangeCalculator:(id<TRRangeCalculator>)value;

/** @name Methods */

/**
 * The output data range is [0...align(in.max)], where align(x) returns the next
 * highest power of 2 or 5 to x
 *
 * @param dataRange Input data range
 * @return The result.
 */
-(TRRange *)calculateRange:(TRRange *)dataRange;

@end