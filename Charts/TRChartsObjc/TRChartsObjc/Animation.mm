/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/Animation.h>
#import <TRChartsObjc/AnimationEffect.h>
#import <TRChartsObjc/AnimationDelegate.h>

#import <TRCharts/Animation.hpp>
#import <TRCharts/AnimationEffect.hpp>
#import <TRCharts/AnimationDelegate.hpp>

#import <TRChartsObjc/Support/Marshallers.hh>
#import <TRCodegenSupportObjc/Handle.hh>

@implementation TRAnimation

-(TRAnimation*)init {
	TRChartsObjc::verifyCurrentQueue();
	self = [super initConcrete];
	Charts::Animation * const obj = new Charts::Animation();
	CodegenSupportObjc::Handle * const handle = new CodegenSupportObjc::Handle(obj, self);
	obj->setHandle(handle);
	[self setHandle:handle];
	return self;
}

-(double)duration {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Animation> obj = handle->getNativeObject<Charts::Animation>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getDuration());
}

-(void)setDuration:(double)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Animation> obj = handle->getNativeObject<Charts::Animation>();
	obj->setDuration(TRChartsObjc::getNumberMarshaller().marshall(value));
}

-(double)position {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Animation> obj = handle->getNativeObject<Charts::Animation>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getPosition());
}

-(void)setPosition:(double)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Animation> obj = handle->getNativeObject<Charts::Animation>();
	obj->setPosition(TRChartsObjc::getNumberMarshaller().marshall(value));
}

-(NSArray *)effectList {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Animation> obj = handle->getNativeObject<Charts::Animation>();
	return TRChartsObjc::getListAnimationEffectMarshaller().unmarshall(obj->getEffectList());
}

-(void)setEffectList:(NSArray *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Animation> obj = handle->getNativeObject<Charts::Animation>();
	obj->setEffectList(TRChartsObjc::getListAnimationEffectMarshaller().marshall(value));
}

-(id<TRAnimationDelegate>)delegate {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Animation> obj = handle->getNativeObject<Charts::Animation>();
	return TRChartsObjc::getAnimationDelegateMarshaller().unmarshall(obj->getDelegate());
}

-(void)setDelegate:(id<TRAnimationDelegate>)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Animation> obj = handle->getNativeObject<Charts::Animation>();
	obj->setDelegate(TRChartsObjc::getAnimationDelegateMarshaller().marshall(value));
}

-(void)restart {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Animation> obj = handle->getNativeObject<Charts::Animation>();
	obj->restart();
}

-(void)complete {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Animation> obj = handle->getNativeObject<Charts::Animation>();
	obj->complete();
}

-(void)cancel {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::Animation> obj = handle->getNativeObject<Charts::Animation>();
	obj->cancel();
}

@end