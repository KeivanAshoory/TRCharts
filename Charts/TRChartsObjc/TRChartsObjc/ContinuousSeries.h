/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/Series.h>
#import <TRChartsObjc/Coordinates.h>
#import <TRChartsObjc/Point.h>
#import <TRChartsObjc/Range.h>
@class TRContinuousAxis;
@protocol TRContinuousDataSource;
@protocol TRColorSource;

/**
 * @warning This is an automatically generated wrapper around a native object;
 * overriding methods will not work as expected.
 *
 */
@interface TRContinuousSeries : TRSeries

/** @name Fields */

/**
 * The abscissa axis is conventionally used to plot the independent variable.
 *
 * @return The current abscissa axis.
 * @see setAbscissaAxis:
 */
-(TRContinuousAxis *)abscissaAxis;

/**
 * The abscissa axis is conventionally used to plot the independent variable.
 *
 * @param value The new abscissa axis.
 * @see abscissaAxis
 */
-(void)setAbscissaAxis:(TRContinuousAxis *)value;

/**
 * @return The current data source.
 * @see setDataSource:
 */
-(id<TRContinuousDataSource>)dataSource;

/**
 * @param value The new data source.
 * @see dataSource
 */
-(void)setDataSource:(id<TRContinuousDataSource>)value;

/**
 * The color source is used to provide a different color for each datum.
 *
 * @return The current color source.
 * @see setColorSource:
 */
-(id<TRColorSource>)colorSource;

/**
 * The color source is used to provide a different color for each datum.
 *
 * @param value The new color source.
 * @see colorSource
 */
-(void)setColorSource:(id<TRColorSource>)value;

/** @name Methods */

/**
 * Get the data value for the given screen position
 *
 * @param screenPosition Screen position.
 * @return The result.
 */
-(TRCoordinates *)screenPositionToValue:(TRPoint *)screenPosition;

/**
 * Get the screen position for the given data value
 *
 * @param value Data-space co-ordinates.
 * @return The result.
 */
-(TRPoint *)valueToScreenPosition:(TRCoordinates *)value;

/**
 * Get the datum with the provided index.
 *
 * @param index Data source index
 * @return The result.
 */
-(id)getDatum:(long)index;

/**
 * Interpolate the datum value at the provided abscissa value.
 *
 * The interpolated value is dependent on the series type.
 *
 * @param abscissa Abscissa value
 * @return The result.
 */
-(id)interpolateDatum:(double)abscissa;

/**
 * Get the datum index that appears before the provided abscissa value.
 *
 * Distance is calculated in data space.
 *
 * Returns -1 if there is no datum available.
 *
 * @param abscissa Abscissa value
 * @param includeEqual If true, the last datum with an exactly equal abscissa value will be returned, if such a datum exists.
 * @return The result.
 */
-(long)getIndexBeforeAbscissaValue:(double)abscissa includeEqual:(BOOL)includeEqual;

/**
 * Get the datum index that appears after the provided abscissa value.
 *
 * Distance is calculated in data space.
 *
 * Returns -1 if there is no datum available.
 *
 * @param abscissa Abscissa value
 * @param includeEqual If true, the first datum with an exactly equal abscissa value will be returned, if such a datum exists.
 * @return The result.
 */
-(long)getIndexAfterAbscissaValue:(double)abscissa includeEqual:(BOOL)includeEqual;

/**
 * Get the datum index that appears nearest the provided abscissa value.
 *
 * Distance is calculated in data space.
 *
 * Returns -1 if there is no datum available.
 *
 * @param abscissa Abscissa value
 * @return The result.
 */
-(long)getIndexNearestAbscissaValue:(double)abscissa;

/**
 * Get the datum index that appears nearest the provided screen position.
 *
 * Distance is calculated in screen space.
 *
 * Returns -1 if there is no datum available.
 *
 * @param screenPosition Screen position.
 * @return The result.
 */
-(long)getIndexNearestScreenPosition:(TRPoint *)screenPosition;

/**
 * Get the squared distance between the provided screen position and the datum
 * at the provided index.
 *
 * Distance is calculated in screen space.
 *
 * @param index Data source index
 * @param screenPosition Screen position.
 * @return The result.
 */
-(double)getDatumSquaredDistanceToScreenPosition:(long)index screenPosition:(TRPoint *)screenPosition;

/**
 * Return the range (min-max) of the ordinate (dependent) variable, in a given
 * abscissa (independent) range.
 *
 * This method operates in data co-ordinates.
 *
 * @param abscissaRange Abscissa range (data co-ordinates).
 * @return The result.
 */
-(TRRange *)getOrdinateRangeWithinAbscissaRange:(TRRange *)abscissaRange;

@end