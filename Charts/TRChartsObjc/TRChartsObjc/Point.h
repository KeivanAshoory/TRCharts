/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#include <Foundation/Foundation.h>

#import <TRChartsObjc/Point.h>

/**
 * Represents a 2D point. (Used as a conceptual point and vector).
 *
 * @note This is a value class, when passing it to other library methods it is
 * always effectively copied.
 *
 */
@interface TRPoint : NSObject <NSCopying>

/** @name Fields */
/**
 * The X value.
 */
@property double x;

/**
 * The Y value.
 */
@property double y;

/** @name Methods */
/**
 * Default init.
 *
 * @return Initialized object.
 */
-(TRPoint *)init;

/**
 * Create a Point instance with provided values.
 *
 * @param x The X value.
 * @param y The Y value.
 */
+(TRPoint *)x:(double)x y:(double)y;

/**
 * Utility method to add two points (componentwise)
 *
 * Return value is (result.x = first.x + second.x, ...)
 *
 * @param point First point
 * @param otherPoint Second point
 * @return The result.
 */
+(TRPoint *)add:(TRPoint *)point otherPoint:(TRPoint *)otherPoint;

/**
 * Utility method to subtract two points (componentwise)
 *
 * Return value is (result.x = first.x - second.x, ...)
 *
 * @param point First point
 * @param otherPoint Second point
 * @return The result.
 */
+(TRPoint *)subtract:(TRPoint *)point otherPoint:(TRPoint *)otherPoint;

/**
 * Utility method to multiply two points (componentwise)
 *
 * Return value is (result.x = first.x * second.x, ...)
 *
 * @param point First point
 * @param otherPoint Second point
 * @return The result.
 */
+(TRPoint *)multiply:(TRPoint *)point otherPoint:(TRPoint *)otherPoint;

/**
 * Utility method to divide two points (componentwise)
 *
 * Return value is (result.x = first.x / second.x, ...)
 *
 * @param point First point
 * @param otherPoint Second point
 * @return The result.
 */
+(TRPoint *)divide:(TRPoint *)point otherPoint:(TRPoint *)otherPoint;

/**
 * Test for equality (uses all struct fields)
 *
 * @param anObject Object to compare to.
 * @return True if the objects are equal.
 */
-(BOOL)isEqual:(id)anObject;

/**
 * Calculate the hash code (uses all struct fields)
 *
 * @return The hash code.
 */
-(NSUInteger)hash;

/**
 * Create a copy (uses all struct fields)
 *
 * @param zone Memory zone.
 * @return A copy.
 */
-(id)copyWithZone:(NSZone *)zone;

/**
 * Create a string description (uses all struct fields)
 *
 * @return The description.
 */
-(NSString*)description;

@end