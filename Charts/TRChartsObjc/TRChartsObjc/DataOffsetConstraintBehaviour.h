/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/ConstraintBehaviour.h>
#import <TRChartsObjc/Edge.h>
#import <TRChartsObjc/Transform.h>
#import <TRChartsObjc/Size.h>
#import <TRCodegenSupportObjc/BaseObject.h>
@class TRAxis;
@class TRChart;

/**
 * Constrain the data scale for a given set of axes, such that the axis cannot
 * be panned further than the total data range.
 *
 * @warning This is an automatically generated wrapper around a native object;
 * overriding methods will not work as expected.
 *
 */
@interface TRDataOffsetConstraintBehaviour : TRBaseObject<TRConstraintBehaviour>

/** @name Fields */

/**
 * Axes to target
 *
 * @return The current axes.
 * @see setAxes:
 */
-(NSArray *)axes;

/**
 * Axes to target
 *
 * @param value The new axes.
 * @see axes
 */
-(void)setAxes:(NSArray *)value;

/**
 * Edges to target
 *
 * @return The current edges.
 * @see setEdges:
 */
-(NSArray *)edges;

/**
 * Edges to target
 *
 * @param value The new edges.
 * @see edges
 */
-(void)setEdges:(NSArray *)value;

/**
 * Mix factor between the current value and the fully constrained value (may be
 * used to visually animate the constraint).
 *
 * @return The current multiplier.
 * @see setMultiplier:
 */
-(double)multiplier;

/**
 * Mix factor between the current value and the fully constrained value (may be
 * used to visually animate the constraint).
 *
 * @param value The new multiplier.
 * @see multiplier
 */
-(void)setMultiplier:(double)value;

/** @name Methods */

/**
 * @param chart Current chart
 * @param size Screen-space size of the chart
 * @param transform Screen-space transform
 * @return The result.
 */
-(TRTransform *)apply:(TRChart *)chart size:(TRSize *)size transform:(TRTransform *)transform;

@end