/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/IndexRange.h>
#import <TRChartsObjc/Support/Marshallers.hh>

@implementation TRIndexRange

-(TRIndexRange *)init
{
	self = [super init];
	if(self) {
		self.begin = 0L;
		self.end = 0L;
	}
	return self;
}

+(TRIndexRange *)begin:(long)begin end:(long)end
{
	TRIndexRange * const result = [[TRIndexRange alloc] init];
	result.begin = begin;
	result.end = end;
	return result;
}

+(long)length:(TRIndexRange *)indexRange
{
	return TRChartsObjc::getIntegerMarshaller().unmarshall(Charts::IndexRange::length(TRChartsObjc::getIndexRangeMarshaller().marshall(indexRange)));	
}

+(BOOL)valid:(TRIndexRange *)indexRange
{
	return TRChartsObjc::getBooleanMarshaller().unmarshall(Charts::IndexRange::valid(TRChartsObjc::getIndexRangeMarshaller().marshall(indexRange)));	
}

+(BOOL)validWithin:(TRIndexRange *)indexRange otherIndexRange:(TRIndexRange *)otherIndexRange
{
	return TRChartsObjc::getBooleanMarshaller().unmarshall(Charts::IndexRange::validWithin(TRChartsObjc::getIndexRangeMarshaller().marshall(indexRange), TRChartsObjc::getIndexRangeMarshaller().marshall(otherIndexRange)));	
}

+(BOOL)positive:(TRIndexRange *)indexRange
{
	return TRChartsObjc::getBooleanMarshaller().unmarshall(Charts::IndexRange::positive(TRChartsObjc::getIndexRangeMarshaller().marshall(indexRange)));	
}

+(TRIndexRange *)merge:(TRIndexRange *)indexRange otherIndexRange:(TRIndexRange *)otherIndexRange
{
	return TRChartsObjc::getIndexRangeMarshaller().unmarshall(Charts::IndexRange::merge(TRChartsObjc::getIndexRangeMarshaller().marshall(indexRange), TRChartsObjc::getIndexRangeMarshaller().marshall(otherIndexRange)));	
}

+(TRIndexRange *)clamp:(TRIndexRange *)indexRange withinIndexRange:(TRIndexRange *)withinIndexRange
{
	return TRChartsObjc::getIndexRangeMarshaller().unmarshall(Charts::IndexRange::clamp(TRChartsObjc::getIndexRangeMarshaller().marshall(indexRange), TRChartsObjc::getIndexRangeMarshaller().marshall(withinIndexRange)));	
}

+(BOOL)overlap:(TRIndexRange *)indexRange otherIndexRange:(TRIndexRange *)otherIndexRange
{
	return TRChartsObjc::getBooleanMarshaller().unmarshall(Charts::IndexRange::overlap(TRChartsObjc::getIndexRangeMarshaller().marshall(indexRange), TRChartsObjc::getIndexRangeMarshaller().marshall(otherIndexRange)));	
}

-(BOOL)isEqual:(id)anObject
{
	if(anObject == nil || ! [anObject isKindOfClass:[TRIndexRange class]]) {
		return NO;
	}
	TRIndexRange * other = anObject;
	BOOL result = YES;
	result = result && (self.begin == other.begin);
	result = result && (self.end == other.end);
	return result;
}

-(NSUInteger)hash
{
	NSUInteger result = 7;
    result = 31 * result + (NSUInteger)self.begin;
    result = 31 * result + (NSUInteger)self.end;
	return result;
}

-(id)copyWithZone:(NSZone *)zone
{
	TRIndexRange * copy = [[self class] allocWithZone:zone];
	copy.begin = self.begin;
	copy.end = self.end;
	return copy;
}

-(NSString*)description
{
	return [NSString stringWithFormat:@"TRIndexRange[%ld, %ld]", self.begin, self.end];
}

@end