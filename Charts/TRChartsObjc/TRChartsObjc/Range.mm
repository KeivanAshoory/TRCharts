/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/Range.h>
#import <TRChartsObjc/Support/Marshallers.hh>

@implementation TRRange

-(TRRange *)init
{
	self = [super init];
	if(self) {
		self.min = 0.0;
		self.max = 0.0;
	}
	return self;
}

+(TRRange *)min:(double)min max:(double)max
{
	TRRange * const result = [[TRRange alloc] init];
	result.min = min;
	result.max = max;
	return result;
}

+(double)length:(TRRange *)range
{
	return TRChartsObjc::getNumberMarshaller().unmarshall(Charts::Range::length(TRChartsObjc::getRangeMarshaller().marshall(range)));	
}

+(BOOL)valid:(TRRange *)range
{
	return TRChartsObjc::getBooleanMarshaller().unmarshall(Charts::Range::valid(TRChartsObjc::getRangeMarshaller().marshall(range)));	
}

+(BOOL)positive:(TRRange *)range
{
	return TRChartsObjc::getBooleanMarshaller().unmarshall(Charts::Range::positive(TRChartsObjc::getRangeMarshaller().marshall(range)));	
}

+(TRRange *)merge:(TRRange *)range otherRange:(TRRange *)otherRange
{
	return TRChartsObjc::getRangeMarshaller().unmarshall(Charts::Range::merge(TRChartsObjc::getRangeMarshaller().marshall(range), TRChartsObjc::getRangeMarshaller().marshall(otherRange)));	
}

+(TRRange *)clamp:(TRRange *)range withinRange:(TRRange *)withinRange
{
	return TRChartsObjc::getRangeMarshaller().unmarshall(Charts::Range::clamp(TRChartsObjc::getRangeMarshaller().marshall(range), TRChartsObjc::getRangeMarshaller().marshall(withinRange)));	
}

+(BOOL)overlap:(TRRange *)range otherRange:(TRRange *)otherRange
{
	return TRChartsObjc::getBooleanMarshaller().unmarshall(Charts::Range::overlap(TRChartsObjc::getRangeMarshaller().marshall(range), TRChartsObjc::getRangeMarshaller().marshall(otherRange)));	
}

+(TRRange *)identity
{
	return TRChartsObjc::getRangeMarshaller().unmarshall(Charts::Range::identity());	
}

-(BOOL)isEqual:(id)anObject
{
	if(anObject == nil || ! [anObject isKindOfClass:[TRRange class]]) {
		return NO;
	}
	TRRange * other = anObject;
	BOOL result = YES;
	result = result && (self.min == other.min);
	result = result && (self.max == other.max);
	return result;
}

-(NSUInteger)hash
{
	NSUInteger result = 7;
    result = 31 * result + (NSUInteger)self.min;
    result = 31 * result + (NSUInteger)self.max;
	return result;
}

-(id)copyWithZone:(NSZone *)zone
{
	TRRange * copy = [[self class] allocWithZone:zone];
	copy.min = self.min;
	copy.max = self.max;
	return copy;
}

-(NSString*)description
{
	return [NSString stringWithFormat:@"TRRange[%f, %f]", self.min, self.max];
}

@end