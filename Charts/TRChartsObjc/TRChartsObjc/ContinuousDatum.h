/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#include <Foundation/Foundation.h>


/**
 * Continuous datums have two co-ordinates, an abscissa (usually X) and an
 * ordinate (usually Y), although X and Y can be flipped using axis association.
 * In a continuous datum the abscissa value is always a real number, and the
 * ordinate type is defined by subclasses. Ordinate values may be complex
 * (structured), or numbers. The interpretation of a datum is series-dependent,
 * a given continuous series implementation will always require a specific datum
 * type. 
 *
 * @note This is a value class, when passing it to other library methods it is
 * always effectively copied.
 *
 */
@interface TRContinuousDatum : NSObject <NSCopying>

/** @name Fields */
/**
 * The abscissa value.
 *
 * The independent variable (usually)
 */
@property double abscissa;

/** @name Methods */
/**
 * Default init.
 *
 * @return Initialized object.
 */
-(TRContinuousDatum *)init;

/**
 * Create a ContinuousDatum instance with provided values.
 *
 * @param abscissa The abscissa value.
 */
+(TRContinuousDatum *)abscissa:(double)abscissa;

/**
 * Test for equality (uses all struct fields)
 *
 * @param anObject Object to compare to.
 * @return True if the objects are equal.
 */
-(BOOL)isEqual:(id)anObject;

/**
 * Calculate the hash code (uses all struct fields)
 *
 * @return The hash code.
 */
-(NSUInteger)hash;

/**
 * Create a copy (uses all struct fields)
 *
 * @param zone Memory zone.
 * @return A copy.
 */
-(id)copyWithZone:(NSZone *)zone;

/**
 * Create a string description (uses all struct fields)
 *
 * @return The description.
 */
-(NSString*)description;

@end