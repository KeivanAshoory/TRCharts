/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/ContinuousAxis.h>
#import <TRChartsObjc/AxisLayout.h>
#import <TRChartsObjc/RangeCalculator.h>

#import <TRCharts/ContinuousAxis.hpp>
#import <TRCharts/AxisLayout.hpp>
#import <TRCharts/RangeCalculator.hpp>

#import <TRChartsObjc/Support/Marshallers.hh>
#import <TRCodegenSupportObjc/Handle.hh>

@implementation TRContinuousAxis

-(TRContinuousAxis*)init {
	TRChartsObjc::verifyCurrentQueue();
	@throw [NSException exceptionWithName:@"Init" reason:@"Cannot construct TRContinuousAxis directly" userInfo:nil];
}

-(id<TRAxisLayout>)layout {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::ContinuousAxis> obj = handle->getNativeObject<Charts::ContinuousAxis>();
	return TRChartsObjc::getAxisLayoutMarshaller().unmarshall(obj->getLayout());
}

-(void)setLayout:(id<TRAxisLayout>)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::ContinuousAxis> obj = handle->getNativeObject<Charts::ContinuousAxis>();
	obj->setLayout(TRChartsObjc::getAxisLayoutMarshaller().marshall(value));
}

-(id<TRRangeCalculator>)rangeCalculator {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::ContinuousAxis> obj = handle->getNativeObject<Charts::ContinuousAxis>();
	return TRChartsObjc::getRangeCalculatorMarshaller().unmarshall(obj->getRangeCalculator());
}

-(void)setRangeCalculator:(id<TRRangeCalculator>)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::ContinuousAxis> obj = handle->getNativeObject<Charts::ContinuousAxis>();
	obj->setRangeCalculator(TRChartsObjc::getRangeCalculatorMarshaller().marshall(value));
}

-(TRDataTransform *)valueTransform {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::ContinuousAxis> obj = handle->getNativeObject<Charts::ContinuousAxis>();
	return TRChartsObjc::getDataTransformMarshaller().unmarshall(obj->getValueTransform());
}

-(void)setValueTransform:(TRDataTransform *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::ContinuousAxis> obj = handle->getNativeObject<Charts::ContinuousAxis>();
	obj->setValueTransform(TRChartsObjc::getDataTransformMarshaller().marshall(value));
}

-(TRRange *)dataRange {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::ContinuousAxis> obj = handle->getNativeObject<Charts::ContinuousAxis>();
	return TRChartsObjc::getRangeMarshaller().unmarshall(obj->getDataRange());
}

-(TRRange *)screenDataRange {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::ContinuousAxis> obj = handle->getNativeObject<Charts::ContinuousAxis>();
	return TRChartsObjc::getRangeMarshaller().unmarshall(obj->getScreenDataRange());
}

@end