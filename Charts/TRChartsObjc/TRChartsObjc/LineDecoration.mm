/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/LineDecoration.h>
#import <TRChartsObjc/ContinuousAxis.h>

#import <TRCharts/LineDecoration.hpp>
#import <TRCharts/ContinuousAxis.hpp>

#import <TRChartsObjc/Support/Marshallers.hh>
#import <TRCodegenSupportObjc/Handle.hh>

@implementation TRLineDecoration

-(TRLineDecoration*)init {
	TRChartsObjc::verifyCurrentQueue();
	self = [super initConcrete];
	Charts::LineDecoration * const obj = new Charts::LineDecoration();
	CodegenSupportObjc::Handle * const handle = new CodegenSupportObjc::Handle(obj, self);
	obj->setHandle(handle);
	[self setHandle:handle];
	return self;
}

-(TRContinuousAxis *)axis {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::LineDecoration> obj = handle->getNativeObject<Charts::LineDecoration>();
	return TRChartsObjc::getContinuousAxisMarshaller().unmarshall(obj->getAxis());
}

-(void)setAxis:(TRContinuousAxis *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::LineDecoration> obj = handle->getNativeObject<Charts::LineDecoration>();
	obj->setAxis(TRChartsObjc::getContinuousAxisMarshaller().marshall(value));
}

-(double)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::LineDecoration> obj = handle->getNativeObject<Charts::LineDecoration>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getValue());
}

-(void)setValue:(double)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::LineDecoration> obj = handle->getNativeObject<Charts::LineDecoration>();
	obj->setValue(TRChartsObjc::getNumberMarshaller().marshall(value));
}

-(TRLineStyle *)lineStyle {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::LineDecoration> obj = handle->getNativeObject<Charts::LineDecoration>();
	return TRChartsObjc::getLineStyleMarshaller().unmarshall(obj->getLineStyle());
}

-(void)setLineStyle:(TRLineStyle *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::LineDecoration> obj = handle->getNativeObject<Charts::LineDecoration>();
	obj->setLineStyle(TRChartsObjc::getLineStyleMarshaller().marshall(value));
}

@end