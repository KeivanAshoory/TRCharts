/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#include <Foundation/Foundation.h>

#import <TRChartsObjc/Margin.h>

/**
 * Represents 4 edges (for margin/padding/etc)
 *
 * @note This is a value class, when passing it to other library methods it is
 * always effectively copied.
 *
 */
@interface TRMargin : NSObject <NSCopying>

/** @name Fields */
/**
 * The left margin.
 */
@property double left;

/**
 * The right margin.
 */
@property double right;

/**
 * The bottom margin.
 */
@property double bottom;

/**
 * The top margin.
 */
@property double top;

/** @name Methods */
/**
 * Default init.
 *
 * @return Initialized object.
 */
-(TRMargin *)init;

/**
 * Create a Margin instance with provided values.
 *
 * @param left The left margin.
 * @param right The right margin.
 * @param bottom The bottom margin.
 * @param top The top margin.
 */
+(TRMargin *)left:(double)left right:(double)right bottom:(double)bottom top:(double)top;

/**
 * Utility method to add two margins (edgewise)
 *
 * Return value is (result.left = first.left + second.left, ...)
 *
 * @param margin First margin
 * @param toMargin Second margin
 * @return The result.
 */
+(TRMargin *)add:(TRMargin *)margin toMargin:(TRMargin *)toMargin;

/**
 * Test for equality (uses all struct fields)
 *
 * @param anObject Object to compare to.
 * @return True if the objects are equal.
 */
-(BOOL)isEqual:(id)anObject;

/**
 * Calculate the hash code (uses all struct fields)
 *
 * @return The hash code.
 */
-(NSUInteger)hash;

/**
 * Create a copy (uses all struct fields)
 *
 * @param zone Memory zone.
 * @return A copy.
 */
-(id)copyWithZone:(NSZone *)zone;

/**
 * Create a string description (uses all struct fields)
 *
 * @return The description.
 */
-(NSString*)description;

@end