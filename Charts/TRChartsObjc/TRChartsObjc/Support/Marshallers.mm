/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/Support/Marshallers.hh>
#import <TRChartsObjc/RangeCalculator.h>
#import <TRChartsObjc/ContinuousAxis.h>
#import <TRChartsObjc/Label.h>
#import <TRChartsObjc/AxisLayout.h>
#import <TRChartsObjc/NumberFormatter.h>
#import <TRChartsObjc/NumberTickCalculator.h>
#import <TRChartsObjc/DateFormatter.h>
#import <TRChartsObjc/DateTickCalculator.h>
#import <TRChartsObjc/ContinuousDataSource.h>
#import <TRChartsObjc/ScalarDatum.h>
#import <TRChartsObjc/LineStyleSource.h>
#import <TRChartsObjc/RangeDatum.h>
#import <TRChartsObjc/OHLCDatum.h>
#import <TRChartsObjc/AnimationEffect.h>
#import <TRChartsObjc/AnimationDelegate.h>
#import <TRChartsObjc/Drawable.h>
#import <TRChartsObjc/ConstraintBehaviour.h>
#import <TRChartsObjc/Axis.h>
#import <TRChartsObjc/Chart.h>
#import <TRChartsObjc/Series.h>
#import <TRChartsObjc/Decoration.h>
#import <TRChartsObjc/Constraint.h>
#import <TRChartsObjc/Animation.h>
#import <TRChartsObjc/ColorSource.h>
#import <TRChartsObjc/ContinuousSeries.h>
#import <TRChartsObjc/LogHandler.h>

#import <TRCharts/Common.hpp>
#import <TRCharts/RangeCalculator.hpp>
#import <TRCharts/ContinuousAxis.hpp>
#import <TRCharts/Label.hpp>
#import <TRCharts/AxisLayout.hpp>
#import <TRCharts/NumberFormatter.hpp>
#import <TRCharts/NumberTickCalculator.hpp>
#import <TRCharts/DateFormatter.hpp>
#import <TRCharts/DateTickCalculator.hpp>
#import <TRCharts/ContinuousDataSource.hpp>
#import <TRCharts/ScalarDatum.hpp>
#import <TRCharts/LineStyleSource.hpp>
#import <TRCharts/RangeDatum.hpp>
#import <TRCharts/OHLCDatum.hpp>
#import <TRCharts/AnimationEffect.hpp>
#import <TRCharts/AnimationDelegate.hpp>
#import <TRCharts/Drawable.hpp>
#import <TRCharts/ConstraintBehaviour.hpp>
#import <TRCharts/Axis.hpp>
#import <TRCharts/Chart.hpp>
#import <TRCharts/Series.hpp>
#import <TRCharts/Decoration.hpp>
#import <TRCharts/Constraint.hpp>
#import <TRCharts/Animation.hpp>
#import <TRCharts/ColorSource.hpp>
#import <TRCharts/ContinuousSeries.hpp>
#import <TRCharts/LogHandler.hpp>

#import <TRCodegenSupportObjc/BooleanMarshaller.hh>
#import <TRCodegenSupportObjc/IntegerMarshaller.hh>
#import <TRCodegenSupportObjc/NumberMarshaller.hh>
#import <TRCodegenSupportObjc/StringMarshaller.hh>
#import <TRCodegenSupportObjc/ObjectMarshaller.hh>
#import <TRCodegenSupportObjc/EnumMarshaller.hh>
#import <TRCodegenSupportObjc/ListMarshaller.hh>

#import <TRChartsObjc/Support/ColorStructMarshaller.hh>
#import <TRChartsObjc/Support/FontStructMarshaller.hh>
#import <TRChartsObjc/Support/MarginStructMarshaller.hh>
#import <TRChartsObjc/Support/SizeStructMarshaller.hh>
#import <TRChartsObjc/Support/RangeStructMarshaller.hh>
#import <TRChartsObjc/Support/DateIntervalStructMarshaller.hh>
#import <TRChartsObjc/Support/DataTransformStructMarshaller.hh>
#import <TRChartsObjc/Support/LineStyleStructMarshaller.hh>
#import <TRChartsObjc/Support/IndexRangeStructMarshaller.hh>
#import <TRChartsObjc/Support/PointStyleStructMarshaller.hh>
#import <TRChartsObjc/Support/ScalarDatumStructMarshaller.hh>
#import <TRChartsObjc/Support/RangeDatumStructMarshaller.hh>
#import <TRChartsObjc/Support/OHLCDatumStructMarshaller.hh>
#import <TRChartsObjc/Support/CoordinatesStructMarshaller.hh>
#import <TRChartsObjc/Support/TransformStructMarshaller.hh>
#import <TRChartsObjc/Support/TouchStructMarshaller.hh>
#import <TRChartsObjc/Support/PointStructMarshaller.hh>
#import <TRChartsObjc/Support/OHLCStructMarshaller.hh>
#import <TRChartsObjc/Support/RangeCalculatorInterfaceMarshaller.hh>
#import <TRChartsObjc/Support/AxisLayoutInterfaceMarshaller.hh>
#import <TRChartsObjc/Support/NumberFormatterInterfaceMarshaller.hh>
#import <TRChartsObjc/Support/NumberTickCalculatorInterfaceMarshaller.hh>
#import <TRChartsObjc/Support/DateFormatterInterfaceMarshaller.hh>
#import <TRChartsObjc/Support/DateTickCalculatorInterfaceMarshaller.hh>
#import <TRChartsObjc/Support/ContinuousDataSourceInterfaceMarshaller.hh>
#import <TRChartsObjc/Support/ScalarDatumStructMarshaller.hh>
#import <TRChartsObjc/Support/LineStyleSourceInterfaceMarshaller.hh>
#import <TRChartsObjc/Support/RangeDatumStructMarshaller.hh>
#import <TRChartsObjc/Support/OHLCDatumStructMarshaller.hh>
#import <TRChartsObjc/Support/AnimationEffectInterfaceMarshaller.hh>
#import <TRChartsObjc/Support/AnimationDelegateInterfaceMarshaller.hh>
#import <TRChartsObjc/Support/ConstraintBehaviourInterfaceMarshaller.hh>
#import <TRChartsObjc/Support/ColorSourceInterfaceMarshaller.hh>
#import <TRChartsObjc/Support/LogHandlerInterfaceMarshaller.hh>

namespace
{
	std::shared_ptr<CodegenSupportObjc::Marshaller<bool, BOOL>> cachedBooleanMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<double, double>> cachedNumberMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<long, long>> cachedIntegerMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::string, NSString *>> cachedStringMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::Color, id>> cachedColorMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::Font, id>> cachedFontMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::Margin, id>> cachedMarginMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::Size, id>> cachedSizeMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<std::string>, NSArray *>> cachedListStringMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::FormatSyntax, TRFormatSyntax>> cachedFormatSyntaxMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::DateUnit, TRDateUnit>> cachedDateUnitMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::Range, id>> cachedRangeMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<double>, NSArray *>> cachedListNumberMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::DateInterval, id>> cachedDateIntervalMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::RangeCalculator>, id>> cachedRangeCalculatorMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::DataTransform, id>> cachedDataTransformMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ContinuousAxis>, id>> cachedContinuousAxisMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::Edge, TREdge>> cachedEdgeMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Label>, id>> cachedLabelMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::LineStyle, id>> cachedLineStyleMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::AxisLayout>, id>> cachedAxisLayoutMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::NumberFormatter>, id>> cachedNumberFormatterMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::NumberTickCalculator>, id>> cachedNumberTickCalculatorMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::DateFormatter>, id>> cachedDateFormatterMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::DateTickCalculator>, id>> cachedDateTickCalculatorMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::IndexRange, id>> cachedIndexRangeMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::PointStyle, id>> cachedPointStyleMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::ScalarDatum>>, id>> cachedContinuousDataSource_ScalarDatumMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::ScalarDatum, id>> cachedScalarDatumMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::LineStyleSource>, id>> cachedLineStyleSourceMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::RangeDatum>>, id>> cachedContinuousDataSource_RangeDatumMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::RangeDatum, id>> cachedRangeDatumMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::OHLCDatum>>, id>> cachedContinuousDataSource_OHLCDatumMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::OHLCDatum, id>> cachedOHLCDatumMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::Coordinates, id>> cachedCoordinatesMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::AnimationEffect>>, NSArray *>> cachedListAnimationEffectMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::AnimationEffect>, id>> cachedAnimationEffectMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::AnimationDelegate>, id>> cachedAnimationDelegateMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Drawable>>, NSArray *>> cachedListDrawableMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Drawable>, id>> cachedDrawableMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ConstraintBehaviour>, id>> cachedConstraintBehaviourMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Axis>>, NSArray *>> cachedListAxisMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Axis>, id>> cachedAxisMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::Transform, id>> cachedTransformMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Chart>, id>> cachedChartMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<Charts::Edge>, NSArray *>> cachedListEdgeMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Series>>, NSArray *>> cachedListSeriesMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Series>, id>> cachedSeriesMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Decoration>>, NSArray *>> cachedListDecorationMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Decoration>, id>> cachedDecorationMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Constraint>>, NSArray *>> cachedListConstraintMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Constraint>, id>> cachedConstraintMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Animation>>, NSArray *>> cachedListAnimationMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Animation>, id>> cachedAnimationMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<Charts::Touch>, NSArray *>> cachedListTouchMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::Touch, id>> cachedTouchMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::ResizeMode, TRResizeMode>> cachedResizeModeMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::Point, id>> cachedPointMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::FontHint, TRFontHint>> cachedFontHintMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::LineMode, TRLineMode>> cachedLineModeMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::OHLC, id>> cachedOHLCMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<Charts::LogLevel, TRLogLevel>> cachedLogLevelMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<Charts::Color>, NSArray *>> cachedListColorMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::vector<Charts::LineStyle>, NSArray *>> cachedListLineStyleMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ColorSource>, id>> cachedColorSourceMarshaller;
	std::shared_ptr<CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::LogHandler>, id>> cachedLogHandlerMarshaller;
}

const CodegenSupportObjc::Marshaller<bool, BOOL> & TRChartsObjc::getBooleanMarshaller(void)
{
	if(!::cachedBooleanMarshaller) {
		::cachedBooleanMarshaller.reset(new CodegenSupportObjc::BooleanMarshaller());
	}
	return *::cachedBooleanMarshaller;
}

const CodegenSupportObjc::Marshaller<double, double> & TRChartsObjc::getNumberMarshaller(void)
{
	if(!::cachedNumberMarshaller) {
		::cachedNumberMarshaller.reset(new CodegenSupportObjc::NumberMarshaller());
	}
	return *::cachedNumberMarshaller;
}

const CodegenSupportObjc::Marshaller<long, long> & TRChartsObjc::getIntegerMarshaller(void)
{
	if(!::cachedIntegerMarshaller) {
		::cachedIntegerMarshaller.reset(new CodegenSupportObjc::IntegerMarshaller());
	}
	return *::cachedIntegerMarshaller;
}

const CodegenSupportObjc::Marshaller<std::string, NSString *> & TRChartsObjc::getStringMarshaller(void)
{
	if(!::cachedStringMarshaller) {
		::cachedStringMarshaller.reset(new CodegenSupportObjc::StringMarshaller());
	}
	return *::cachedStringMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::Color, id> & TRChartsObjc::getColorMarshaller(void)
{
	if(!::cachedColorMarshaller) {
		::cachedColorMarshaller.reset(new TRChartsObjc::ColorStructMarshaller());
	}
	return *::cachedColorMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::Font, id> & TRChartsObjc::getFontMarshaller(void)
{
	if(!::cachedFontMarshaller) {
		::cachedFontMarshaller.reset(new TRChartsObjc::FontStructMarshaller());
	}
	return *::cachedFontMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::Margin, id> & TRChartsObjc::getMarginMarshaller(void)
{
	if(!::cachedMarginMarshaller) {
		::cachedMarginMarshaller.reset(new TRChartsObjc::MarginStructMarshaller());
	}
	return *::cachedMarginMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::Size, id> & TRChartsObjc::getSizeMarshaller(void)
{
	if(!::cachedSizeMarshaller) {
		::cachedSizeMarshaller.reset(new TRChartsObjc::SizeStructMarshaller());
	}
	return *::cachedSizeMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<std::string>, NSArray *> & TRChartsObjc::getListStringMarshaller(void)
{
	if(!::cachedListStringMarshaller) {
		::cachedListStringMarshaller.reset(new CodegenSupportObjc::ListMarshaller<std::string, NSString *>(getStringMarshaller()));
	}
	return *::cachedListStringMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::FormatSyntax, TRFormatSyntax> & TRChartsObjc::getFormatSyntaxMarshaller(void)
{
	if(!::cachedFormatSyntaxMarshaller) {
		::cachedFormatSyntaxMarshaller.reset(new CodegenSupportObjc::EnumMarshaller<Charts::FormatSyntax, TRFormatSyntax>());
	}
	return *::cachedFormatSyntaxMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::DateUnit, TRDateUnit> & TRChartsObjc::getDateUnitMarshaller(void)
{
	if(!::cachedDateUnitMarshaller) {
		::cachedDateUnitMarshaller.reset(new CodegenSupportObjc::EnumMarshaller<Charts::DateUnit, TRDateUnit>());
	}
	return *::cachedDateUnitMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::Range, id> & TRChartsObjc::getRangeMarshaller(void)
{
	if(!::cachedRangeMarshaller) {
		::cachedRangeMarshaller.reset(new TRChartsObjc::RangeStructMarshaller());
	}
	return *::cachedRangeMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<double>, NSArray *> & TRChartsObjc::getListNumberMarshaller(void)
{
	if(!::cachedListNumberMarshaller) {
		::cachedListNumberMarshaller.reset(new CodegenSupportObjc::ListMarshaller<double, double>(getNumberMarshaller()));
	}
	return *::cachedListNumberMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::DateInterval, id> & TRChartsObjc::getDateIntervalMarshaller(void)
{
	if(!::cachedDateIntervalMarshaller) {
		::cachedDateIntervalMarshaller.reset(new TRChartsObjc::DateIntervalStructMarshaller());
	}
	return *::cachedDateIntervalMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::RangeCalculator>, id> & TRChartsObjc::getRangeCalculatorMarshaller(void)
{
	if(!::cachedRangeCalculatorMarshaller) {
		::cachedRangeCalculatorMarshaller.reset(new TRChartsObjc::RangeCalculatorInterfaceMarshaller());
	}
	return *::cachedRangeCalculatorMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::DataTransform, id> & TRChartsObjc::getDataTransformMarshaller(void)
{
	if(!::cachedDataTransformMarshaller) {
		::cachedDataTransformMarshaller.reset(new TRChartsObjc::DataTransformStructMarshaller());
	}
	return *::cachedDataTransformMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ContinuousAxis>, id> & TRChartsObjc::getContinuousAxisMarshaller(void)
{
	if(!::cachedContinuousAxisMarshaller) {
		::cachedContinuousAxisMarshaller.reset(new CodegenSupportObjc::ObjectMarshaller<Charts::ContinuousAxis>());
	}
	return *::cachedContinuousAxisMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::Edge, TREdge> & TRChartsObjc::getEdgeMarshaller(void)
{
	if(!::cachedEdgeMarshaller) {
		::cachedEdgeMarshaller.reset(new CodegenSupportObjc::EnumMarshaller<Charts::Edge, TREdge>());
	}
	return *::cachedEdgeMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Label>, id> & TRChartsObjc::getLabelMarshaller(void)
{
	if(!::cachedLabelMarshaller) {
		::cachedLabelMarshaller.reset(new CodegenSupportObjc::ObjectMarshaller<Charts::Label>());
	}
	return *::cachedLabelMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::LineStyle, id> & TRChartsObjc::getLineStyleMarshaller(void)
{
	if(!::cachedLineStyleMarshaller) {
		::cachedLineStyleMarshaller.reset(new TRChartsObjc::LineStyleStructMarshaller());
	}
	return *::cachedLineStyleMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::AxisLayout>, id> & TRChartsObjc::getAxisLayoutMarshaller(void)
{
	if(!::cachedAxisLayoutMarshaller) {
		::cachedAxisLayoutMarshaller.reset(new TRChartsObjc::AxisLayoutInterfaceMarshaller());
	}
	return *::cachedAxisLayoutMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::NumberFormatter>, id> & TRChartsObjc::getNumberFormatterMarshaller(void)
{
	if(!::cachedNumberFormatterMarshaller) {
		::cachedNumberFormatterMarshaller.reset(new TRChartsObjc::NumberFormatterInterfaceMarshaller());
	}
	return *::cachedNumberFormatterMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::NumberTickCalculator>, id> & TRChartsObjc::getNumberTickCalculatorMarshaller(void)
{
	if(!::cachedNumberTickCalculatorMarshaller) {
		::cachedNumberTickCalculatorMarshaller.reset(new TRChartsObjc::NumberTickCalculatorInterfaceMarshaller());
	}
	return *::cachedNumberTickCalculatorMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::DateFormatter>, id> & TRChartsObjc::getDateFormatterMarshaller(void)
{
	if(!::cachedDateFormatterMarshaller) {
		::cachedDateFormatterMarshaller.reset(new TRChartsObjc::DateFormatterInterfaceMarshaller());
	}
	return *::cachedDateFormatterMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::DateTickCalculator>, id> & TRChartsObjc::getDateTickCalculatorMarshaller(void)
{
	if(!::cachedDateTickCalculatorMarshaller) {
		::cachedDateTickCalculatorMarshaller.reset(new TRChartsObjc::DateTickCalculatorInterfaceMarshaller());
	}
	return *::cachedDateTickCalculatorMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::IndexRange, id> & TRChartsObjc::getIndexRangeMarshaller(void)
{
	if(!::cachedIndexRangeMarshaller) {
		::cachedIndexRangeMarshaller.reset(new TRChartsObjc::IndexRangeStructMarshaller());
	}
	return *::cachedIndexRangeMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::PointStyle, id> & TRChartsObjc::getPointStyleMarshaller(void)
{
	if(!::cachedPointStyleMarshaller) {
		::cachedPointStyleMarshaller.reset(new TRChartsObjc::PointStyleStructMarshaller());
	}
	return *::cachedPointStyleMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::ScalarDatum>>, id> & TRChartsObjc::getContinuousDataSource_ScalarDatumMarshaller(void)
{
	if(!::cachedContinuousDataSource_ScalarDatumMarshaller) {
		::cachedContinuousDataSource_ScalarDatumMarshaller.reset(new TRChartsObjc::ContinuousDataSourceInterfaceMarshaller<Charts::ScalarDatum>(getScalarDatumMarshaller()));
	}
	return *::cachedContinuousDataSource_ScalarDatumMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::ScalarDatum, id> & TRChartsObjc::getScalarDatumMarshaller(void)
{
	if(!::cachedScalarDatumMarshaller) {
		::cachedScalarDatumMarshaller.reset(new TRChartsObjc::ScalarDatumStructMarshaller());
	}
	return *::cachedScalarDatumMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::LineStyleSource>, id> & TRChartsObjc::getLineStyleSourceMarshaller(void)
{
	if(!::cachedLineStyleSourceMarshaller) {
		::cachedLineStyleSourceMarshaller.reset(new TRChartsObjc::LineStyleSourceInterfaceMarshaller());
	}
	return *::cachedLineStyleSourceMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::RangeDatum>>, id> & TRChartsObjc::getContinuousDataSource_RangeDatumMarshaller(void)
{
	if(!::cachedContinuousDataSource_RangeDatumMarshaller) {
		::cachedContinuousDataSource_RangeDatumMarshaller.reset(new TRChartsObjc::ContinuousDataSourceInterfaceMarshaller<Charts::RangeDatum>(getRangeDatumMarshaller()));
	}
	return *::cachedContinuousDataSource_RangeDatumMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::RangeDatum, id> & TRChartsObjc::getRangeDatumMarshaller(void)
{
	if(!::cachedRangeDatumMarshaller) {
		::cachedRangeDatumMarshaller.reset(new TRChartsObjc::RangeDatumStructMarshaller());
	}
	return *::cachedRangeDatumMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::OHLCDatum>>, id> & TRChartsObjc::getContinuousDataSource_OHLCDatumMarshaller(void)
{
	if(!::cachedContinuousDataSource_OHLCDatumMarshaller) {
		::cachedContinuousDataSource_OHLCDatumMarshaller.reset(new TRChartsObjc::ContinuousDataSourceInterfaceMarshaller<Charts::OHLCDatum>(getOHLCDatumMarshaller()));
	}
	return *::cachedContinuousDataSource_OHLCDatumMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::OHLCDatum, id> & TRChartsObjc::getOHLCDatumMarshaller(void)
{
	if(!::cachedOHLCDatumMarshaller) {
		::cachedOHLCDatumMarshaller.reset(new TRChartsObjc::OHLCDatumStructMarshaller());
	}
	return *::cachedOHLCDatumMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::Coordinates, id> & TRChartsObjc::getCoordinatesMarshaller(void)
{
	if(!::cachedCoordinatesMarshaller) {
		::cachedCoordinatesMarshaller.reset(new TRChartsObjc::CoordinatesStructMarshaller());
	}
	return *::cachedCoordinatesMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::AnimationEffect>>, NSArray *> & TRChartsObjc::getListAnimationEffectMarshaller(void)
{
	if(!::cachedListAnimationEffectMarshaller) {
		::cachedListAnimationEffectMarshaller.reset(new CodegenSupportObjc::ListMarshaller<std::shared_ptr<Charts::AnimationEffect>, id>(getAnimationEffectMarshaller()));
	}
	return *::cachedListAnimationEffectMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::AnimationEffect>, id> & TRChartsObjc::getAnimationEffectMarshaller(void)
{
	if(!::cachedAnimationEffectMarshaller) {
		::cachedAnimationEffectMarshaller.reset(new TRChartsObjc::AnimationEffectInterfaceMarshaller());
	}
	return *::cachedAnimationEffectMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::AnimationDelegate>, id> & TRChartsObjc::getAnimationDelegateMarshaller(void)
{
	if(!::cachedAnimationDelegateMarshaller) {
		::cachedAnimationDelegateMarshaller.reset(new TRChartsObjc::AnimationDelegateInterfaceMarshaller());
	}
	return *::cachedAnimationDelegateMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Drawable>>, NSArray *> & TRChartsObjc::getListDrawableMarshaller(void)
{
	if(!::cachedListDrawableMarshaller) {
		::cachedListDrawableMarshaller.reset(new CodegenSupportObjc::ListMarshaller<std::shared_ptr<Charts::Drawable>, id>(getDrawableMarshaller()));
	}
	return *::cachedListDrawableMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Drawable>, id> & TRChartsObjc::getDrawableMarshaller(void)
{
	if(!::cachedDrawableMarshaller) {
		::cachedDrawableMarshaller.reset(new CodegenSupportObjc::ObjectMarshaller<Charts::Drawable>());
	}
	return *::cachedDrawableMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ConstraintBehaviour>, id> & TRChartsObjc::getConstraintBehaviourMarshaller(void)
{
	if(!::cachedConstraintBehaviourMarshaller) {
		::cachedConstraintBehaviourMarshaller.reset(new TRChartsObjc::ConstraintBehaviourInterfaceMarshaller());
	}
	return *::cachedConstraintBehaviourMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Axis>>, NSArray *> & TRChartsObjc::getListAxisMarshaller(void)
{
	if(!::cachedListAxisMarshaller) {
		::cachedListAxisMarshaller.reset(new CodegenSupportObjc::ListMarshaller<std::shared_ptr<Charts::Axis>, id>(getAxisMarshaller()));
	}
	return *::cachedListAxisMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Axis>, id> & TRChartsObjc::getAxisMarshaller(void)
{
	if(!::cachedAxisMarshaller) {
		::cachedAxisMarshaller.reset(new CodegenSupportObjc::ObjectMarshaller<Charts::Axis>());
	}
	return *::cachedAxisMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::Transform, id> & TRChartsObjc::getTransformMarshaller(void)
{
	if(!::cachedTransformMarshaller) {
		::cachedTransformMarshaller.reset(new TRChartsObjc::TransformStructMarshaller());
	}
	return *::cachedTransformMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Chart>, id> & TRChartsObjc::getChartMarshaller(void)
{
	if(!::cachedChartMarshaller) {
		::cachedChartMarshaller.reset(new CodegenSupportObjc::ObjectMarshaller<Charts::Chart>());
	}
	return *::cachedChartMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<Charts::Edge>, NSArray *> & TRChartsObjc::getListEdgeMarshaller(void)
{
	if(!::cachedListEdgeMarshaller) {
		::cachedListEdgeMarshaller.reset(new CodegenSupportObjc::ListMarshaller<Charts::Edge, TREdge>(getEdgeMarshaller()));
	}
	return *::cachedListEdgeMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Series>>, NSArray *> & TRChartsObjc::getListSeriesMarshaller(void)
{
	if(!::cachedListSeriesMarshaller) {
		::cachedListSeriesMarshaller.reset(new CodegenSupportObjc::ListMarshaller<std::shared_ptr<Charts::Series>, id>(getSeriesMarshaller()));
	}
	return *::cachedListSeriesMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Series>, id> & TRChartsObjc::getSeriesMarshaller(void)
{
	if(!::cachedSeriesMarshaller) {
		::cachedSeriesMarshaller.reset(new CodegenSupportObjc::ObjectMarshaller<Charts::Series>());
	}
	return *::cachedSeriesMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Decoration>>, NSArray *> & TRChartsObjc::getListDecorationMarshaller(void)
{
	if(!::cachedListDecorationMarshaller) {
		::cachedListDecorationMarshaller.reset(new CodegenSupportObjc::ListMarshaller<std::shared_ptr<Charts::Decoration>, id>(getDecorationMarshaller()));
	}
	return *::cachedListDecorationMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Decoration>, id> & TRChartsObjc::getDecorationMarshaller(void)
{
	if(!::cachedDecorationMarshaller) {
		::cachedDecorationMarshaller.reset(new CodegenSupportObjc::ObjectMarshaller<Charts::Decoration>());
	}
	return *::cachedDecorationMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Constraint>>, NSArray *> & TRChartsObjc::getListConstraintMarshaller(void)
{
	if(!::cachedListConstraintMarshaller) {
		::cachedListConstraintMarshaller.reset(new CodegenSupportObjc::ListMarshaller<std::shared_ptr<Charts::Constraint>, id>(getConstraintMarshaller()));
	}
	return *::cachedListConstraintMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Constraint>, id> & TRChartsObjc::getConstraintMarshaller(void)
{
	if(!::cachedConstraintMarshaller) {
		::cachedConstraintMarshaller.reset(new CodegenSupportObjc::ObjectMarshaller<Charts::Constraint>());
	}
	return *::cachedConstraintMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Animation>>, NSArray *> & TRChartsObjc::getListAnimationMarshaller(void)
{
	if(!::cachedListAnimationMarshaller) {
		::cachedListAnimationMarshaller.reset(new CodegenSupportObjc::ListMarshaller<std::shared_ptr<Charts::Animation>, id>(getAnimationMarshaller()));
	}
	return *::cachedListAnimationMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Animation>, id> & TRChartsObjc::getAnimationMarshaller(void)
{
	if(!::cachedAnimationMarshaller) {
		::cachedAnimationMarshaller.reset(new CodegenSupportObjc::ObjectMarshaller<Charts::Animation>());
	}
	return *::cachedAnimationMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<Charts::Touch>, NSArray *> & TRChartsObjc::getListTouchMarshaller(void)
{
	if(!::cachedListTouchMarshaller) {
		::cachedListTouchMarshaller.reset(new CodegenSupportObjc::ListMarshaller<Charts::Touch, id>(getTouchMarshaller()));
	}
	return *::cachedListTouchMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::Touch, id> & TRChartsObjc::getTouchMarshaller(void)
{
	if(!::cachedTouchMarshaller) {
		::cachedTouchMarshaller.reset(new TRChartsObjc::TouchStructMarshaller());
	}
	return *::cachedTouchMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::ResizeMode, TRResizeMode> & TRChartsObjc::getResizeModeMarshaller(void)
{
	if(!::cachedResizeModeMarshaller) {
		::cachedResizeModeMarshaller.reset(new CodegenSupportObjc::EnumMarshaller<Charts::ResizeMode, TRResizeMode>());
	}
	return *::cachedResizeModeMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::Point, id> & TRChartsObjc::getPointMarshaller(void)
{
	if(!::cachedPointMarshaller) {
		::cachedPointMarshaller.reset(new TRChartsObjc::PointStructMarshaller());
	}
	return *::cachedPointMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::FontHint, TRFontHint> & TRChartsObjc::getFontHintMarshaller(void)
{
	if(!::cachedFontHintMarshaller) {
		::cachedFontHintMarshaller.reset(new CodegenSupportObjc::EnumMarshaller<Charts::FontHint, TRFontHint>());
	}
	return *::cachedFontHintMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::LineMode, TRLineMode> & TRChartsObjc::getLineModeMarshaller(void)
{
	if(!::cachedLineModeMarshaller) {
		::cachedLineModeMarshaller.reset(new CodegenSupportObjc::EnumMarshaller<Charts::LineMode, TRLineMode>());
	}
	return *::cachedLineModeMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::OHLC, id> & TRChartsObjc::getOHLCMarshaller(void)
{
	if(!::cachedOHLCMarshaller) {
		::cachedOHLCMarshaller.reset(new TRChartsObjc::OHLCStructMarshaller());
	}
	return *::cachedOHLCMarshaller;
}

const CodegenSupportObjc::Marshaller<Charts::LogLevel, TRLogLevel> & TRChartsObjc::getLogLevelMarshaller(void)
{
	if(!::cachedLogLevelMarshaller) {
		::cachedLogLevelMarshaller.reset(new CodegenSupportObjc::EnumMarshaller<Charts::LogLevel, TRLogLevel>());
	}
	return *::cachedLogLevelMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<Charts::Color>, NSArray *> & TRChartsObjc::getListColorMarshaller(void)
{
	if(!::cachedListColorMarshaller) {
		::cachedListColorMarshaller.reset(new CodegenSupportObjc::ListMarshaller<Charts::Color, id>(getColorMarshaller()));
	}
	return *::cachedListColorMarshaller;
}

const CodegenSupportObjc::Marshaller<std::vector<Charts::LineStyle>, NSArray *> & TRChartsObjc::getListLineStyleMarshaller(void)
{
	if(!::cachedListLineStyleMarshaller) {
		::cachedListLineStyleMarshaller.reset(new CodegenSupportObjc::ListMarshaller<Charts::LineStyle, id>(getLineStyleMarshaller()));
	}
	return *::cachedListLineStyleMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ColorSource>, id> & TRChartsObjc::getColorSourceMarshaller(void)
{
	if(!::cachedColorSourceMarshaller) {
		::cachedColorSourceMarshaller.reset(new TRChartsObjc::ColorSourceInterfaceMarshaller());
	}
	return *::cachedColorSourceMarshaller;
}

const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::LogHandler>, id> & TRChartsObjc::getLogHandlerMarshaller(void)
{
	if(!::cachedLogHandlerMarshaller) {
		::cachedLogHandlerMarshaller.reset(new TRChartsObjc::LogHandlerInterfaceMarshaller());
	}
	return *::cachedLogHandlerMarshaller;
}

namespace
{
	// Need to force static init of all marshallers, else access to the marshalling layer has race conditions.
	const bool staticInitMarshallers = ([](void) -> bool {
		TRChartsObjc::getBooleanMarshaller().init();
		TRChartsObjc::getNumberMarshaller().init();
		TRChartsObjc::getIntegerMarshaller().init();
		TRChartsObjc::getStringMarshaller().init();
		TRChartsObjc::getColorMarshaller().init();
		TRChartsObjc::getFontMarshaller().init();
		TRChartsObjc::getMarginMarshaller().init();
		TRChartsObjc::getSizeMarshaller().init();
		TRChartsObjc::getListStringMarshaller().init();
		TRChartsObjc::getFormatSyntaxMarshaller().init();
		TRChartsObjc::getDateUnitMarshaller().init();
		TRChartsObjc::getRangeMarshaller().init();
		TRChartsObjc::getListNumberMarshaller().init();
		TRChartsObjc::getDateIntervalMarshaller().init();
		TRChartsObjc::getRangeCalculatorMarshaller().init();
		TRChartsObjc::getDataTransformMarshaller().init();
		TRChartsObjc::getContinuousAxisMarshaller().init();
		TRChartsObjc::getEdgeMarshaller().init();
		TRChartsObjc::getLabelMarshaller().init();
		TRChartsObjc::getLineStyleMarshaller().init();
		TRChartsObjc::getAxisLayoutMarshaller().init();
		TRChartsObjc::getNumberFormatterMarshaller().init();
		TRChartsObjc::getNumberTickCalculatorMarshaller().init();
		TRChartsObjc::getDateFormatterMarshaller().init();
		TRChartsObjc::getDateTickCalculatorMarshaller().init();
		TRChartsObjc::getIndexRangeMarshaller().init();
		TRChartsObjc::getPointStyleMarshaller().init();
		TRChartsObjc::getContinuousDataSource_ScalarDatumMarshaller().init();
		TRChartsObjc::getScalarDatumMarshaller().init();
		TRChartsObjc::getLineStyleSourceMarshaller().init();
		TRChartsObjc::getContinuousDataSource_RangeDatumMarshaller().init();
		TRChartsObjc::getRangeDatumMarshaller().init();
		TRChartsObjc::getContinuousDataSource_OHLCDatumMarshaller().init();
		TRChartsObjc::getOHLCDatumMarshaller().init();
		TRChartsObjc::getCoordinatesMarshaller().init();
		TRChartsObjc::getListAnimationEffectMarshaller().init();
		TRChartsObjc::getAnimationEffectMarshaller().init();
		TRChartsObjc::getAnimationDelegateMarshaller().init();
		TRChartsObjc::getListDrawableMarshaller().init();
		TRChartsObjc::getDrawableMarshaller().init();
		TRChartsObjc::getConstraintBehaviourMarshaller().init();
		TRChartsObjc::getListAxisMarshaller().init();
		TRChartsObjc::getAxisMarshaller().init();
		TRChartsObjc::getTransformMarshaller().init();
		TRChartsObjc::getChartMarshaller().init();
		TRChartsObjc::getListEdgeMarshaller().init();
		TRChartsObjc::getListSeriesMarshaller().init();
		TRChartsObjc::getSeriesMarshaller().init();
		TRChartsObjc::getListDecorationMarshaller().init();
		TRChartsObjc::getDecorationMarshaller().init();
		TRChartsObjc::getListConstraintMarshaller().init();
		TRChartsObjc::getConstraintMarshaller().init();
		TRChartsObjc::getListAnimationMarshaller().init();
		TRChartsObjc::getAnimationMarshaller().init();
		TRChartsObjc::getListTouchMarshaller().init();
		TRChartsObjc::getTouchMarshaller().init();
		TRChartsObjc::getResizeModeMarshaller().init();
		TRChartsObjc::getPointMarshaller().init();
		TRChartsObjc::getFontHintMarshaller().init();
		TRChartsObjc::getLineModeMarshaller().init();
		TRChartsObjc::getOHLCMarshaller().init();
		TRChartsObjc::getLogLevelMarshaller().init();
		TRChartsObjc::getListColorMarshaller().init();
		TRChartsObjc::getListLineStyleMarshaller().init();
		TRChartsObjc::getColorSourceMarshaller().init();
		TRChartsObjc::getLogHandlerMarshaller().init();
		return true;
	})();
}