/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/Color.h>
#import <TRChartsObjc/Font.h>
#import <TRChartsObjc/Margin.h>
#import <TRChartsObjc/Size.h>
#import <TRChartsObjc/FormatSyntax.h>
#import <TRChartsObjc/DateUnit.h>
#import <TRChartsObjc/Range.h>
#import <TRChartsObjc/DateInterval.h>
#import <TRChartsObjc/DataTransform.h>
#import <TRChartsObjc/Edge.h>
#import <TRChartsObjc/LineStyle.h>
#import <TRChartsObjc/IndexRange.h>
#import <TRChartsObjc/PointStyle.h>
#import <TRChartsObjc/ScalarDatum.h>
#import <TRChartsObjc/RangeDatum.h>
#import <TRChartsObjc/OHLCDatum.h>
#import <TRChartsObjc/Coordinates.h>
#import <TRChartsObjc/Transform.h>
#import <TRChartsObjc/Touch.h>
#import <TRChartsObjc/ResizeMode.h>
#import <TRChartsObjc/Point.h>
#import <TRChartsObjc/FontHint.h>
#import <TRChartsObjc/LineMode.h>
#import <TRChartsObjc/OHLC.h>
#import <TRChartsObjc/LogLevel.h>

#import <TRCharts/Common.hpp>
#import <TRCharts/Color.hpp>
#import <TRCharts/Font.hpp>
#import <TRCharts/Margin.hpp>
#import <TRCharts/Size.hpp>
#import <TRCharts/FormatSyntax.hpp>
#import <TRCharts/DateUnit.hpp>
#import <TRCharts/Range.hpp>
#import <TRCharts/DateInterval.hpp>
#import <TRCharts/DataTransform.hpp>
#import <TRCharts/Edge.hpp>
#import <TRCharts/LineStyle.hpp>
#import <TRCharts/IndexRange.hpp>
#import <TRCharts/PointStyle.hpp>
#import <TRCharts/ScalarDatum.hpp>
#import <TRCharts/RangeDatum.hpp>
#import <TRCharts/OHLCDatum.hpp>
#import <TRCharts/Coordinates.hpp>
#import <TRCharts/Transform.hpp>
#import <TRCharts/Touch.hpp>
#import <TRCharts/ResizeMode.hpp>
#import <TRCharts/Point.hpp>
#import <TRCharts/FontHint.hpp>
#import <TRCharts/LineMode.hpp>
#import <TRCharts/OHLC.hpp>
#import <TRCharts/LogLevel.hpp>

@protocol TRRangeCalculator;
@class TRContinuousAxis;
@class TRLabel;
@protocol TRAxisLayout;
@protocol TRNumberFormatter;
@protocol TRNumberTickCalculator;
@protocol TRDateFormatter;
@protocol TRDateTickCalculator;
@protocol TRContinuousDataSource;
@class TRScalarDatum;
@protocol TRLineStyleSource;
@class TRRangeDatum;
@class TROHLCDatum;
@protocol TRAnimationEffect;
@protocol TRAnimationDelegate;
@class TRDrawable;
@protocol TRConstraintBehaviour;
@class TRAxis;
@class TRChart;
@class TRSeries;
@class TRDecoration;
@class TRConstraint;
@class TRAnimation;
@protocol TRColorSource;
@class TRContinuousSeries;
@protocol TRLogHandler;

#import <TRCodegenSupportObjc/Marshaller.hh>
#import <TRChartsObjc/Support/Common.hh>

namespace Charts
{
	class RangeCalculator;
	class ContinuousAxis;
	class Label;
	class AxisLayout;
	class NumberFormatter;
	class NumberTickCalculator;
	class DateFormatter;
	class DateTickCalculator;
	template <typename T> class ContinuousDataSource;
	struct ScalarDatum;
	class LineStyleSource;
	struct RangeDatum;
	struct OHLCDatum;
	class AnimationEffect;
	class AnimationDelegate;
	class Drawable;
	class ConstraintBehaviour;
	class Axis;
	class Chart;
	class Series;
	class Decoration;
	class Constraint;
	class Animation;
	class ColorSource;
	template <typename T> class ContinuousSeries;
	class LogHandler;
}

namespace TRChartsObjc
{
	const CodegenSupportObjc::Marshaller<bool, BOOL> & getBooleanMarshaller(void);

	const CodegenSupportObjc::Marshaller<double, double> & getNumberMarshaller(void);

	const CodegenSupportObjc::Marshaller<long, long> & getIntegerMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::string, NSString *> & getStringMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::Color, id> & getColorMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::Font, id> & getFontMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::Margin, id> & getMarginMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::Size, id> & getSizeMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<std::string>, NSArray *> & getListStringMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::FormatSyntax, TRFormatSyntax> & getFormatSyntaxMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::DateUnit, TRDateUnit> & getDateUnitMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::Range, id> & getRangeMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<double>, NSArray *> & getListNumberMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::DateInterval, id> & getDateIntervalMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::RangeCalculator>, id> & getRangeCalculatorMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::DataTransform, id> & getDataTransformMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ContinuousAxis>, id> & getContinuousAxisMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::Edge, TREdge> & getEdgeMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Label>, id> & getLabelMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::LineStyle, id> & getLineStyleMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::AxisLayout>, id> & getAxisLayoutMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::NumberFormatter>, id> & getNumberFormatterMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::NumberTickCalculator>, id> & getNumberTickCalculatorMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::DateFormatter>, id> & getDateFormatterMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::DateTickCalculator>, id> & getDateTickCalculatorMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::IndexRange, id> & getIndexRangeMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::PointStyle, id> & getPointStyleMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::ScalarDatum>>, id> & getContinuousDataSource_ScalarDatumMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::ScalarDatum, id> & getScalarDatumMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::LineStyleSource>, id> & getLineStyleSourceMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::RangeDatum>>, id> & getContinuousDataSource_RangeDatumMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::RangeDatum, id> & getRangeDatumMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::OHLCDatum>>, id> & getContinuousDataSource_OHLCDatumMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::OHLCDatum, id> & getOHLCDatumMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::Coordinates, id> & getCoordinatesMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::AnimationEffect>>, NSArray *> & getListAnimationEffectMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::AnimationEffect>, id> & getAnimationEffectMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::AnimationDelegate>, id> & getAnimationDelegateMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Drawable>>, NSArray *> & getListDrawableMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Drawable>, id> & getDrawableMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ConstraintBehaviour>, id> & getConstraintBehaviourMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Axis>>, NSArray *> & getListAxisMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Axis>, id> & getAxisMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::Transform, id> & getTransformMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Chart>, id> & getChartMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<Charts::Edge>, NSArray *> & getListEdgeMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Series>>, NSArray *> & getListSeriesMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Series>, id> & getSeriesMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Decoration>>, NSArray *> & getListDecorationMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Decoration>, id> & getDecorationMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Constraint>>, NSArray *> & getListConstraintMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Constraint>, id> & getConstraintMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<std::shared_ptr<Charts::Animation>>, NSArray *> & getListAnimationMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::Animation>, id> & getAnimationMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<Charts::Touch>, NSArray *> & getListTouchMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::Touch, id> & getTouchMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::ResizeMode, TRResizeMode> & getResizeModeMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::Point, id> & getPointMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::FontHint, TRFontHint> & getFontHintMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::LineMode, TRLineMode> & getLineModeMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::OHLC, id> & getOHLCMarshaller(void);

	const CodegenSupportObjc::Marshaller<Charts::LogLevel, TRLogLevel> & getLogLevelMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<Charts::Color>, NSArray *> & getListColorMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::vector<Charts::LineStyle>, NSArray *> & getListLineStyleMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::ColorSource>, id> & getColorSourceMarshaller(void);

	const CodegenSupportObjc::Marshaller<std::shared_ptr<Charts::LogHandler>, id> & getLogHandlerMarshaller(void);

}
