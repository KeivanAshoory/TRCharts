/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import <TRChartsObjc/AutomaticNumberTickCalculator.h>

#import <TRCharts/AutomaticNumberTickCalculator.hpp>

#import <TRChartsObjc/Support/Marshallers.hh>
#import <TRCodegenSupportObjc/Handle.hh>

@implementation TRAutomaticNumberTickCalculator

-(TRAutomaticNumberTickCalculator*)init {
	TRChartsObjc::verifyCurrentQueue();
	self = [super initConcrete];
	Charts::AutomaticNumberTickCalculator * const obj = new Charts::AutomaticNumberTickCalculator();
	CodegenSupportObjc::Handle * const handle = new CodegenSupportObjc::Handle(obj, self);
	obj->setHandle(handle);
	[self setHandle:handle];
	return self;
}

-(double)targetScreenInterval {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::AutomaticNumberTickCalculator> obj = handle->getNativeObject<Charts::AutomaticNumberTickCalculator>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getTargetScreenInterval());
}

-(void)setTargetScreenInterval:(double)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::AutomaticNumberTickCalculator> obj = handle->getNativeObject<Charts::AutomaticNumberTickCalculator>();
	obj->setTargetScreenInterval(TRChartsObjc::getNumberMarshaller().marshall(value));
}

-(double)minInterval {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::AutomaticNumberTickCalculator> obj = handle->getNativeObject<Charts::AutomaticNumberTickCalculator>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getMinInterval());
}

-(void)setMinInterval:(double)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::AutomaticNumberTickCalculator> obj = handle->getNativeObject<Charts::AutomaticNumberTickCalculator>();
	obj->setMinInterval(TRChartsObjc::getNumberMarshaller().marshall(value));
}

-(double)base {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::AutomaticNumberTickCalculator> obj = handle->getNativeObject<Charts::AutomaticNumberTickCalculator>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->getBase());
}

-(void)setBase:(double)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::AutomaticNumberTickCalculator> obj = handle->getNativeObject<Charts::AutomaticNumberTickCalculator>();
	obj->setBase(TRChartsObjc::getNumberMarshaller().marshall(value));
}

-(NSArray *)multipliers {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::AutomaticNumberTickCalculator> obj = handle->getNativeObject<Charts::AutomaticNumberTickCalculator>();
	return TRChartsObjc::getListNumberMarshaller().unmarshall(obj->getMultipliers());
}

-(void)setMultipliers:(NSArray *)value {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::AutomaticNumberTickCalculator> obj = handle->getNativeObject<Charts::AutomaticNumberTickCalculator>();
	obj->setMultipliers(TRChartsObjc::getListNumberMarshaller().marshall(value));
}

-(double)calculateTickInterval:(TRRange *)dataRange visibleDataRange:(TRRange *)visibleDataRange screenLength:(double)screenLength {
	TRChartsObjc::verifyCurrentQueue();
	CodegenSupportObjc::Handle * const handle = static_cast<CodegenSupportObjc::Handle *>([self handle]);
	std::shared_ptr<Charts::AutomaticNumberTickCalculator> obj = handle->getNativeObject<Charts::AutomaticNumberTickCalculator>();
	return TRChartsObjc::getNumberMarshaller().unmarshall(obj->calculateTickInterval(TRChartsObjc::getRangeMarshaller().marshall(dataRange), TRChartsObjc::getRangeMarshaller().marshall(visibleDataRange), TRChartsObjc::getNumberMarshaller().marshall(screenLength)));	
}

@end