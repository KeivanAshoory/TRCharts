/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#include <Foundation/Foundation.h>

#import <TRChartsObjc/DataTransform.h>
#import <TRChartsObjc/Range.h>

/**
 * A data-space transformation; could be visualized as a transform matrix (but
 * without a rotation component)
 *
 * @note This is a value class, when passing it to other library methods it is
 * always effectively copied.
 *
 */
@interface TRDataTransform : NSObject <NSCopying>

/** @name Fields */
/**
 * The offset (data space).
 */
@property double offset;

/**
 * The scale (data space).
 */
@property double scale;

/** @name Methods */
/**
 * Default init.
 *
 * @return Initialized object.
 */
-(TRDataTransform *)init;

/**
 * Create a DataTransform instance with provided values.
 *
 * @param offset The offset (data space).
 * @param scale The scale (data space).
 */
+(TRDataTransform *)offset:(double)offset scale:(double)scale;

/**
 * Return the concatenated (multiplied) space transform
 *
 * @param dataTransform Input transform
 * @param otherDataTransform Input transform
 * @return The result.
 */
+(TRDataTransform *)concatenate:(TRDataTransform *)dataTransform otherDataTransform:(TRDataTransform *)otherDataTransform;

/**
 * Return the transform that yields the identity when concatenated to the
 * parameter transform
 *
 * @param dataTransform Input transform
 * @return The result.
 */
+(TRDataTransform *)invert:(TRDataTransform *)dataTransform;

/**
 * Transform a scalar into the provided space
 *
 * @param dataTransform Input transform
 * @param value Input value
 * @return The result.
 */
+(double)apply:(TRDataTransform *)dataTransform value:(double)value;

/**
 * Transform a range into the provided space
 *
 * @param dataTransform Input transform
 * @param range Input value
 * @return The result.
 */
+(TRRange *)applyRange:(TRDataTransform *)dataTransform range:(TRRange *)range;

/**
 * Transform a scalar out of the provided space (i.e. into the inverse of the
 * space)
 *
 * @param dataTransform Input transform
 * @param value Input value
 * @return The result.
 */
+(double)unapply:(TRDataTransform *)dataTransform value:(double)value;

/**
 * Transform a range out of the provided space (i.e. into the inverse of the
 * space)
 *
 * @param dataTransform Input transform
 * @param range Input range
 * @return The result.
 */
+(TRRange *)unapplyRange:(TRDataTransform *)dataTransform range:(TRRange *)range;

/**
 * Test for equality (uses all struct fields)
 *
 * @param anObject Object to compare to.
 * @return True if the objects are equal.
 */
-(BOOL)isEqual:(id)anObject;

/**
 * Calculate the hash code (uses all struct fields)
 *
 * @return The hash code.
 */
-(NSUInteger)hash;

/**
 * Create a copy (uses all struct fields)
 *
 * @param zone Memory zone.
 * @return A copy.
 */
-(id)copyWithZone:(NSZone *)zone;

/**
 * Create a string description (uses all struct fields)
 *
 * @return The description.
 */
-(NSString*)description;

@end