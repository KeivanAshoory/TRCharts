/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#include <Foundation/Foundation.h>

#import <TRChartsObjc/FontHint.h>

/**
 * Represents a font
 *
 * Resolving the name to a usable font is platform-dependent.
 *
 * The font is looked up using CTFontCreateWithName or equivalent
 *
 * @note This is a value class, when passing it to other library methods it is
 * always effectively copied.
 *
 */
@interface TRFont : NSObject <NSCopying>

/** @name Fields */
/**
 * The font name.
 */
@property NSString * name;

/**
 * The font size.
 *
 * Size of the font, in platform specific units (more detail?)
 */
@property long size;

/**
 * The font rendering hint.
 *
 * This value is currently ignored.
 */
@property TRFontHint hint;

/** @name Methods */
/**
 * Default init.
 *
 * @return Initialized object.
 */
-(TRFont *)init;

/**
 * Create a Font instance with provided values.
 *
 * @param name The font name.
 * @param size The font size.
 * @param hint The font rendering hint.
 */
+(TRFont *)name:(NSString *)name size:(long)size hint:(TRFontHint)hint;

/**
 * Test for equality (uses all struct fields)
 *
 * @param anObject Object to compare to.
 * @return True if the objects are equal.
 */
-(BOOL)isEqual:(id)anObject;

/**
 * Calculate the hash code (uses all struct fields)
 *
 * @return The hash code.
 */
-(NSUInteger)hash;

/**
 * Create a copy (uses all struct fields)
 *
 * @param zone Memory zone.
 * @return A copy.
 */
-(id)copyWithZone:(NSZone *)zone;

/**
 * Create a string description (uses all struct fields)
 *
 * @return The description.
 */
-(NSString*)description;

@end