/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import "DateAxisGeneratedTests.h"
#import <TRChartsObjc/DateAxis.h>
#import "TestUtils.hh"

#import <XCTest/XCTestAssertions.h>

@implementation TRDateAxisGeneratedTests

- (void)setUp
{
    [super setUp];
}

- (void)tearDown
{
    [super tearDown];
}

-(id)createInstance
{
	return [[TRDateAxis alloc] init];
}

- (void) testInitializeFieldOffsetSeconds
{
	TRDateAxis * instance = [self createInstance];
	if(instance) {
		double expected = 0.0;
		double actual = [instance offsetSeconds];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testInitializeFieldTickFormatter
{
	TRDateAxis * instance = [self createInstance];
	if(instance) {
		id<TRDateFormatter> expected = nil;
		id<TRDateFormatter> actual = [instance tickFormatter];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testInitializeFieldTickCalculator
{
	TRDateAxis * instance = [self createInstance];
	if(instance) {
		id<TRDateTickCalculator> expected = nil;
		id<TRDateTickCalculator> actual = [instance tickCalculator];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testInitializeFieldTickInterval
{
	TRDateAxis * instance = [self createInstance];
	if(instance) {
		TRDateInterval * expected = [TRDateInterval unit:TR_DATEUNIT_SECOND magnitude:0.0];
		TRDateInterval * actual = [instance tickInterval];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testSetFieldOffsetSeconds
{
	TRDateAxis * instance = [self createInstance];
	if(instance) {
		double original = [instance offsetSeconds];
		double expected = TRChartsObjc::getNumberTestValue(original);
		[instance setOffsetSeconds:expected];
		double actual = [instance offsetSeconds];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testSetFieldTickFormatter
{
	TRDateAxis * instance = [self createInstance];
	if(instance) {
		id<TRDateFormatter> original = [instance tickFormatter];
		id<TRDateFormatter> expected = TRChartsObjc::getDateFormatterTestValue(original);
		[instance setTickFormatter:expected];
		id<TRDateFormatter> actual = [instance tickFormatter];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testSetFieldTickCalculator
{
	TRDateAxis * instance = [self createInstance];
	if(instance) {
		id<TRDateTickCalculator> original = [instance tickCalculator];
		id<TRDateTickCalculator> expected = TRChartsObjc::getDateTickCalculatorTestValue(original);
		[instance setTickCalculator:expected];
		id<TRDateTickCalculator> actual = [instance tickCalculator];
		XCTAssertEqualObjects(expected, actual);
	}
}


@end
