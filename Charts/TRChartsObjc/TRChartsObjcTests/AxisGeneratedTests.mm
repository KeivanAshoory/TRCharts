/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#import "AxisGeneratedTests.h"
#import <TRChartsObjc/Axis.h>
#import "TestUtils.hh"

#import <XCTest/XCTestAssertions.h>

@implementation TRAxisGeneratedTests

- (void)setUp
{
    [super setUp];
}

- (void)tearDown
{
    [super tearDown];
}

-(id)createInstance
{
	// class is abstract, tests will be run only in subclasses
	return nil;
}

- (void) testInitializeFieldEdge
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TREdge expected = TR_EDGE_LEFT;
		TREdge actual = [instance edge];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testInitializeFieldTitle
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRLabel * expected = nil;
		TRLabel * actual = [instance title];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testInitializeFieldAxisColor
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRColor * expected = [TRColor red:0.0 green:0.0 blue:0.0 alpha:0.0];
		TRColor * actual = [instance axisColor];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testInitializeFieldAxisLineStyle
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRLineStyle * expected = [TRLineStyle thickness:1.0 mode:TR_LINEMODE_SOLID];
		TRLineStyle * actual = [instance axisLineStyle];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testInitializeFieldGridVisible
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		BOOL expected = NO;
		BOOL actual = [instance gridVisible];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testInitializeFieldGridColor
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRColor * expected = [TRColor red:0.0 green:0.0 blue:0.0 alpha:0.0];
		TRColor * actual = [instance gridColor];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testInitializeFieldGridLineStyle
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRLineStyle * expected = [TRLineStyle thickness:1.0 mode:TR_LINEMODE_SOLID];
		TRLineStyle * actual = [instance gridLineStyle];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testInitializeFieldTickColor
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRColor * expected = [TRColor red:0.0 green:0.0 blue:0.0 alpha:0.0];
		TRColor * actual = [instance tickColor];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testInitializeFieldTickLineStyle
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRLineStyle * expected = [TRLineStyle thickness:1.0 mode:TR_LINEMODE_SOLID];
		TRLineStyle * actual = [instance tickLineStyle];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testInitializeFieldTickOffset
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		double expected = 0.0;
		double actual = [instance tickOffset];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testInitializeFieldTickSize
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		double expected = 0.0;
		double actual = [instance tickSize];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testInitializeFieldTickLabelColor
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRColor * expected = [TRColor red:0.0 green:0.0 blue:0.0 alpha:0.0];
		TRColor * actual = [instance tickLabelColor];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testInitializeFieldTickLabelFont
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRFont * expected = [TRFont name:@"" size:0L hint:TR_FONTHINT_ACCURATE];
		TRFont * actual = [instance tickLabelFont];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testInitializeFieldTickLabelMaxSize
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		double expected = 0.0;
		double actual = [instance tickLabelMaxSize];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testInitializeFieldTickLabelOffset
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		double expected = 0.0;
		double actual = [instance tickLabelOffset];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testInitializeFieldScreenLength
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		double expected = 0.0;
		double actual = [instance screenLength];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testSetFieldEdge
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TREdge original = [instance edge];
		TREdge expected = TRChartsObjc::getEdgeTestValue(original);
		[instance setEdge:expected];
		TREdge actual = [instance edge];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testSetFieldTitle
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRLabel * original = [instance title];
		TRLabel * expected = TRChartsObjc::getLabelTestValue(original);
		[instance setTitle:expected];
		TRLabel * actual = [instance title];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testSetFieldAxisColor
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRColor * original = [instance axisColor];
		TRColor * expected = TRChartsObjc::getColorTestValue(original);
		[instance setAxisColor:expected];
		TRColor * actual = [instance axisColor];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testSetFieldAxisLineStyle
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRLineStyle * original = [instance axisLineStyle];
		TRLineStyle * expected = TRChartsObjc::getLineStyleTestValue(original);
		[instance setAxisLineStyle:expected];
		TRLineStyle * actual = [instance axisLineStyle];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testSetFieldGridVisible
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		BOOL original = [instance gridVisible];
		BOOL expected = TRChartsObjc::getBooleanTestValue(original);
		[instance setGridVisible:expected];
		BOOL actual = [instance gridVisible];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testSetFieldGridColor
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRColor * original = [instance gridColor];
		TRColor * expected = TRChartsObjc::getColorTestValue(original);
		[instance setGridColor:expected];
		TRColor * actual = [instance gridColor];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testSetFieldGridLineStyle
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRLineStyle * original = [instance gridLineStyle];
		TRLineStyle * expected = TRChartsObjc::getLineStyleTestValue(original);
		[instance setGridLineStyle:expected];
		TRLineStyle * actual = [instance gridLineStyle];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testSetFieldTickColor
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRColor * original = [instance tickColor];
		TRColor * expected = TRChartsObjc::getColorTestValue(original);
		[instance setTickColor:expected];
		TRColor * actual = [instance tickColor];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testSetFieldTickLineStyle
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRLineStyle * original = [instance tickLineStyle];
		TRLineStyle * expected = TRChartsObjc::getLineStyleTestValue(original);
		[instance setTickLineStyle:expected];
		TRLineStyle * actual = [instance tickLineStyle];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testSetFieldTickOffset
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		double original = [instance tickOffset];
		double expected = TRChartsObjc::getNumberTestValue(original);
		[instance setTickOffset:expected];
		double actual = [instance tickOffset];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testSetFieldTickSize
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		double original = [instance tickSize];
		double expected = TRChartsObjc::getNumberTestValue(original);
		[instance setTickSize:expected];
		double actual = [instance tickSize];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testSetFieldTickLabelColor
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRColor * original = [instance tickLabelColor];
		TRColor * expected = TRChartsObjc::getColorTestValue(original);
		[instance setTickLabelColor:expected];
		TRColor * actual = [instance tickLabelColor];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testSetFieldTickLabelFont
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		TRFont * original = [instance tickLabelFont];
		TRFont * expected = TRChartsObjc::getFontTestValue(original);
		[instance setTickLabelFont:expected];
		TRFont * actual = [instance tickLabelFont];
		XCTAssertEqualObjects(expected, actual);
	}
}

- (void) testSetFieldTickLabelMaxSize
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		double original = [instance tickLabelMaxSize];
		double expected = TRChartsObjc::getNumberTestValue(original);
		[instance setTickLabelMaxSize:expected];
		double actual = [instance tickLabelMaxSize];
		XCTAssertEqual(expected, actual);
	}
}

- (void) testSetFieldTickLabelOffset
{
	TRAxis * instance = [self createInstance];
	if(instance) {
		double original = [instance tickLabelOffset];
		double expected = TRChartsObjc::getNumberTestValue(original);
		[instance setTickLabelOffset:expected];
		double actual = [instance tickLabelOffset];
		XCTAssertEqual(expected, actual);
	}
}


@end
