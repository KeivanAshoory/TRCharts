/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#include <TRChartsJNI/Range.hpp>
#include <TRChartsJNI/Support/Marshallers.hpp>
#include <TRChartsJNI/Support/Handle.hpp>
#include <TRChartsJNI/Support/Utils.hpp>
#include <TRCharts/Range.hpp>

using namespace TRChartsJNI;

JNIEXPORT jdouble JNICALL Java_com_thomsonreuters_corptech_charts_Range_nativeLength(JNIEnv * env, jclass cls, jobject range)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getNumberMarshaller().unmarshall(env, Charts::Range::length(TRChartsJNI::getRangeMarshaller().marshall(env, range)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jboolean JNICALL Java_com_thomsonreuters_corptech_charts_Range_nativeValid(JNIEnv * env, jclass cls, jobject range)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getBooleanMarshaller().unmarshall(env, Charts::Range::valid(TRChartsJNI::getRangeMarshaller().marshall(env, range)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jboolean JNICALL Java_com_thomsonreuters_corptech_charts_Range_nativePositive(JNIEnv * env, jclass cls, jobject range)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getBooleanMarshaller().unmarshall(env, Charts::Range::positive(TRChartsJNI::getRangeMarshaller().marshall(env, range)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_Range_nativeMerge(JNIEnv * env, jclass cls, jobject range, jobject otherRange)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getRangeMarshaller().unmarshall(env, Charts::Range::merge(TRChartsJNI::getRangeMarshaller().marshall(env, range), TRChartsJNI::getRangeMarshaller().marshall(env, otherRange)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_Range_nativeClamp(JNIEnv * env, jclass cls, jobject range, jobject withinRange)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getRangeMarshaller().unmarshall(env, Charts::Range::clamp(TRChartsJNI::getRangeMarshaller().marshall(env, range), TRChartsJNI::getRangeMarshaller().marshall(env, withinRange)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jboolean JNICALL Java_com_thomsonreuters_corptech_charts_Range_nativeOverlap(JNIEnv * env, jclass cls, jobject range, jobject otherRange)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getBooleanMarshaller().unmarshall(env, Charts::Range::overlap(TRChartsJNI::getRangeMarshaller().marshall(env, range), TRChartsJNI::getRangeMarshaller().marshall(env, otherRange)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_Range_nativeIdentity(JNIEnv * env, jclass cls)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getRangeMarshaller().unmarshall(env, Charts::Range::identity());
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

