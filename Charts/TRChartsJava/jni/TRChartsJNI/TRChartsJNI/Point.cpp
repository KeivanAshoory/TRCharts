/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#include <TRChartsJNI/Point.hpp>
#include <TRChartsJNI/Support/Marshallers.hpp>
#include <TRChartsJNI/Support/Handle.hpp>
#include <TRChartsJNI/Support/Utils.hpp>
#include <TRCharts/Point.hpp>

using namespace TRChartsJNI;

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_Point_nativeAdd(JNIEnv * env, jclass cls, jobject point, jobject otherPoint)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getPointMarshaller().unmarshall(env, Charts::Point::add(TRChartsJNI::getPointMarshaller().marshall(env, point), TRChartsJNI::getPointMarshaller().marshall(env, otherPoint)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_Point_nativeSubtract(JNIEnv * env, jclass cls, jobject point, jobject otherPoint)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getPointMarshaller().unmarshall(env, Charts::Point::subtract(TRChartsJNI::getPointMarshaller().marshall(env, point), TRChartsJNI::getPointMarshaller().marshall(env, otherPoint)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_Point_nativeMultiply(JNIEnv * env, jclass cls, jobject point, jobject otherPoint)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getPointMarshaller().unmarshall(env, Charts::Point::multiply(TRChartsJNI::getPointMarshaller().marshall(env, point), TRChartsJNI::getPointMarshaller().marshall(env, otherPoint)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_Point_nativeDivide(JNIEnv * env, jclass cls, jobject point, jobject otherPoint)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getPointMarshaller().unmarshall(env, Charts::Point::divide(TRChartsJNI::getPointMarshaller().marshall(env, point), TRChartsJNI::getPointMarshaller().marshall(env, otherPoint)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

