/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#include <TRChartsJNI/IndexRange.hpp>
#include <TRChartsJNI/Support/Marshallers.hpp>
#include <TRChartsJNI/Support/Handle.hpp>
#include <TRChartsJNI/Support/Utils.hpp>
#include <TRCharts/IndexRange.hpp>

using namespace TRChartsJNI;

JNIEXPORT jlong JNICALL Java_com_thomsonreuters_corptech_charts_IndexRange_nativeLength(JNIEnv * env, jclass cls, jobject indexRange)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getIntegerMarshaller().unmarshall(env, Charts::IndexRange::length(TRChartsJNI::getIndexRangeMarshaller().marshall(env, indexRange)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jboolean JNICALL Java_com_thomsonreuters_corptech_charts_IndexRange_nativeValid(JNIEnv * env, jclass cls, jobject indexRange)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getBooleanMarshaller().unmarshall(env, Charts::IndexRange::valid(TRChartsJNI::getIndexRangeMarshaller().marshall(env, indexRange)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jboolean JNICALL Java_com_thomsonreuters_corptech_charts_IndexRange_nativeValidWithin(JNIEnv * env, jclass cls, jobject indexRange, jobject otherIndexRange)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getBooleanMarshaller().unmarshall(env, Charts::IndexRange::validWithin(TRChartsJNI::getIndexRangeMarshaller().marshall(env, indexRange), TRChartsJNI::getIndexRangeMarshaller().marshall(env, otherIndexRange)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jboolean JNICALL Java_com_thomsonreuters_corptech_charts_IndexRange_nativePositive(JNIEnv * env, jclass cls, jobject indexRange)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getBooleanMarshaller().unmarshall(env, Charts::IndexRange::positive(TRChartsJNI::getIndexRangeMarshaller().marshall(env, indexRange)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_IndexRange_nativeMerge(JNIEnv * env, jclass cls, jobject indexRange, jobject otherIndexRange)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getIndexRangeMarshaller().unmarshall(env, Charts::IndexRange::merge(TRChartsJNI::getIndexRangeMarshaller().marshall(env, indexRange), TRChartsJNI::getIndexRangeMarshaller().marshall(env, otherIndexRange)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_IndexRange_nativeClamp(JNIEnv * env, jclass cls, jobject indexRange, jobject withinIndexRange)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getIndexRangeMarshaller().unmarshall(env, Charts::IndexRange::clamp(TRChartsJNI::getIndexRangeMarshaller().marshall(env, indexRange), TRChartsJNI::getIndexRangeMarshaller().marshall(env, withinIndexRange)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jboolean JNICALL Java_com_thomsonreuters_corptech_charts_IndexRange_nativeOverlap(JNIEnv * env, jclass cls, jobject indexRange, jobject otherIndexRange)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		return TRChartsJNI::getBooleanMarshaller().unmarshall(env, Charts::IndexRange::overlap(TRChartsJNI::getIndexRangeMarshaller().marshall(env, indexRange), TRChartsJNI::getIndexRangeMarshaller().marshall(env, otherIndexRange)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

