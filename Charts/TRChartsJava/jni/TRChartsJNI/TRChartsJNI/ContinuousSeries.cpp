/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#include <TRChartsJNI/ContinuousSeries.hpp>
#include <TRChartsJNI/Support/Marshallers.hpp>
#include <TRChartsJNI/Support/Handle.hpp>
#include <TRChartsJNI/Support/Utils.hpp>
#include <TRCharts/ContinuousSeries.hpp>

using namespace TRChartsJNI;

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_ContinuousSeries_nativeGetAbscissaAxis(JNIEnv * env, jobject obj, jlong ptr)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		TRChartsJNI::Handle * const handle = reinterpret_cast<TRChartsJNI::Handle *>(ptr);
		return TRChartsJNI::getContinuousAxisMarshaller().unmarshall(env, handle->getNativeObject<Charts::IContinuousSeries>(env)->getAbscissaAxis());
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT void JNICALL Java_com_thomsonreuters_corptech_charts_ContinuousSeries_nativeSetAbscissaAxis(JNIEnv * env, jobject obj, jlong ptr, jobject value)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		TRChartsJNI::Handle * const handle = reinterpret_cast<TRChartsJNI::Handle *>(ptr);
		handle->getNativeObject<Charts::IContinuousSeries>(env)->setAbscissaAxis(TRChartsJNI::getContinuousAxisMarshaller().marshall(env, value));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}
JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_ContinuousSeries_nativeGetColorSource(JNIEnv * env, jobject obj, jlong ptr)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		TRChartsJNI::Handle * const handle = reinterpret_cast<TRChartsJNI::Handle *>(ptr);
		return TRChartsJNI::getColorSourceMarshaller().unmarshall(env, handle->getNativeObject<Charts::IContinuousSeries>(env)->getColorSource());
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT void JNICALL Java_com_thomsonreuters_corptech_charts_ContinuousSeries_nativeSetColorSource(JNIEnv * env, jobject obj, jlong ptr, jobject value)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		TRChartsJNI::Handle * const handle = reinterpret_cast<TRChartsJNI::Handle *>(ptr);
		handle->getNativeObject<Charts::IContinuousSeries>(env)->setColorSource(TRChartsJNI::getColorSourceMarshaller().marshall(env, value));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_ContinuousSeries_nativeScreenPositionToValue(JNIEnv * env, jobject obj, jlong ptr, jobject screenPosition)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		TRChartsJNI::Handle * const handle = reinterpret_cast<TRChartsJNI::Handle *>(ptr);
		return TRChartsJNI::getCoordinatesMarshaller().unmarshall(env, handle->getNativeObject<Charts::IContinuousSeries>(env)->screenPositionToValue(TRChartsJNI::getPointMarshaller().marshall(env, screenPosition)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_ContinuousSeries_nativeValueToScreenPosition(JNIEnv * env, jobject obj, jlong ptr, jobject value)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		TRChartsJNI::Handle * const handle = reinterpret_cast<TRChartsJNI::Handle *>(ptr);
		return TRChartsJNI::getPointMarshaller().unmarshall(env, handle->getNativeObject<Charts::IContinuousSeries>(env)->valueToScreenPosition(TRChartsJNI::getCoordinatesMarshaller().marshall(env, value)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}



JNIEXPORT jlong JNICALL Java_com_thomsonreuters_corptech_charts_ContinuousSeries_nativeGetIndexBeforeAbscissaValue(JNIEnv * env, jobject obj, jlong ptr, jdouble abscissa, jboolean includeEqual)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		TRChartsJNI::Handle * const handle = reinterpret_cast<TRChartsJNI::Handle *>(ptr);
		return TRChartsJNI::getIntegerMarshaller().unmarshall(env, handle->getNativeObject<Charts::IContinuousSeries>(env)->getIndexBeforeAbscissaValue(TRChartsJNI::getNumberMarshaller().marshall(env, abscissa), TRChartsJNI::getBooleanMarshaller().marshall(env, includeEqual)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jlong JNICALL Java_com_thomsonreuters_corptech_charts_ContinuousSeries_nativeGetIndexAfterAbscissaValue(JNIEnv * env, jobject obj, jlong ptr, jdouble abscissa, jboolean includeEqual)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		TRChartsJNI::Handle * const handle = reinterpret_cast<TRChartsJNI::Handle *>(ptr);
		return TRChartsJNI::getIntegerMarshaller().unmarshall(env, handle->getNativeObject<Charts::IContinuousSeries>(env)->getIndexAfterAbscissaValue(TRChartsJNI::getNumberMarshaller().marshall(env, abscissa), TRChartsJNI::getBooleanMarshaller().marshall(env, includeEqual)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jlong JNICALL Java_com_thomsonreuters_corptech_charts_ContinuousSeries_nativeGetIndexNearestAbscissaValue(JNIEnv * env, jobject obj, jlong ptr, jdouble abscissa)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		TRChartsJNI::Handle * const handle = reinterpret_cast<TRChartsJNI::Handle *>(ptr);
		return TRChartsJNI::getIntegerMarshaller().unmarshall(env, handle->getNativeObject<Charts::IContinuousSeries>(env)->getIndexNearestAbscissaValue(TRChartsJNI::getNumberMarshaller().marshall(env, abscissa)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jlong JNICALL Java_com_thomsonreuters_corptech_charts_ContinuousSeries_nativeGetIndexNearestScreenPosition(JNIEnv * env, jobject obj, jlong ptr, jobject screenPosition)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		TRChartsJNI::Handle * const handle = reinterpret_cast<TRChartsJNI::Handle *>(ptr);
		return TRChartsJNI::getIntegerMarshaller().unmarshall(env, handle->getNativeObject<Charts::IContinuousSeries>(env)->getIndexNearestScreenPosition(TRChartsJNI::getPointMarshaller().marshall(env, screenPosition)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jdouble JNICALL Java_com_thomsonreuters_corptech_charts_ContinuousSeries_nativeGetDatumSquaredDistanceToScreenPosition(JNIEnv * env, jobject obj, jlong ptr, jlong index, jobject screenPosition)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		TRChartsJNI::Handle * const handle = reinterpret_cast<TRChartsJNI::Handle *>(ptr);
		return TRChartsJNI::getNumberMarshaller().unmarshall(env, handle->getNativeObject<Charts::IContinuousSeries>(env)->getDatumSquaredDistanceToScreenPosition(TRChartsJNI::getIntegerMarshaller().marshall(env, index), TRChartsJNI::getPointMarshaller().marshall(env, screenPosition)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

JNIEXPORT jobject JNICALL Java_com_thomsonreuters_corptech_charts_ContinuousSeries_nativeGetOrdinateRangeWithinAbscissaRange(JNIEnv * env, jobject obj, jlong ptr, jobject abscissaRange)
{
	try {
		Utils::threadEnter(env);
		Utils::EndScopeAction threadExitAction(Utils::threadExit);
		TRChartsJNI::Handle * const handle = reinterpret_cast<TRChartsJNI::Handle *>(ptr);
		return TRChartsJNI::getRangeMarshaller().unmarshall(env, handle->getNativeObject<Charts::IContinuousSeries>(env)->getOrdinateRangeWithinAbscissaRange(TRChartsJNI::getRangeMarshaller().marshall(env, abscissaRange)));
	} catch (const std::exception & e) {
		Utils::throwJavaException(env, e.what());
	} catch (...) {
		Utils::throwJavaException(env, nullptr);
	}
}

