/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#ifndef TRChartsJNI_Support_ListMarshaller_hpp
#define TRChartsJNI_Support_ListMarshaller_hpp

#include <TRChartsJNI/Support/BasicObjectMarshaller.hpp>
#include <TRChartsJNI/Support/Utils.hpp>

namespace TRChartsJNI
{
	template <typename T, typename U>
	class ListMarshaller : public BasicObjectMarshaller<std::vector<T>, jobject>
	{
	public:
		ListMarshaller(const Marshaller<T, U> & valueMarshaller);

		virtual std::vector<T> marshall(JNIEnv * env, const jobject & in) const;

		virtual jobject unmarshall(JNIEnv * env, const std::vector<T> & in) const;

	private:
		const Marshaller<T, U> & valueMarshaller;
	};

	template <typename T, typename U>
	ListMarshaller<T, U>::ListMarshaller(const Marshaller<T, U> & valueMarshaller)
		:valueMarshaller(valueMarshaller)
	{
	}

	template <typename T, typename U>
	std::vector<T> ListMarshaller<T, U>::marshall(JNIEnv * env, const jobject & in) const
	{
		std::vector<T> out;
		if(in) {
			const jint size = Utils::listGetSize(env, in);
			for(jint i = 0; i != size; ++i) {
				jobject tmp = Utils::listGetElement(env, in, i);
				out.push_back(valueMarshaller.marshallBoxed(env, tmp));
				env->DeleteLocalRef(tmp);
			}
		}
		return out;
	}

	template <typename T, typename U>
	jobject ListMarshaller<T, U>::unmarshall(JNIEnv * env, const std::vector<T> & in) const
	{
		const jobject out = Utils::listCreate(env, in.size());
		for(const T & element : in) {
			jobject tmp = valueMarshaller.unmarshallBoxed(env, element);
		 	Utils::listAdd(env, out, tmp);
			env->DeleteLocalRef(tmp);
		}
		return out;
	}
}

#endif