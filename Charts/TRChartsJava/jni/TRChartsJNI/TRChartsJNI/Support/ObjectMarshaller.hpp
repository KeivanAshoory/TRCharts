/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#ifndef TRChartsJNI_Support_ObjectMarshaller_hpp
#define TRChartsJNI_Support_ObjectMarshaller_hpp

#include <TRChartsJNI/Support/Marshaller.hpp>
#include <TRChartsJNI/Support/Handle.hpp>
#include <TRChartsJNI/Support/Utils.hpp>

namespace TRChartsJNI
{
	template <typename T>
	class ObjectMarshaller : public BasicObjectMarshaller<std::shared_ptr<T>, jobject>
	{
	public:
		virtual std::shared_ptr<T> marshall(JNIEnv * env, const jobject & in) const;

		virtual jobject unmarshall(JNIEnv * env, const std::shared_ptr<T> & in) const;
	};

	template <typename T>
	std::shared_ptr<T> ObjectMarshaller<T>::marshall(JNIEnv * const env, const jobject & in) const
	{
		if(in) {
			const Handle * const handle = reinterpret_cast<Handle *>(Utils::getBaseObjectHandle(env, in));
			return handle->getNativeObject<T>(env);
		} else {
			return std::shared_ptr<T>();
		}
	}

	template <typename T>
	jobject ObjectMarshaller<T>::unmarshall(JNIEnv * const env, const std::shared_ptr<T> & in) const
	{
		if(in) {
			const Handle * const handle = static_cast<Handle *>(in->getHandle());
			return handle->getHostObject(env);
		} else {
			return nullptr;
		}
	}
}

#endif