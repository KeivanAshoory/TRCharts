/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#include <TRChartsJNI/Support/Marshallers.hpp>

#include <TRChartsJNI/Support/BooleanMarshaller.hpp>
#include <TRChartsJNI/Support/IntegerMarshaller.hpp>
#include <TRChartsJNI/Support/ListMarshaller.hpp>
#include <TRChartsJNI/Support/NumberMarshaller.hpp>
#include <TRChartsJNI/Support/ObjectMarshaller.hpp>
#include <TRChartsJNI/Support/StringMarshaller.hpp>

#include <TRChartsJNI/Support/LogHandlerInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/NumberFormatterInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/DateFormatterInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/NumberTickCalculatorInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/DateTickCalculatorInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/RangeCalculatorInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/AxisLayoutInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/ColorSourceInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/LineStyleSourceInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/AnimationDelegateInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/AnimationEffectInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/RenderableInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/ConstraintBehaviourInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/ContinuousDataSourceInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/FontStructMarshaller.hpp>
#include <TRChartsJNI/Support/ColorStructMarshaller.hpp>
#include <TRChartsJNI/Support/LineStyleStructMarshaller.hpp>
#include <TRChartsJNI/Support/PointStyleStructMarshaller.hpp>
#include <TRChartsJNI/Support/IndexRangeStructMarshaller.hpp>
#include <TRChartsJNI/Support/MarginStructMarshaller.hpp>
#include <TRChartsJNI/Support/PointStructMarshaller.hpp>
#include <TRChartsJNI/Support/SizeStructMarshaller.hpp>
#include <TRChartsJNI/Support/CoordinatesStructMarshaller.hpp>
#include <TRChartsJNI/Support/ContinuousDatumStructMarshaller.hpp>
#include <TRChartsJNI/Support/ScalarDatumStructMarshaller.hpp>
#include <TRChartsJNI/Support/RangeStructMarshaller.hpp>
#include <TRChartsJNI/Support/RangeDatumStructMarshaller.hpp>
#include <TRChartsJNI/Support/OHLCStructMarshaller.hpp>
#include <TRChartsJNI/Support/OHLCDatumStructMarshaller.hpp>
#include <TRChartsJNI/Support/DateIntervalStructMarshaller.hpp>
#include <TRChartsJNI/Support/DataTransformStructMarshaller.hpp>
#include <TRChartsJNI/Support/TransformStructMarshaller.hpp>
#include <TRChartsJNI/Support/TouchStructMarshaller.hpp>
#include <TRChartsJNI/Support/EdgeEnumMarshaller.hpp>
#include <TRChartsJNI/Support/FontHintEnumMarshaller.hpp>
#include <TRChartsJNI/Support/LogLevelEnumMarshaller.hpp>
#include <TRChartsJNI/Support/LineModeEnumMarshaller.hpp>
#include <TRChartsJNI/Support/DateUnitEnumMarshaller.hpp>
#include <TRChartsJNI/Support/ResizeModeEnumMarshaller.hpp>
#include <TRChartsJNI/Support/FormatSyntaxEnumMarshaller.hpp>

#include <TRCharts/RangeCalculator.hpp>
#include <TRCharts/ContinuousAxis.hpp>
#include <TRCharts/Label.hpp>
#include <TRCharts/AxisLayout.hpp>
#include <TRCharts/NumberFormatter.hpp>
#include <TRCharts/NumberTickCalculator.hpp>
#include <TRCharts/DateFormatter.hpp>
#include <TRCharts/DateTickCalculator.hpp>
#include <TRCharts/ContinuousDataSource.hpp>
#include <TRCharts/ScalarDatum.hpp>
#include <TRCharts/LineStyleSource.hpp>
#include <TRCharts/RangeDatum.hpp>
#include <TRCharts/OHLCDatum.hpp>
#include <TRCharts/AnimationEffect.hpp>
#include <TRCharts/AnimationDelegate.hpp>
#include <TRCharts/Drawable.hpp>
#include <TRCharts/ConstraintBehaviour.hpp>
#include <TRCharts/Axis.hpp>
#include <TRCharts/Chart.hpp>
#include <TRCharts/Series.hpp>
#include <TRCharts/Decoration.hpp>
#include <TRCharts/Constraint.hpp>
#include <TRCharts/Animation.hpp>
#include <TRCharts/ColorSource.hpp>
#include <TRCharts/ContinuousSeries.hpp>
#include <TRCharts/LogHandler.hpp>

using namespace TRChartsJNI;

namespace
{
	std::shared_ptr<Marshaller<bool, jboolean>> cachedBooleanMarshaller;
	std::shared_ptr<Marshaller<double, jdouble>> cachedNumberMarshaller;
	std::shared_ptr<Marshaller<long, jlong>> cachedIntegerMarshaller;
	std::shared_ptr<Marshaller<std::string, jstring>> cachedStringMarshaller;
	std::shared_ptr<Marshaller<Charts::Color, jobject>> cachedColorMarshaller;
	std::shared_ptr<Marshaller<Charts::Font, jobject>> cachedFontMarshaller;
	std::shared_ptr<Marshaller<Charts::Margin, jobject>> cachedMarginMarshaller;
	std::shared_ptr<Marshaller<Charts::Size, jobject>> cachedSizeMarshaller;
	std::shared_ptr<Marshaller<std::vector<std::string>, jobject>> cachedListStringMarshaller;
	std::shared_ptr<Marshaller<Charts::FormatSyntax, jobject>> cachedFormatSyntaxMarshaller;
	std::shared_ptr<Marshaller<Charts::DateUnit, jobject>> cachedDateUnitMarshaller;
	std::shared_ptr<Marshaller<Charts::Range, jobject>> cachedRangeMarshaller;
	std::shared_ptr<Marshaller<std::vector<double>, jobject>> cachedListNumberMarshaller;
	std::shared_ptr<Marshaller<Charts::DateInterval, jobject>> cachedDateIntervalMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::RangeCalculator>, jobject>> cachedRangeCalculatorMarshaller;
	std::shared_ptr<Marshaller<Charts::DataTransform, jobject>> cachedDataTransformMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::ContinuousAxis>, jobject>> cachedContinuousAxisMarshaller;
	std::shared_ptr<Marshaller<Charts::Edge, jobject>> cachedEdgeMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::Label>, jobject>> cachedLabelMarshaller;
	std::shared_ptr<Marshaller<Charts::LineStyle, jobject>> cachedLineStyleMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::AxisLayout>, jobject>> cachedAxisLayoutMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::NumberFormatter>, jobject>> cachedNumberFormatterMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::NumberTickCalculator>, jobject>> cachedNumberTickCalculatorMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::DateFormatter>, jobject>> cachedDateFormatterMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::DateTickCalculator>, jobject>> cachedDateTickCalculatorMarshaller;
	std::shared_ptr<Marshaller<Charts::IndexRange, jobject>> cachedIndexRangeMarshaller;
	std::shared_ptr<Marshaller<Charts::PointStyle, jobject>> cachedPointStyleMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::ScalarDatum>>, jobject>> cachedContinuousDataSource_ScalarDatumMarshaller;
	std::shared_ptr<Marshaller<Charts::ScalarDatum, jobject>> cachedScalarDatumMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::LineStyleSource>, jobject>> cachedLineStyleSourceMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::RangeDatum>>, jobject>> cachedContinuousDataSource_RangeDatumMarshaller;
	std::shared_ptr<Marshaller<Charts::RangeDatum, jobject>> cachedRangeDatumMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::OHLCDatum>>, jobject>> cachedContinuousDataSource_OHLCDatumMarshaller;
	std::shared_ptr<Marshaller<Charts::OHLCDatum, jobject>> cachedOHLCDatumMarshaller;
	std::shared_ptr<Marshaller<Charts::Coordinates, jobject>> cachedCoordinatesMarshaller;
	std::shared_ptr<Marshaller<std::vector<std::shared_ptr<Charts::AnimationEffect>>, jobject>> cachedListAnimationEffectMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::AnimationEffect>, jobject>> cachedAnimationEffectMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::AnimationDelegate>, jobject>> cachedAnimationDelegateMarshaller;
	std::shared_ptr<Marshaller<std::vector<std::shared_ptr<Charts::Drawable>>, jobject>> cachedListDrawableMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::Drawable>, jobject>> cachedDrawableMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::ConstraintBehaviour>, jobject>> cachedConstraintBehaviourMarshaller;
	std::shared_ptr<Marshaller<std::vector<std::shared_ptr<Charts::Axis>>, jobject>> cachedListAxisMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::Axis>, jobject>> cachedAxisMarshaller;
	std::shared_ptr<Marshaller<Charts::Transform, jobject>> cachedTransformMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::Chart>, jobject>> cachedChartMarshaller;
	std::shared_ptr<Marshaller<std::vector<Charts::Edge>, jobject>> cachedListEdgeMarshaller;
	std::shared_ptr<Marshaller<std::vector<std::shared_ptr<Charts::Series>>, jobject>> cachedListSeriesMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::Series>, jobject>> cachedSeriesMarshaller;
	std::shared_ptr<Marshaller<std::vector<std::shared_ptr<Charts::Decoration>>, jobject>> cachedListDecorationMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::Decoration>, jobject>> cachedDecorationMarshaller;
	std::shared_ptr<Marshaller<std::vector<std::shared_ptr<Charts::Constraint>>, jobject>> cachedListConstraintMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::Constraint>, jobject>> cachedConstraintMarshaller;
	std::shared_ptr<Marshaller<std::vector<std::shared_ptr<Charts::Animation>>, jobject>> cachedListAnimationMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::Animation>, jobject>> cachedAnimationMarshaller;
	std::shared_ptr<Marshaller<std::vector<Charts::Touch>, jobject>> cachedListTouchMarshaller;
	std::shared_ptr<Marshaller<Charts::Touch, jobject>> cachedTouchMarshaller;
	std::shared_ptr<Marshaller<Charts::ResizeMode, jobject>> cachedResizeModeMarshaller;
	std::shared_ptr<Marshaller<Charts::Point, jobject>> cachedPointMarshaller;
	std::shared_ptr<Marshaller<Charts::FontHint, jobject>> cachedFontHintMarshaller;
	std::shared_ptr<Marshaller<Charts::LineMode, jobject>> cachedLineModeMarshaller;
	std::shared_ptr<Marshaller<Charts::OHLC, jobject>> cachedOHLCMarshaller;
	std::shared_ptr<Marshaller<Charts::LogLevel, jobject>> cachedLogLevelMarshaller;
	std::shared_ptr<Marshaller<std::vector<Charts::Color>, jobject>> cachedListColorMarshaller;
	std::shared_ptr<Marshaller<std::vector<Charts::LineStyle>, jobject>> cachedListLineStyleMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::ColorSource>, jobject>> cachedColorSourceMarshaller;
	std::shared_ptr<Marshaller<std::shared_ptr<Charts::LogHandler>, jobject>> cachedLogHandlerMarshaller;
}

const Marshaller<bool, jboolean> & TRChartsJNI::getBooleanMarshaller(void)
{
	if(!::cachedBooleanMarshaller) {
		::cachedBooleanMarshaller.reset(new BooleanMarshaller());
	}
	return *::cachedBooleanMarshaller;
}

const Marshaller<double, jdouble> & TRChartsJNI::getNumberMarshaller(void)
{
	if(!::cachedNumberMarshaller) {
		::cachedNumberMarshaller.reset(new NumberMarshaller());
	}
	return *::cachedNumberMarshaller;
}

const Marshaller<long, jlong> & TRChartsJNI::getIntegerMarshaller(void)
{
	if(!::cachedIntegerMarshaller) {
		::cachedIntegerMarshaller.reset(new IntegerMarshaller());
	}
	return *::cachedIntegerMarshaller;
}

const Marshaller<std::string, jstring> & TRChartsJNI::getStringMarshaller(void)
{
	if(!::cachedStringMarshaller) {
		::cachedStringMarshaller.reset(new StringMarshaller());
	}
	return *::cachedStringMarshaller;
}

const Marshaller<Charts::Color, jobject> & TRChartsJNI::getColorMarshaller(void)
{
	if(!::cachedColorMarshaller) {
		::cachedColorMarshaller.reset(new ColorStructMarshaller());
	}
	return *::cachedColorMarshaller;
}

const Marshaller<Charts::Font, jobject> & TRChartsJNI::getFontMarshaller(void)
{
	if(!::cachedFontMarshaller) {
		::cachedFontMarshaller.reset(new FontStructMarshaller());
	}
	return *::cachedFontMarshaller;
}

const Marshaller<Charts::Margin, jobject> & TRChartsJNI::getMarginMarshaller(void)
{
	if(!::cachedMarginMarshaller) {
		::cachedMarginMarshaller.reset(new MarginStructMarshaller());
	}
	return *::cachedMarginMarshaller;
}

const Marshaller<Charts::Size, jobject> & TRChartsJNI::getSizeMarshaller(void)
{
	if(!::cachedSizeMarshaller) {
		::cachedSizeMarshaller.reset(new SizeStructMarshaller());
	}
	return *::cachedSizeMarshaller;
}

const Marshaller<std::vector<std::string>, jobject> & TRChartsJNI::getListStringMarshaller(void)
{
	if(!::cachedListStringMarshaller) {
		::cachedListStringMarshaller.reset(new ListMarshaller<std::string, jstring>(getStringMarshaller()));
	}
	return *::cachedListStringMarshaller;
}

const Marshaller<Charts::FormatSyntax, jobject> & TRChartsJNI::getFormatSyntaxMarshaller(void)
{
	if(!::cachedFormatSyntaxMarshaller) {
		::cachedFormatSyntaxMarshaller.reset(new FormatSyntaxEnumMarshaller());
	}
	return *::cachedFormatSyntaxMarshaller;
}

const Marshaller<Charts::DateUnit, jobject> & TRChartsJNI::getDateUnitMarshaller(void)
{
	if(!::cachedDateUnitMarshaller) {
		::cachedDateUnitMarshaller.reset(new DateUnitEnumMarshaller());
	}
	return *::cachedDateUnitMarshaller;
}

const Marshaller<Charts::Range, jobject> & TRChartsJNI::getRangeMarshaller(void)
{
	if(!::cachedRangeMarshaller) {
		::cachedRangeMarshaller.reset(new RangeStructMarshaller());
	}
	return *::cachedRangeMarshaller;
}

const Marshaller<std::vector<double>, jobject> & TRChartsJNI::getListNumberMarshaller(void)
{
	if(!::cachedListNumberMarshaller) {
		::cachedListNumberMarshaller.reset(new ListMarshaller<double, jdouble>(getNumberMarshaller()));
	}
	return *::cachedListNumberMarshaller;
}

const Marshaller<Charts::DateInterval, jobject> & TRChartsJNI::getDateIntervalMarshaller(void)
{
	if(!::cachedDateIntervalMarshaller) {
		::cachedDateIntervalMarshaller.reset(new DateIntervalStructMarshaller());
	}
	return *::cachedDateIntervalMarshaller;
}

const Marshaller<std::shared_ptr<Charts::RangeCalculator>, jobject> & TRChartsJNI::getRangeCalculatorMarshaller(void)
{
	if(!::cachedRangeCalculatorMarshaller) {
		::cachedRangeCalculatorMarshaller.reset(new RangeCalculatorInterfaceMarshaller());
	}
	return *::cachedRangeCalculatorMarshaller;
}

const Marshaller<Charts::DataTransform, jobject> & TRChartsJNI::getDataTransformMarshaller(void)
{
	if(!::cachedDataTransformMarshaller) {
		::cachedDataTransformMarshaller.reset(new DataTransformStructMarshaller());
	}
	return *::cachedDataTransformMarshaller;
}

const Marshaller<std::shared_ptr<Charts::ContinuousAxis>, jobject> & TRChartsJNI::getContinuousAxisMarshaller(void)
{
	if(!::cachedContinuousAxisMarshaller) {
		::cachedContinuousAxisMarshaller.reset(new ObjectMarshaller<Charts::ContinuousAxis>());
	}
	return *::cachedContinuousAxisMarshaller;
}

const Marshaller<Charts::Edge, jobject> & TRChartsJNI::getEdgeMarshaller(void)
{
	if(!::cachedEdgeMarshaller) {
		::cachedEdgeMarshaller.reset(new EdgeEnumMarshaller());
	}
	return *::cachedEdgeMarshaller;
}

const Marshaller<std::shared_ptr<Charts::Label>, jobject> & TRChartsJNI::getLabelMarshaller(void)
{
	if(!::cachedLabelMarshaller) {
		::cachedLabelMarshaller.reset(new ObjectMarshaller<Charts::Label>());
	}
	return *::cachedLabelMarshaller;
}

const Marshaller<Charts::LineStyle, jobject> & TRChartsJNI::getLineStyleMarshaller(void)
{
	if(!::cachedLineStyleMarshaller) {
		::cachedLineStyleMarshaller.reset(new LineStyleStructMarshaller());
	}
	return *::cachedLineStyleMarshaller;
}

const Marshaller<std::shared_ptr<Charts::AxisLayout>, jobject> & TRChartsJNI::getAxisLayoutMarshaller(void)
{
	if(!::cachedAxisLayoutMarshaller) {
		::cachedAxisLayoutMarshaller.reset(new AxisLayoutInterfaceMarshaller());
	}
	return *::cachedAxisLayoutMarshaller;
}

const Marshaller<std::shared_ptr<Charts::NumberFormatter>, jobject> & TRChartsJNI::getNumberFormatterMarshaller(void)
{
	if(!::cachedNumberFormatterMarshaller) {
		::cachedNumberFormatterMarshaller.reset(new NumberFormatterInterfaceMarshaller());
	}
	return *::cachedNumberFormatterMarshaller;
}

const Marshaller<std::shared_ptr<Charts::NumberTickCalculator>, jobject> & TRChartsJNI::getNumberTickCalculatorMarshaller(void)
{
	if(!::cachedNumberTickCalculatorMarshaller) {
		::cachedNumberTickCalculatorMarshaller.reset(new NumberTickCalculatorInterfaceMarshaller());
	}
	return *::cachedNumberTickCalculatorMarshaller;
}

const Marshaller<std::shared_ptr<Charts::DateFormatter>, jobject> & TRChartsJNI::getDateFormatterMarshaller(void)
{
	if(!::cachedDateFormatterMarshaller) {
		::cachedDateFormatterMarshaller.reset(new DateFormatterInterfaceMarshaller());
	}
	return *::cachedDateFormatterMarshaller;
}

const Marshaller<std::shared_ptr<Charts::DateTickCalculator>, jobject> & TRChartsJNI::getDateTickCalculatorMarshaller(void)
{
	if(!::cachedDateTickCalculatorMarshaller) {
		::cachedDateTickCalculatorMarshaller.reset(new DateTickCalculatorInterfaceMarshaller());
	}
	return *::cachedDateTickCalculatorMarshaller;
}

const Marshaller<Charts::IndexRange, jobject> & TRChartsJNI::getIndexRangeMarshaller(void)
{
	if(!::cachedIndexRangeMarshaller) {
		::cachedIndexRangeMarshaller.reset(new IndexRangeStructMarshaller());
	}
	return *::cachedIndexRangeMarshaller;
}

const Marshaller<Charts::PointStyle, jobject> & TRChartsJNI::getPointStyleMarshaller(void)
{
	if(!::cachedPointStyleMarshaller) {
		::cachedPointStyleMarshaller.reset(new PointStyleStructMarshaller());
	}
	return *::cachedPointStyleMarshaller;
}

const Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::ScalarDatum>>, jobject> & TRChartsJNI::getContinuousDataSource_ScalarDatumMarshaller(void)
{
	if(!::cachedContinuousDataSource_ScalarDatumMarshaller) {
		::cachedContinuousDataSource_ScalarDatumMarshaller.reset(new ContinuousDataSourceInterfaceMarshaller<Charts::ScalarDatum>(getScalarDatumMarshaller()));
	}
	return *::cachedContinuousDataSource_ScalarDatumMarshaller;
}

const Marshaller<Charts::ScalarDatum, jobject> & TRChartsJNI::getScalarDatumMarshaller(void)
{
	if(!::cachedScalarDatumMarshaller) {
		::cachedScalarDatumMarshaller.reset(new ScalarDatumStructMarshaller());
	}
	return *::cachedScalarDatumMarshaller;
}

const Marshaller<std::shared_ptr<Charts::LineStyleSource>, jobject> & TRChartsJNI::getLineStyleSourceMarshaller(void)
{
	if(!::cachedLineStyleSourceMarshaller) {
		::cachedLineStyleSourceMarshaller.reset(new LineStyleSourceInterfaceMarshaller());
	}
	return *::cachedLineStyleSourceMarshaller;
}

const Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::RangeDatum>>, jobject> & TRChartsJNI::getContinuousDataSource_RangeDatumMarshaller(void)
{
	if(!::cachedContinuousDataSource_RangeDatumMarshaller) {
		::cachedContinuousDataSource_RangeDatumMarshaller.reset(new ContinuousDataSourceInterfaceMarshaller<Charts::RangeDatum>(getRangeDatumMarshaller()));
	}
	return *::cachedContinuousDataSource_RangeDatumMarshaller;
}

const Marshaller<Charts::RangeDatum, jobject> & TRChartsJNI::getRangeDatumMarshaller(void)
{
	if(!::cachedRangeDatumMarshaller) {
		::cachedRangeDatumMarshaller.reset(new RangeDatumStructMarshaller());
	}
	return *::cachedRangeDatumMarshaller;
}

const Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::OHLCDatum>>, jobject> & TRChartsJNI::getContinuousDataSource_OHLCDatumMarshaller(void)
{
	if(!::cachedContinuousDataSource_OHLCDatumMarshaller) {
		::cachedContinuousDataSource_OHLCDatumMarshaller.reset(new ContinuousDataSourceInterfaceMarshaller<Charts::OHLCDatum>(getOHLCDatumMarshaller()));
	}
	return *::cachedContinuousDataSource_OHLCDatumMarshaller;
}

const Marshaller<Charts::OHLCDatum, jobject> & TRChartsJNI::getOHLCDatumMarshaller(void)
{
	if(!::cachedOHLCDatumMarshaller) {
		::cachedOHLCDatumMarshaller.reset(new OHLCDatumStructMarshaller());
	}
	return *::cachedOHLCDatumMarshaller;
}

const Marshaller<Charts::Coordinates, jobject> & TRChartsJNI::getCoordinatesMarshaller(void)
{
	if(!::cachedCoordinatesMarshaller) {
		::cachedCoordinatesMarshaller.reset(new CoordinatesStructMarshaller());
	}
	return *::cachedCoordinatesMarshaller;
}

const Marshaller<std::vector<std::shared_ptr<Charts::AnimationEffect>>, jobject> & TRChartsJNI::getListAnimationEffectMarshaller(void)
{
	if(!::cachedListAnimationEffectMarshaller) {
		::cachedListAnimationEffectMarshaller.reset(new ListMarshaller<std::shared_ptr<Charts::AnimationEffect>, jobject>(getAnimationEffectMarshaller()));
	}
	return *::cachedListAnimationEffectMarshaller;
}

const Marshaller<std::shared_ptr<Charts::AnimationEffect>, jobject> & TRChartsJNI::getAnimationEffectMarshaller(void)
{
	if(!::cachedAnimationEffectMarshaller) {
		::cachedAnimationEffectMarshaller.reset(new AnimationEffectInterfaceMarshaller());
	}
	return *::cachedAnimationEffectMarshaller;
}

const Marshaller<std::shared_ptr<Charts::AnimationDelegate>, jobject> & TRChartsJNI::getAnimationDelegateMarshaller(void)
{
	if(!::cachedAnimationDelegateMarshaller) {
		::cachedAnimationDelegateMarshaller.reset(new AnimationDelegateInterfaceMarshaller());
	}
	return *::cachedAnimationDelegateMarshaller;
}

const Marshaller<std::vector<std::shared_ptr<Charts::Drawable>>, jobject> & TRChartsJNI::getListDrawableMarshaller(void)
{
	if(!::cachedListDrawableMarshaller) {
		::cachedListDrawableMarshaller.reset(new ListMarshaller<std::shared_ptr<Charts::Drawable>, jobject>(getDrawableMarshaller()));
	}
	return *::cachedListDrawableMarshaller;
}

const Marshaller<std::shared_ptr<Charts::Drawable>, jobject> & TRChartsJNI::getDrawableMarshaller(void)
{
	if(!::cachedDrawableMarshaller) {
		::cachedDrawableMarshaller.reset(new ObjectMarshaller<Charts::Drawable>());
	}
	return *::cachedDrawableMarshaller;
}

const Marshaller<std::shared_ptr<Charts::ConstraintBehaviour>, jobject> & TRChartsJNI::getConstraintBehaviourMarshaller(void)
{
	if(!::cachedConstraintBehaviourMarshaller) {
		::cachedConstraintBehaviourMarshaller.reset(new ConstraintBehaviourInterfaceMarshaller());
	}
	return *::cachedConstraintBehaviourMarshaller;
}

const Marshaller<std::vector<std::shared_ptr<Charts::Axis>>, jobject> & TRChartsJNI::getListAxisMarshaller(void)
{
	if(!::cachedListAxisMarshaller) {
		::cachedListAxisMarshaller.reset(new ListMarshaller<std::shared_ptr<Charts::Axis>, jobject>(getAxisMarshaller()));
	}
	return *::cachedListAxisMarshaller;
}

const Marshaller<std::shared_ptr<Charts::Axis>, jobject> & TRChartsJNI::getAxisMarshaller(void)
{
	if(!::cachedAxisMarshaller) {
		::cachedAxisMarshaller.reset(new ObjectMarshaller<Charts::Axis>());
	}
	return *::cachedAxisMarshaller;
}

const Marshaller<Charts::Transform, jobject> & TRChartsJNI::getTransformMarshaller(void)
{
	if(!::cachedTransformMarshaller) {
		::cachedTransformMarshaller.reset(new TransformStructMarshaller());
	}
	return *::cachedTransformMarshaller;
}

const Marshaller<std::shared_ptr<Charts::Chart>, jobject> & TRChartsJNI::getChartMarshaller(void)
{
	if(!::cachedChartMarshaller) {
		::cachedChartMarshaller.reset(new ObjectMarshaller<Charts::Chart>());
	}
	return *::cachedChartMarshaller;
}

const Marshaller<std::vector<Charts::Edge>, jobject> & TRChartsJNI::getListEdgeMarshaller(void)
{
	if(!::cachedListEdgeMarshaller) {
		::cachedListEdgeMarshaller.reset(new ListMarshaller<Charts::Edge, jobject>(getEdgeMarshaller()));
	}
	return *::cachedListEdgeMarshaller;
}

const Marshaller<std::vector<std::shared_ptr<Charts::Series>>, jobject> & TRChartsJNI::getListSeriesMarshaller(void)
{
	if(!::cachedListSeriesMarshaller) {
		::cachedListSeriesMarshaller.reset(new ListMarshaller<std::shared_ptr<Charts::Series>, jobject>(getSeriesMarshaller()));
	}
	return *::cachedListSeriesMarshaller;
}

const Marshaller<std::shared_ptr<Charts::Series>, jobject> & TRChartsJNI::getSeriesMarshaller(void)
{
	if(!::cachedSeriesMarshaller) {
		::cachedSeriesMarshaller.reset(new ObjectMarshaller<Charts::Series>());
	}
	return *::cachedSeriesMarshaller;
}

const Marshaller<std::vector<std::shared_ptr<Charts::Decoration>>, jobject> & TRChartsJNI::getListDecorationMarshaller(void)
{
	if(!::cachedListDecorationMarshaller) {
		::cachedListDecorationMarshaller.reset(new ListMarshaller<std::shared_ptr<Charts::Decoration>, jobject>(getDecorationMarshaller()));
	}
	return *::cachedListDecorationMarshaller;
}

const Marshaller<std::shared_ptr<Charts::Decoration>, jobject> & TRChartsJNI::getDecorationMarshaller(void)
{
	if(!::cachedDecorationMarshaller) {
		::cachedDecorationMarshaller.reset(new ObjectMarshaller<Charts::Decoration>());
	}
	return *::cachedDecorationMarshaller;
}

const Marshaller<std::vector<std::shared_ptr<Charts::Constraint>>, jobject> & TRChartsJNI::getListConstraintMarshaller(void)
{
	if(!::cachedListConstraintMarshaller) {
		::cachedListConstraintMarshaller.reset(new ListMarshaller<std::shared_ptr<Charts::Constraint>, jobject>(getConstraintMarshaller()));
	}
	return *::cachedListConstraintMarshaller;
}

const Marshaller<std::shared_ptr<Charts::Constraint>, jobject> & TRChartsJNI::getConstraintMarshaller(void)
{
	if(!::cachedConstraintMarshaller) {
		::cachedConstraintMarshaller.reset(new ObjectMarshaller<Charts::Constraint>());
	}
	return *::cachedConstraintMarshaller;
}

const Marshaller<std::vector<std::shared_ptr<Charts::Animation>>, jobject> & TRChartsJNI::getListAnimationMarshaller(void)
{
	if(!::cachedListAnimationMarshaller) {
		::cachedListAnimationMarshaller.reset(new ListMarshaller<std::shared_ptr<Charts::Animation>, jobject>(getAnimationMarshaller()));
	}
	return *::cachedListAnimationMarshaller;
}

const Marshaller<std::shared_ptr<Charts::Animation>, jobject> & TRChartsJNI::getAnimationMarshaller(void)
{
	if(!::cachedAnimationMarshaller) {
		::cachedAnimationMarshaller.reset(new ObjectMarshaller<Charts::Animation>());
	}
	return *::cachedAnimationMarshaller;
}

const Marshaller<std::vector<Charts::Touch>, jobject> & TRChartsJNI::getListTouchMarshaller(void)
{
	if(!::cachedListTouchMarshaller) {
		::cachedListTouchMarshaller.reset(new ListMarshaller<Charts::Touch, jobject>(getTouchMarshaller()));
	}
	return *::cachedListTouchMarshaller;
}

const Marshaller<Charts::Touch, jobject> & TRChartsJNI::getTouchMarshaller(void)
{
	if(!::cachedTouchMarshaller) {
		::cachedTouchMarshaller.reset(new TouchStructMarshaller());
	}
	return *::cachedTouchMarshaller;
}

const Marshaller<Charts::ResizeMode, jobject> & TRChartsJNI::getResizeModeMarshaller(void)
{
	if(!::cachedResizeModeMarshaller) {
		::cachedResizeModeMarshaller.reset(new ResizeModeEnumMarshaller());
	}
	return *::cachedResizeModeMarshaller;
}

const Marshaller<Charts::Point, jobject> & TRChartsJNI::getPointMarshaller(void)
{
	if(!::cachedPointMarshaller) {
		::cachedPointMarshaller.reset(new PointStructMarshaller());
	}
	return *::cachedPointMarshaller;
}

const Marshaller<Charts::FontHint, jobject> & TRChartsJNI::getFontHintMarshaller(void)
{
	if(!::cachedFontHintMarshaller) {
		::cachedFontHintMarshaller.reset(new FontHintEnumMarshaller());
	}
	return *::cachedFontHintMarshaller;
}

const Marshaller<Charts::LineMode, jobject> & TRChartsJNI::getLineModeMarshaller(void)
{
	if(!::cachedLineModeMarshaller) {
		::cachedLineModeMarshaller.reset(new LineModeEnumMarshaller());
	}
	return *::cachedLineModeMarshaller;
}

const Marshaller<Charts::OHLC, jobject> & TRChartsJNI::getOHLCMarshaller(void)
{
	if(!::cachedOHLCMarshaller) {
		::cachedOHLCMarshaller.reset(new OHLCStructMarshaller());
	}
	return *::cachedOHLCMarshaller;
}

const Marshaller<Charts::LogLevel, jobject> & TRChartsJNI::getLogLevelMarshaller(void)
{
	if(!::cachedLogLevelMarshaller) {
		::cachedLogLevelMarshaller.reset(new LogLevelEnumMarshaller());
	}
	return *::cachedLogLevelMarshaller;
}

const Marshaller<std::vector<Charts::Color>, jobject> & TRChartsJNI::getListColorMarshaller(void)
{
	if(!::cachedListColorMarshaller) {
		::cachedListColorMarshaller.reset(new ListMarshaller<Charts::Color, jobject>(getColorMarshaller()));
	}
	return *::cachedListColorMarshaller;
}

const Marshaller<std::vector<Charts::LineStyle>, jobject> & TRChartsJNI::getListLineStyleMarshaller(void)
{
	if(!::cachedListLineStyleMarshaller) {
		::cachedListLineStyleMarshaller.reset(new ListMarshaller<Charts::LineStyle, jobject>(getLineStyleMarshaller()));
	}
	return *::cachedListLineStyleMarshaller;
}

const Marshaller<std::shared_ptr<Charts::ColorSource>, jobject> & TRChartsJNI::getColorSourceMarshaller(void)
{
	if(!::cachedColorSourceMarshaller) {
		::cachedColorSourceMarshaller.reset(new ColorSourceInterfaceMarshaller());
	}
	return *::cachedColorSourceMarshaller;
}

const Marshaller<std::shared_ptr<Charts::LogHandler>, jobject> & TRChartsJNI::getLogHandlerMarshaller(void)
{
	if(!::cachedLogHandlerMarshaller) {
		::cachedLogHandlerMarshaller.reset(new LogHandlerInterfaceMarshaller());
	}
	return *::cachedLogHandlerMarshaller;
}

