/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#ifndef TRChartsJNI_Support_Utils_hpp
#define TRChartsJNI_Support_Utils_hpp

#include <TRChartsJNI/Support/Common.hpp>
#include <functional>

namespace TRChartsJNI
{
	namespace Utils
	{
		class EndScopeAction
		{
		public:
			EndScopeAction(const std::function<void(void)> & f)
				:f(f)
			{
			}

			~EndScopeAction(void)
			{
				f();
			}

		private:
			const std::function<void(void)> f;
		};

		JNIEnv * getThreadEnv(void);

		void threadEnter(JNIEnv * env);

		void threadExit(void);

		long getBaseObjectHandle(JNIEnv * env, jobject hostObject);

		bool isBaseObjectInstance(JNIEnv * env, jobject hostObject);

		jint listGetSize(JNIEnv * env, jobject list);

		jobject listGetElement(JNIEnv * env, jobject list, jint i);

		void listGetElements(JNIEnv * env, jobject hostObject, std::vector<jobject> & out);

		jobject listCreate(JNIEnv * env, jint capacity);

		jint enumOrdinal(JNIEnv * env, jobject in);

		void listAdd(JNIEnv * env, jobject list, jobject value);

		void throwJavaException(JNIEnv * env, const char * msg);

		jobject boxBoolean(JNIEnv * env, jboolean value);

		jboolean unboxBoolean(JNIEnv * env, jobject value);

		jobject boxLong(JNIEnv * env, jlong value);

		jlong unboxLong(JNIEnv * env, jobject value);

		jobject boxDouble(JNIEnv * env, jdouble value);

		jdouble unboxDouble(JNIEnv * env, jobject value);
	}
}

#endif

