/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#ifndef TRChartsJNI_Support_ContinuousDataSourceInterfaceMarshaller_cpp
#define TRChartsJNI_Support_ContinuousDataSourceInterfaceMarshaller_cpp

#include <TRChartsJNI/Support/ContinuousDataSourceInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/Marshallers.hpp>
#include <TRChartsJNI/Support/Handle.hpp>

#include <cassert>

template <typename T>
bool TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::inited = false;

template <typename T>
jclass TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::cls = nullptr;

template <typename T>
jmethodID TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::midGetDatumRange = nullptr;

template <typename T>
jmethodID TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::midGetDatums = nullptr;

template <typename T>
class TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::Proxy : public Charts::ContinuousDataSource<T>
{
public:
	Proxy(JNIEnv * env, const ContinuousDataSourceInterfaceMarshaller<T> & marshaller, jobject hostObject);

	virtual ~Proxy(void);

	jobject getHostObject(JNIEnv * env) const;

	virtual Charts::IndexRange getDatumRange(const std::shared_ptr<Charts::ContinuousSeries<T>> & series) const;
	virtual std::vector<T> getDatums(const std::shared_ptr<Charts::ContinuousSeries<T>> & series, const Charts::IndexRange & range) const;

private:
	const ContinuousDataSourceInterfaceMarshaller<T> & marshaller;
	const jweak weakHostObject;
};

template <typename T>
TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::ContinuousDataSourceInterfaceMarshaller(const Marshaller<T, jobject> & marshallerT)
:marshallerT(marshallerT)
{
}

template <typename T>
void TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::checkInited(JNIEnv * const env)
{
	if(!inited) {
		inited = true;
		cls = (jclass)env->NewGlobalRef(env->FindClass("com/thomsonreuters/corptech/charts/ContinuousDataSource"));
		midGetDatumRange = env->GetMethodID(cls, "getDatumRange", "(Lcom/thomsonreuters/corptech/charts/ContinuousSeries;)Lcom/thomsonreuters/corptech/charts/IndexRange;");
		midGetDatums = env->GetMethodID(cls, "getDatums", "(Lcom/thomsonreuters/corptech/charts/ContinuousSeries;Lcom/thomsonreuters/corptech/charts/IndexRange;)Ljava/util/List;");
	}
}

template <typename T>
std::shared_ptr<Charts::ContinuousDataSource<T>> TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::marshall(JNIEnv * const env, const jobject & in) const
{
	checkInited(env);
	if(in) {
		if(Utils::isBaseObjectInstance(env, in)) {
			Handle * const handle = reinterpret_cast<Handle *>(Utils::getBaseObjectHandle(env, in));
			return handle->getNativeObject<Charts::ContinuousDataSource<T>>(env);
		} else {
			Proxy * const impl = new Proxy(env, *this, in);
			const jobject strongRef = env->NewGlobalRef(in);
			return std::shared_ptr<Charts::ContinuousDataSource<T>>(impl, [=](Charts::ContinuousDataSource<T> * const ptr) -> void {
				delete ptr;
				env->DeleteGlobalRef(strongRef);
			});
		}
	}
	return std::shared_ptr<Charts::ContinuousDataSource<T>>();
}

template <typename T>
jobject TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::unmarshall(JNIEnv * const env, const std::shared_ptr<Charts::ContinuousDataSource<T>> & in) const
{
	checkInited(env);
	if(in) {
		CodegenSupport::BaseObject * const baseObject = dynamic_cast<CodegenSupport::BaseObject *>(in.get());
		if(baseObject) {
			Handle * const handle = reinterpret_cast<Handle *>(baseObject->getHandle());
			return handle->getHostObject(env);
		} else {
			Proxy * proxy = dynamic_cast<Proxy *>(in.get());
			if(proxy) {
				return proxy->getHostObject(env);
			} else {
				throw new std::logic_error("Cannot unmarshall");
			}
		}
	}
	return nullptr;
}

template <typename T>
const TRChartsJNI::Marshaller<std::shared_ptr<Charts::ContinuousSeries<T>>, jobject> & TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::getContinuousSeries_TMarshaller(void) const
{
	if(!cachedContinuousSeries_TMarshaller) {
		cachedContinuousSeries_TMarshaller.reset(new ObjectMarshaller<Charts::ContinuousSeries<T>>());
	}
	return *cachedContinuousSeries_TMarshaller;
}

template <typename T>
const TRChartsJNI::Marshaller<T, jobject> & TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::getTMarshaller(void) const
{
	return marshallerT;
}

template <typename T>
const TRChartsJNI::Marshaller<std::vector<T>, jobject> & TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::getListTMarshaller(void) const
{
	if(!cachedListTMarshaller) {
		cachedListTMarshaller.reset(new ListMarshaller<T, jobject>(getTMarshaller()));
	}
	return *cachedListTMarshaller;
}


template <typename T>
TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::Proxy::Proxy(JNIEnv * const env, const ContinuousDataSourceInterfaceMarshaller<T> & marshaller, const jobject hostObject)
	:marshaller(marshaller), weakHostObject(env->NewWeakGlobalRef(hostObject))
{
}

template <typename T>
TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::Proxy::~Proxy(void)
{
	JNIEnv * const env = Utils::getThreadEnv();
	assert(env);
	env->DeleteWeakGlobalRef(weakHostObject);
}

template <typename T>
jobject TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::Proxy::getHostObject(JNIEnv * const env) const
{
	return env->NewLocalRef(weakHostObject);
}

template <typename T>
Charts::IndexRange TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::Proxy::getDatumRange(const std::shared_ptr<Charts::ContinuousSeries<T>> & series) const
{
	JNIEnv * const env = Utils::getThreadEnv();
	assert(env);
	checkInited(env);
	jvalue args[] = {
		marshaller.getContinuousSeries_TMarshaller().unmarshallToValue(env, series)
	};
	const jobject hostObject = getHostObject(env);
	const Charts::IndexRange result = TRChartsJNI::getIndexRangeMarshaller().callMethod(env, hostObject, midGetDatumRange, args);
	env->DeleteLocalRef(hostObject);
	return result;
}

template <typename T>
std::vector<T> TRChartsJNI::ContinuousDataSourceInterfaceMarshaller<T>::Proxy::getDatums(const std::shared_ptr<Charts::ContinuousSeries<T>> & series, const Charts::IndexRange & range) const
{
	JNIEnv * const env = Utils::getThreadEnv();
	assert(env);
	checkInited(env);
	jvalue args[] = {
		marshaller.getContinuousSeries_TMarshaller().unmarshallToValue(env, series),
		TRChartsJNI::getIndexRangeMarshaller().unmarshallToValue(env, range)
	};
	const jobject hostObject = getHostObject(env);
	const std::vector<T> result = marshaller.getListTMarshaller().callMethod(env, hostObject, midGetDatums, args);
	env->DeleteLocalRef(hostObject);
	return result;
}

#endif