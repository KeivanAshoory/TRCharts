/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#ifndef TRChartsJNI_Support_Marshallers_hpp
#define TRChartsJNI_Support_Marshallers_hpp

#include <TRChartsJNI/Support/Marshaller.hpp>

#include <TRCharts/Color.hpp>
#include <TRCharts/Font.hpp>
#include <TRCharts/Margin.hpp>
#include <TRCharts/Size.hpp>
#include <TRCharts/FormatSyntax.hpp>
#include <TRCharts/DateUnit.hpp>
#include <TRCharts/Range.hpp>
#include <TRCharts/DateInterval.hpp>
#include <TRCharts/DataTransform.hpp>
#include <TRCharts/Edge.hpp>
#include <TRCharts/LineStyle.hpp>
#include <TRCharts/IndexRange.hpp>
#include <TRCharts/PointStyle.hpp>
#include <TRCharts/ScalarDatum.hpp>
#include <TRCharts/RangeDatum.hpp>
#include <TRCharts/OHLCDatum.hpp>
#include <TRCharts/Coordinates.hpp>
#include <TRCharts/Transform.hpp>
#include <TRCharts/Touch.hpp>
#include <TRCharts/ResizeMode.hpp>
#include <TRCharts/Point.hpp>
#include <TRCharts/FontHint.hpp>
#include <TRCharts/LineMode.hpp>
#include <TRCharts/OHLC.hpp>
#include <TRCharts/LogLevel.hpp>

namespace Charts
{
	class RangeCalculator;
	class ContinuousAxis;
	class Label;
	class AxisLayout;
	class NumberFormatter;
	class NumberTickCalculator;
	class DateFormatter;
	class DateTickCalculator;
	template <typename T> class ContinuousDataSource;
	struct ScalarDatum;
	class LineStyleSource;
	struct RangeDatum;
	struct OHLCDatum;
	class AnimationEffect;
	class AnimationDelegate;
	class Drawable;
	class ConstraintBehaviour;
	class Axis;
	class Chart;
	class Series;
	class Decoration;
	class Constraint;
	class Animation;
	class ColorSource;
	template <typename T> class ContinuousSeries;
	class LogHandler;
}

namespace TRChartsJNI
{
	//namespace Marshallers
	//{
		const Marshaller<bool, jboolean> & getBooleanMarshaller(void);

		const Marshaller<double, jdouble> & getNumberMarshaller(void);

		const Marshaller<long, jlong> & getIntegerMarshaller(void);

		const Marshaller<std::string, jstring> & getStringMarshaller(void);

		const Marshaller<Charts::Color, jobject> & getColorMarshaller(void);

		const Marshaller<Charts::Font, jobject> & getFontMarshaller(void);

		const Marshaller<Charts::Margin, jobject> & getMarginMarshaller(void);

		const Marshaller<Charts::Size, jobject> & getSizeMarshaller(void);

		const Marshaller<std::vector<std::string>, jobject> & getListStringMarshaller(void);

		const Marshaller<Charts::FormatSyntax, jobject> & getFormatSyntaxMarshaller(void);

		const Marshaller<Charts::DateUnit, jobject> & getDateUnitMarshaller(void);

		const Marshaller<Charts::Range, jobject> & getRangeMarshaller(void);

		const Marshaller<std::vector<double>, jobject> & getListNumberMarshaller(void);

		const Marshaller<Charts::DateInterval, jobject> & getDateIntervalMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::RangeCalculator>, jobject> & getRangeCalculatorMarshaller(void);

		const Marshaller<Charts::DataTransform, jobject> & getDataTransformMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::ContinuousAxis>, jobject> & getContinuousAxisMarshaller(void);

		const Marshaller<Charts::Edge, jobject> & getEdgeMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::Label>, jobject> & getLabelMarshaller(void);

		const Marshaller<Charts::LineStyle, jobject> & getLineStyleMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::AxisLayout>, jobject> & getAxisLayoutMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::NumberFormatter>, jobject> & getNumberFormatterMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::NumberTickCalculator>, jobject> & getNumberTickCalculatorMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::DateFormatter>, jobject> & getDateFormatterMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::DateTickCalculator>, jobject> & getDateTickCalculatorMarshaller(void);

		const Marshaller<Charts::IndexRange, jobject> & getIndexRangeMarshaller(void);

		const Marshaller<Charts::PointStyle, jobject> & getPointStyleMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::ScalarDatum>>, jobject> & getContinuousDataSource_ScalarDatumMarshaller(void);

		const Marshaller<Charts::ScalarDatum, jobject> & getScalarDatumMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::LineStyleSource>, jobject> & getLineStyleSourceMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::RangeDatum>>, jobject> & getContinuousDataSource_RangeDatumMarshaller(void);

		const Marshaller<Charts::RangeDatum, jobject> & getRangeDatumMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::ContinuousDataSource<Charts::OHLCDatum>>, jobject> & getContinuousDataSource_OHLCDatumMarshaller(void);

		const Marshaller<Charts::OHLCDatum, jobject> & getOHLCDatumMarshaller(void);

		const Marshaller<Charts::Coordinates, jobject> & getCoordinatesMarshaller(void);

		const Marshaller<std::vector<std::shared_ptr<Charts::AnimationEffect>>, jobject> & getListAnimationEffectMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::AnimationEffect>, jobject> & getAnimationEffectMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::AnimationDelegate>, jobject> & getAnimationDelegateMarshaller(void);

		const Marshaller<std::vector<std::shared_ptr<Charts::Drawable>>, jobject> & getListDrawableMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::Drawable>, jobject> & getDrawableMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::ConstraintBehaviour>, jobject> & getConstraintBehaviourMarshaller(void);

		const Marshaller<std::vector<std::shared_ptr<Charts::Axis>>, jobject> & getListAxisMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::Axis>, jobject> & getAxisMarshaller(void);

		const Marshaller<Charts::Transform, jobject> & getTransformMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::Chart>, jobject> & getChartMarshaller(void);

		const Marshaller<std::vector<Charts::Edge>, jobject> & getListEdgeMarshaller(void);

		const Marshaller<std::vector<std::shared_ptr<Charts::Series>>, jobject> & getListSeriesMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::Series>, jobject> & getSeriesMarshaller(void);

		const Marshaller<std::vector<std::shared_ptr<Charts::Decoration>>, jobject> & getListDecorationMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::Decoration>, jobject> & getDecorationMarshaller(void);

		const Marshaller<std::vector<std::shared_ptr<Charts::Constraint>>, jobject> & getListConstraintMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::Constraint>, jobject> & getConstraintMarshaller(void);

		const Marshaller<std::vector<std::shared_ptr<Charts::Animation>>, jobject> & getListAnimationMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::Animation>, jobject> & getAnimationMarshaller(void);

		const Marshaller<std::vector<Charts::Touch>, jobject> & getListTouchMarshaller(void);

		const Marshaller<Charts::Touch, jobject> & getTouchMarshaller(void);

		const Marshaller<Charts::ResizeMode, jobject> & getResizeModeMarshaller(void);

		const Marshaller<Charts::Point, jobject> & getPointMarshaller(void);

		const Marshaller<Charts::FontHint, jobject> & getFontHintMarshaller(void);

		const Marshaller<Charts::LineMode, jobject> & getLineModeMarshaller(void);

		const Marshaller<Charts::OHLC, jobject> & getOHLCMarshaller(void);

		const Marshaller<Charts::LogLevel, jobject> & getLogLevelMarshaller(void);

		const Marshaller<std::vector<Charts::Color>, jobject> & getListColorMarshaller(void);

		const Marshaller<std::vector<Charts::LineStyle>, jobject> & getListLineStyleMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::ColorSource>, jobject> & getColorSourceMarshaller(void);

		const Marshaller<std::shared_ptr<Charts::LogHandler>, jobject> & getLogHandlerMarshaller(void);

	//}
}

#endif