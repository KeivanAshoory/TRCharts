/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#ifndef TRChartsJNI_Support_NumberFormatterInterfaceMarshaller_cpp
#define TRChartsJNI_Support_NumberFormatterInterfaceMarshaller_cpp

#include <TRChartsJNI/Support/NumberFormatterInterfaceMarshaller.hpp>
#include <TRChartsJNI/Support/Marshallers.hpp>
#include <TRChartsJNI/Support/Handle.hpp>

#include <cassert>


bool TRChartsJNI::NumberFormatterInterfaceMarshaller::inited = false;


jclass TRChartsJNI::NumberFormatterInterfaceMarshaller::cls = nullptr;


jmethodID TRChartsJNI::NumberFormatterInterfaceMarshaller::midFormatNumber = nullptr;


class TRChartsJNI::NumberFormatterInterfaceMarshaller::Proxy : public Charts::NumberFormatter
{
public:
	Proxy(JNIEnv * env, const NumberFormatterInterfaceMarshaller & marshaller, jobject hostObject);

	virtual ~Proxy(void);

	jobject getHostObject(JNIEnv * env) const;

	virtual std::string formatNumber(double value) const;

private:
	const NumberFormatterInterfaceMarshaller & marshaller;
	const jweak weakHostObject;
};



void TRChartsJNI::NumberFormatterInterfaceMarshaller::checkInited(JNIEnv * const env)
{
	if(!inited) {
		inited = true;
		cls = (jclass)env->NewGlobalRef(env->FindClass("com/thomsonreuters/corptech/charts/NumberFormatter"));
		midFormatNumber = env->GetMethodID(cls, "formatNumber", "(D)Ljava/lang/String;");
	}
}


std::shared_ptr<Charts::NumberFormatter> TRChartsJNI::NumberFormatterInterfaceMarshaller::marshall(JNIEnv * const env, const jobject & in) const
{
	checkInited(env);
	if(in) {
		if(Utils::isBaseObjectInstance(env, in)) {
			Handle * const handle = reinterpret_cast<Handle *>(Utils::getBaseObjectHandle(env, in));
			return handle->getNativeObject<Charts::NumberFormatter>(env);
		} else {
			Proxy * const impl = new Proxy(env, *this, in);
			const jobject strongRef = env->NewGlobalRef(in);
			return std::shared_ptr<Charts::NumberFormatter>(impl, [=](Charts::NumberFormatter * const ptr) -> void {
				delete ptr;
				env->DeleteGlobalRef(strongRef);
			});
		}
	}
	return std::shared_ptr<Charts::NumberFormatter>();
}


jobject TRChartsJNI::NumberFormatterInterfaceMarshaller::unmarshall(JNIEnv * const env, const std::shared_ptr<Charts::NumberFormatter> & in) const
{
	checkInited(env);
	if(in) {
		CodegenSupport::BaseObject * const baseObject = dynamic_cast<CodegenSupport::BaseObject *>(in.get());
		if(baseObject) {
			Handle * const handle = reinterpret_cast<Handle *>(baseObject->getHandle());
			return handle->getHostObject(env);
		} else {
			Proxy * proxy = dynamic_cast<Proxy *>(in.get());
			if(proxy) {
				return proxy->getHostObject(env);
			} else {
				throw new std::logic_error("Cannot unmarshall");
			}
		}
	}
	return nullptr;
}



TRChartsJNI::NumberFormatterInterfaceMarshaller::Proxy::Proxy(JNIEnv * const env, const NumberFormatterInterfaceMarshaller & marshaller, const jobject hostObject)
	:marshaller(marshaller), weakHostObject(env->NewWeakGlobalRef(hostObject))
{
}


TRChartsJNI::NumberFormatterInterfaceMarshaller::Proxy::~Proxy(void)
{
	JNIEnv * const env = Utils::getThreadEnv();
	assert(env);
	env->DeleteWeakGlobalRef(weakHostObject);
}


jobject TRChartsJNI::NumberFormatterInterfaceMarshaller::Proxy::getHostObject(JNIEnv * const env) const
{
	return env->NewLocalRef(weakHostObject);
}


std::string TRChartsJNI::NumberFormatterInterfaceMarshaller::Proxy::formatNumber(double value) const
{
	JNIEnv * const env = Utils::getThreadEnv();
	assert(env);
	checkInited(env);
	jvalue args[] = {
		TRChartsJNI::getNumberMarshaller().unmarshallToValue(env, value)
	};
	const jobject hostObject = getHostObject(env);
	const std::string result = TRChartsJNI::getStringMarshaller().callMethod(env, hostObject, midFormatNumber, args);
	env->DeleteLocalRef(hostObject);
	return result;
}

#endif