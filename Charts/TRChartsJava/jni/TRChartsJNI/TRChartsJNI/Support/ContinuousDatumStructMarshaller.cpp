/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#include <TRChartsJNI/Support/ContinuousDatumStructMarshaller.hpp>
#include <TRChartsJNI/Support/Marshallers.hpp>

using namespace TRChartsJNI;
using namespace Charts;

namespace
{
	bool inited = false;
	jclass cls;
	jmethodID ctor;
	jfieldID fidAbscissa;

	void checkInited(JNIEnv * const env)
	{
		if(!::inited) {
			::inited = true;
			::cls = (jclass)env->NewGlobalRef(env->FindClass("com/thomsonreuters/corptech/charts/ContinuousDatum"));
			::ctor = env->GetMethodID(::cls, "<init>", "()V");
			::fidAbscissa = env->GetFieldID(cls, "abscissa", "D");
		}
	}
}

ContinuousDatum ContinuousDatumStructMarshaller::marshall(JNIEnv * const env, const jobject & in) const
{
	::checkInited(env);
	ContinuousDatum out;
	out.abscissa = TRChartsJNI::getNumberMarshaller().getFieldValue(env, in, ::fidAbscissa);
	return out;
}

jobject ContinuousDatumStructMarshaller::unmarshall(JNIEnv * const env, const ContinuousDatum & in) const
{
	::checkInited(env);
	jobject out = env->NewObject(::cls, ::ctor);
	TRChartsJNI::getNumberMarshaller().setFieldValue(env, out, ::fidAbscissa, in.abscissa);
	return out;
}

ContinuousDatum ContinuousDatumStructMarshaller::getFieldValue(JNIEnv * const env, const jobject obj, const jfieldID fieldID) const
{
	return marshall(env, env->GetObjectField(obj, fieldID));
}

void ContinuousDatumStructMarshaller::setFieldValue(JNIEnv * const env, const jobject obj, const jfieldID fieldID, const ContinuousDatum & value) const
{
	env->SetObjectField(obj, fieldID, unmarshall(env, value));
}

ContinuousDatum ContinuousDatumStructMarshaller::callMethod(JNIEnv * const env, const jobject obj, const jmethodID methodID, jvalue * const args) const
{
	return marshall(env, env->CallObjectMethodA(obj, methodID, args));
}