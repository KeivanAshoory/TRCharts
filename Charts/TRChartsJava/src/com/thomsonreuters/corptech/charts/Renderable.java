/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Base interface/protocol for objects with a visual representation
 * </p>
 */

@SuppressWarnings("all")
public interface Renderable
{
	/**
	 * <p>
	 * Set the render area size (nothing will be drawn outside this area).
	 * </p>
	 * <p>
	 * This content scale factor value is for iOS Retina use, it can be set to
	 * 1.0 for all other environments.
	 * </p>
	 * @param size Size of the area in points
	 * @param contentScaleFactor Content scale factor (iOS specific)
	 */

	void resize(Size size, double contentScaleFactor);

	/**
	 * <p>
	 * Load new data
	 * </p>
	 * <p>
	 * Calling this method is optional
	 * </p>
	 */

	void preUpdate();

	/**
	 * <p>
	 * Synchronize changed properties with internal state
	 * </p>
	 * <p>
	 * A valid size must be set before calling this method
	 * </p>
	 * @return The result.
	 */

	boolean update();

	/**
	 * <p>
	 * Prepare OpenGL context for rendering
	 * </p>
	 * <p>
	 * Must be called from a thread which has the correct OpenGL context.
	 * </p>
	 * <p>
	 * Calling this method is optional
	 * </p>
	 */

	void preRender();

	/**
	 * <p>
	 * Must be called from a thread which has the correct OpenGL context.
	 * </p>
	 */

	void render();

	/**
	 * <p>
	 * Must be called from a thread which has the correct OpenGL context.
	 * </p>
	 */

	void dispose();

}
