/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * An axis layout that tries to fit all available data into the visible
 * area.
 * </p>
 * <p>
 * <b>WARNING:</b> This is an automatically generated wrapper around a
 * native object; overriding methods will not work as expected.
 * </p>
 */

@SuppressWarnings("all")
public class DataFittingAxisLayout extends BaseObject implements AxisLayout
{
	/**
	 * Default constructor
	 */

	public DataFittingAxisLayout()
	{
		this(true);
		setHandle(nativeCreate());
	}

	/**
	 * Get the rangeCalculator.
	 * <p>
	 * Assigning a range calculator is optional, if not supplied, the data range
	 * supplied by the axis will be used.
	 * </p>
	 * @return The current rangeCalculator.
	 */

	public RangeCalculator getRangeCalculator()
	{
		return (RangeCalculator)nativeGetRangeCalculator(getHandle());
	}

	/**
	 * Set the rangeCalculator.
	 * <p>
	 * Assigning a range calculator is optional, if not supplied, the data range
	 * supplied by the axis will be used.
	 * </p>
	 * @param value The new rangeCalculator.
	 */

	public void setRangeCalculator(final RangeCalculator value)
	{
		nativeSetRangeCalculator(getHandle(), value);
	}

	/**
	 * <p>
	 * Calculate layout transform for the axis
	 * </p>
	 * @param axis Axis requiring layout
	 * @param dataRange Data range for all series associated with the axis
	 * @param screenLength Length of the axis, in screen co-ordinates
	 * @param renderTransform Current offset transform (i.e. transform caused by panning and zooming).
	 * @return The result.
	 */

	public DataTransform calculateTransform(final ContinuousAxis axis, final Range dataRange, final double screenLength, final DataTransform renderTransform)
	{
		return (DataTransform)nativeCalculateTransform(getHandle(), axis, dataRange, screenLength, renderTransform);
	}

	// need this to prevent default constructor in base classes
	/*package*/ DataFittingAxisLayout(boolean dummy)
	{
		super(dummy);
	}

	protected void onFinalize()
	{
		nativeDestroy(getHandle());
	}

	private final native long nativeCreate();
	private final native void nativeDestroy(long ptr);
	private final native Object nativeGetRangeCalculator(long ptr);
	private final native void nativeSetRangeCalculator(long ptr, Object value);
	private final native Object nativeCalculateTransform(long ptr, Object axis, Object dataRange, double screenLength, Object renderTransform);
}
