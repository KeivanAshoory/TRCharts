/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Represents an integer start and end index (start:inclusive,
 * end:exclusive)
 * </p>
 * <p>
 * A valid index range must be ordered such that min is less than or equal
 * to max. Most methods (except valid and positive) expect that the supplied
 * index range is valid and will likely return unexpected results if this is
 * not the case.
 * </p>
 * <p>
 * <b>NOTE:</b> This is a value class, when passing it to other library
 * methods it is always effectively copied.
 * </p>
 */

@SuppressWarnings("all")
public class IndexRange
{
	private long begin;
	private long end;

	/**
	 * Initialize a IndexRange with default values.
	 */
	public IndexRange()
	{
	}

	/**
	 * Initialize a IndexRange with provided values.
	 *
	 * @param begin The start of range.
	 * @param end The end of range.
	 */

	public IndexRange(long begin, long end)
	{
		this.begin = begin;
		this.end = end;
	}

	/**
	 * Get the start of range.
	 * <p>
	 * The start of range is inclusive
	 * </p>
	 * @return The current start of range.
	 */

	public final long getBegin()
	{
		return this.begin;
	}

	/**
	 * Set the start of range.
	 * <p>
	 * The start of range is inclusive
	 * </p>
	 * @param value The new start of range.
	 */

	public final void setBegin(final long value)
	{
		this.begin = value;
	}

	/**
	 * Get the end of range.
	 * <p>
	 * The end of range is exclusive
	 * </p>
	 * @return The current end of range.
	 */

	public final long getEnd()
	{
		return this.end;
	}

	/**
	 * Set the end of range.
	 * <p>
	 * The end of range is exclusive
	 * </p>
	 * @param value The new end of range.
	 */

	public final void setEnd(final long value)
	{
		this.end = value;
	}

	@Override
	public String toString()
	{
		return "IndexRange {" +
				"begin=" + begin + ", " +
				"end=" + end +
				"}";
	}

	@Override
	public boolean equals(final Object other)
	{
		if(this == other) return true;
		if(!(other instanceof IndexRange)) return false;

		final IndexRange tmp = (IndexRange)other;

		if(!(this.begin == tmp.begin)) return false;
		if(!(this.end == tmp.end)) return false;

		return true;
	}

	@Override
	public int hashCode()
	{
		int result = 7;

		result = 31 * result + ((Long)begin).hashCode();
		result = 31 * result + ((Long)end).hashCode();

		return result;
	}

	/**
	 * <p>
	 * Length of the range (in.end - in.begin)
	 * </p>
	 * @param indexRange Input range (in)
	 * @return The result.
	 */

	public static long length(final IndexRange indexRange)
	{
		return nativeLength(indexRange);
	}

	/**
	 * <p>
	 * If true, the parameter index range is ordered such that in.begin <=
	 * in.end (i.e. the length may be 0)
	 * </p>
	 * @param indexRange Input range (in)
	 * @return The result.
	 */

	public static boolean valid(final IndexRange indexRange)
	{
		return nativeValid(indexRange);
	}

	/**
	 * <p>
	 * If true, the parameter index range is valid, and it does not exceed the
	 * extents of the withinRange parameter (in.begin >= within.begin && in.end
	 * <= within.end)
	 * </p>
	 * @param indexRange Input range (in)
	 * @param otherIndexRange Within range (within)
	 * @return The result.
	 */

	public static boolean validWithin(final IndexRange indexRange, final IndexRange otherIndexRange)
	{
		return nativeValidWithin(indexRange, otherIndexRange);
	}

	/**
	 * <p>
	 * If true, the parameter index range is ordered such that in.begin < in.end
	 * </p>
	 * @param indexRange Input range (in)
	 * @return The result.
	 */

	public static boolean positive(final IndexRange indexRange)
	{
		return nativePositive(indexRange);
	}

	/**
	 * <p>
	 * Returns the smallest range enclosing both supplied ranges min(a.begin,
	 * b.begin), max(a.end, b.end)
	 * </p>
	 * @param indexRange Input range (a)
	 * @param otherIndexRange Input range (b)
	 * @return The result.
	 */

	public static IndexRange merge(final IndexRange indexRange, final IndexRange otherIndexRange)
	{
		return (IndexRange)nativeMerge(indexRange, otherIndexRange);
	}

	/**
	 * <p>
	 * Constrain the parameter index range such that it does not exceed the
	 * extents of the withinRange parameter (in.begin >= within.begin && in.end
	 * <= within.end)
	 * </p>
	 * @param indexRange Input range (in)
	 * @param withinIndexRange Within range (within)
	 * @return The result.
	 */

	public static IndexRange clamp(final IndexRange indexRange, final IndexRange withinIndexRange)
	{
		return (IndexRange)nativeClamp(indexRange, withinIndexRange);
	}

	/**
	 * <p>
	 * Returns true if the ranges intersect (but not if they just touch) i.e
	 * returns true iff max(a.begin, b.begin) <= min(a.end, b.end)
	 * </p>
	 * @param indexRange Input range (a)
	 * @param otherIndexRange Input range (b)
	 * @return The result.
	 */

	public static boolean overlap(final IndexRange indexRange, final IndexRange otherIndexRange)
	{
		return nativeOverlap(indexRange, otherIndexRange);
	}


	private static final native long nativeLength(Object indexRange);
	private static final native boolean nativeValid(Object indexRange);
	private static final native boolean nativeValidWithin(Object indexRange, Object otherIndexRange);
	private static final native boolean nativePositive(Object indexRange);
	private static final native Object nativeMerge(Object indexRange, Object otherIndexRange);
	private static final native Object nativeClamp(Object indexRange, Object withinIndexRange);
	private static final native boolean nativeOverlap(Object indexRange, Object otherIndexRange);
}
