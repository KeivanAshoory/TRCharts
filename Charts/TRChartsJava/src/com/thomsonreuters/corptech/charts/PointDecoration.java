/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Draws a point at a fixed data position on a given pair of axes
 * </p>
 * <p>
 * <b>WARNING:</b> This is an automatically generated wrapper around a
 * native object; overriding methods will not work as expected.
 * </p>
 */

@SuppressWarnings("all")
public class PointDecoration extends Decoration
{
	/**
	 * Default constructor
	 */

	public PointDecoration()
	{
		this(true);
		setHandle(nativeCreate());
	}

	/**
	 * Get the abscissa axis.
	 * <p>
	 * The abscissa (traditionally X) axis
	 * </p>
	 * @return The current abscissa axis.
	 */

	public ContinuousAxis getAbscissaAxis()
	{
		return (ContinuousAxis)nativeGetAbscissaAxis(getHandle());
	}

	/**
	 * Set the abscissa axis.
	 * <p>
	 * The abscissa (traditionally X) axis
	 * </p>
	 * @param value The new abscissa axis.
	 */

	public void setAbscissaAxis(final ContinuousAxis value)
	{
		nativeSetAbscissaAxis(getHandle(), value);
	}

	/**
	 * Get the ordinate axis.
	 * <p>
	 * The ordinate (traditionally Y) axis
	 * </p>
	 * @return The current ordinate axis.
	 */

	public ContinuousAxis getOrdinateAxis()
	{
		return (ContinuousAxis)nativeGetOrdinateAxis(getHandle());
	}

	/**
	 * Set the ordinate axis.
	 * <p>
	 * The ordinate (traditionally Y) axis
	 * </p>
	 * @param value The new ordinate axis.
	 */

	public void setOrdinateAxis(final ContinuousAxis value)
	{
		nativeSetOrdinateAxis(getHandle(), value);
	}

	/**
	 * Get the value.
	 * <p>
	 * Position in data co-ordinates
	 * </p>
	 * @return The current value.
	 */

	public Coordinates getValue()
	{
		return (Coordinates)nativeGetValue(getHandle());
	}

	/**
	 * Set the value.
	 * <p>
	 * Position in data co-ordinates
	 * </p>
	 * @param value The new value.
	 */

	public void setValue(final Coordinates value)
	{
		nativeSetValue(getHandle(), value);
	}

	/**
	 * Get the pointStyle.
	 * <p>
	 * Drawing style for the point
	 * </p>
	 * @return The current pointStyle.
	 */

	public PointStyle getPointStyle()
	{
		return (PointStyle)nativeGetPointStyle(getHandle());
	}

	/**
	 * Set the pointStyle.
	 * <p>
	 * Drawing style for the point
	 * </p>
	 * @param value The new pointStyle.
	 */

	public void setPointStyle(final PointStyle value)
	{
		nativeSetPointStyle(getHandle(), value);
	}

	// need this to prevent default constructor in base classes
	/*package*/ PointDecoration(boolean dummy)
	{
		super(dummy);
	}

	protected void onFinalize()
	{
		nativeDestroy(getHandle());
	}

	private final native long nativeCreate();
	private final native void nativeDestroy(long ptr);
	private final native Object nativeGetAbscissaAxis(long ptr);
	private final native void nativeSetAbscissaAxis(long ptr, Object value);
	private final native Object nativeGetOrdinateAxis(long ptr);
	private final native void nativeSetOrdinateAxis(long ptr, Object value);
	private final native Object nativeGetValue(long ptr);
	private final native void nativeSetValue(long ptr, Object value);
	private final native Object nativeGetPointStyle(long ptr);
	private final native void nativeSetPointStyle(long ptr, Object value);
}
