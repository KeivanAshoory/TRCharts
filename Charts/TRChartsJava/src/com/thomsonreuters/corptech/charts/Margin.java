/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Represents 4 edges (for margin/padding/etc)
 * </p>
 * <p>
 * <b>NOTE:</b> This is a value class, when passing it to other library
 * methods it is always effectively copied.
 * </p>
 */

@SuppressWarnings("all")
public class Margin
{
	private double left;
	private double right;
	private double bottom;
	private double top;

	/**
	 * Initialize a Margin with default values.
	 */
	public Margin()
	{
	}

	/**
	 * Initialize a Margin with provided values.
	 *
	 * @param left The left margin.
	 * @param right The right margin.
	 * @param bottom The bottom margin.
	 * @param top The top margin.
	 */

	public Margin(double left, double right, double bottom, double top)
	{
		this.left = left;
		this.right = right;
		this.bottom = bottom;
		this.top = top;
	}

	/**
	 * Get the left margin.
	 * @return The current left margin.
	 */

	public final double getLeft()
	{
		return this.left;
	}

	/**
	 * Set the left margin.
	 * @param value The new left margin.
	 */

	public final void setLeft(final double value)
	{
		this.left = value;
	}

	/**
	 * Get the right margin.
	 * @return The current right margin.
	 */

	public final double getRight()
	{
		return this.right;
	}

	/**
	 * Set the right margin.
	 * @param value The new right margin.
	 */

	public final void setRight(final double value)
	{
		this.right = value;
	}

	/**
	 * Get the bottom margin.
	 * @return The current bottom margin.
	 */

	public final double getBottom()
	{
		return this.bottom;
	}

	/**
	 * Set the bottom margin.
	 * @param value The new bottom margin.
	 */

	public final void setBottom(final double value)
	{
		this.bottom = value;
	}

	/**
	 * Get the top margin.
	 * @return The current top margin.
	 */

	public final double getTop()
	{
		return this.top;
	}

	/**
	 * Set the top margin.
	 * @param value The new top margin.
	 */

	public final void setTop(final double value)
	{
		this.top = value;
	}

	@Override
	public String toString()
	{
		return "Margin {" +
				"left=" + left + ", " +
				"right=" + right + ", " +
				"bottom=" + bottom + ", " +
				"top=" + top +
				"}";
	}

	@Override
	public boolean equals(final Object other)
	{
		if(this == other) return true;
		if(!(other instanceof Margin)) return false;

		final Margin tmp = (Margin)other;

		if(!(this.left == tmp.left)) return false;
		if(!(this.right == tmp.right)) return false;
		if(!(this.bottom == tmp.bottom)) return false;
		if(!(this.top == tmp.top)) return false;

		return true;
	}

	@Override
	public int hashCode()
	{
		int result = 7;

		result = 31 * result + ((Double)left).hashCode();
		result = 31 * result + ((Double)right).hashCode();
		result = 31 * result + ((Double)bottom).hashCode();
		result = 31 * result + ((Double)top).hashCode();

		return result;
	}

	/**
	 * <p>
	 * Utility method to add two margins (edgewise)
	 * </p>
	 * <p>
	 * Return value is (result.left = first.left + second.left, ...)
	 * </p>
	 * @param margin First margin
	 * @param toMargin Second margin
	 * @return The result.
	 */

	public static Margin add(final Margin margin, final Margin toMargin)
	{
		return (Margin)nativeAdd(margin, toMargin);
	}


	private static final native Object nativeAdd(Object margin, Object toMargin);
}
