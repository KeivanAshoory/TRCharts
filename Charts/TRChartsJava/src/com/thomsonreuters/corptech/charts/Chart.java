/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Root container for all chart objects.
 * </p>
 * <p>
 * <b>WARNING:</b> This is an automatically generated wrapper around a
 * native object; overriding methods will not work as expected.
 * </p>
 */

@SuppressWarnings("all")
public class Chart extends Drawable implements Renderable
{
	/**
	 * Default constructor
	 */

	public Chart()
	{
		this(true);
		setHandle(nativeCreate());
	}

	/**
	 * Get the chart title.
	 * <p>
	 * The title is displayed above the chart. It is optional.
	 * </p>
	 * @return The current chart title.
	 */

	public Label getTitle()
	{
		return (Label)nativeGetTitle(getHandle());
	}

	/**
	 * Set the chart title.
	 * <p>
	 * The title is displayed above the chart. It is optional.
	 * </p>
	 * @param value The new chart title.
	 */

	public void setTitle(final Label value)
	{
		nativeSetTitle(getHandle(), value);
	}

	/**
	 * Get the background color.
	 * <p>
	 * The background color is used to paint the chart container.
	 * </p>
	 * @return The current background color.
	 */

	public Color getBackgroundColor()
	{
		return (Color)nativeGetBackgroundColor(getHandle());
	}

	/**
	 * Set the background color.
	 * <p>
	 * The background color is used to paint the chart container.
	 * </p>
	 * @param value The new background color.
	 */

	public void setBackgroundColor(final Color value)
	{
		nativeSetBackgroundColor(getHandle(), value);
	}

	/**
	 * Get the area color.
	 * <p>
	 * The fill color is used to paint the area within the chart's axes.
	 * </p>
	 * @return The current area color.
	 */

	public Color getFillColor()
	{
		return (Color)nativeGetFillColor(getHandle());
	}

	/**
	 * Set the area color.
	 * <p>
	 * The fill color is used to paint the area within the chart's axes.
	 * </p>
	 * @param value The new area color.
	 */

	public void setFillColor(final Color value)
	{
		nativeSetFillColor(getHandle(), value);
	}

	/**
	 * Get the margin.
	 * <p>
	 * The margin is the empty space around the chart.
	 * </p>
	 * @return The current margin.
	 */

	public Margin getMargin()
	{
		return (Margin)nativeGetMargin(getHandle());
	}

	/**
	 * Set the margin.
	 * <p>
	 * The margin is the empty space around the chart.
	 * </p>
	 * @param value The new margin.
	 */

	public void setMargin(final Margin value)
	{
		nativeSetMargin(getHandle(), value);
	}

	/**
	 * Get the axis list.
	 * <p>
	 * The axis list contains all currently associated axes.
	 * </p>
	 * @return The current axis list.
	 */

	public List<Axis> getAxisList()
	{
		return (List<Axis>)nativeGetAxisList(getHandle());
	}

	/**
	 * Get the series list.
	 * <p>
	 * The series list contains all currently associated series.
	 * </p>
	 * @return The current series list.
	 */

	public List<Series> getSeriesList()
	{
		return (List<Series>)nativeGetSeriesList(getHandle());
	}

	/**
	 * Get the decoration list.
	 * <p>
	 * The series list contains all currently associated decorations.
	 * </p>
	 * @return The current decoration list.
	 */

	public List<Decoration> getDecorationList()
	{
		return (List<Decoration>)nativeGetDecorationList(getHandle());
	}

	/**
	 * Get the constraint list.
	 * <p>
	 * The series list contains all currently associated constraints.
	 * </p>
	 * @return The current constraint list.
	 */

	public List<Constraint> getConstraintList()
	{
		return (List<Constraint>)nativeGetConstraintList(getHandle());
	}

	/**
	 * Get the active animation list.
	 * <p>
	 * The active animation list contains all attached animations.
	 * </p>
	 * @return The current active animation list.
	 */

	public List<Animation> getActiveAnimationList()
	{
		return (List<Animation>)nativeGetActiveAnimationList(getHandle());
	}

	/**
	 * Get the latest touch list.
	 * @return The current latest touch list.
	 */

	public List<Touch> getLastTouches()
	{
		return (List<Touch>)nativeGetLastTouches(getHandle());
	}

	/**
	 * Get the size.
	 * <p>
	 * Size of the render area in points (actual pixel render area is multiplied
	 * by the content scale factor)
	 * </p>
	 * @return The current size.
	 */

	public Size getSize()
	{
		return (Size)nativeGetSize(getHandle());
	}

	/**
	 * Get the content scale factor.
	 * <p>
	 * Content scale factor (iOS specific)
	 * </p>
	 * @return The current content scale factor.
	 */

	public double getContentScaleFactor()
	{
		return nativeGetContentScaleFactor(getHandle());
	}

	/**
	 * Get the resize mode.
	 * @return The current resize mode.
	 */

	public ResizeMode getResizeMode()
	{
		return (ResizeMode)nativeGetResizeMode(getHandle());
	}

	/**
	 * Set the resize mode.
	 * @param value The new resize mode.
	 */

	public void setResizeMode(final ResizeMode value)
	{
		nativeSetResizeMode(getHandle(), value);
	}

	/**
	 * Get the current transform.
	 * @return The current current transform.
	 */

	public Transform getTransform()
	{
		return (Transform)nativeGetTransform(getHandle());
	}

	/**
	 * Set the current transform.
	 * @param value The new current transform.
	 */

	public void setTransform(final Transform value)
	{
		nativeSetTransform(getHandle(), value);
	}

	/**
	 * <p>
	 * Set the render area size (nothing will be drawn outside this area).
	 * </p>
	 * <p>
	 * In iOS, a content scale factor is used to help with specifying
	 * Retina/non-Retina sizes. The content scale factor should be supplied to
	 * the chart (the size value itself should not be pre-multiplied by the
	 * scale factor). On non-iOS platforms the default value of 1.0 can be used.
	 * </p>
	 * @param size Size of the area in points
	 * @param contentScaleFactor Content scale factor (iOS specific)
	 */

	public void resize(final Size size, final double contentScaleFactor)
	{
		nativeResize(getHandle(), size, contentScaleFactor);
	}

	/**
	 * <p>
	 * Mark the chart as needing layout recalculation. The recalculation happens
	 * during the next update phase.
	 * </p>
	 */

	public void relayout()
	{
		nativeRelayout(getHandle());
	}

	/**
	 * <p>
	 * Adds an axis to the chart.
	 * </p>
	 * <p>
	 * The axis will be attached to this chart, until removeAxis is called or
	 * the chart is destroyed.
	 * </p>
	 * @see Attachable
	 * @param axis The axis to add.
	 */

	public void addAxis(final Axis axis)
	{
		nativeAddAxis(getHandle(), axis);
	}

	/**
	 * <p>
	 * Adds a series to the chart.
	 * </p>
	 * <p>
	 * The series will be attached to this chart, until removeSeries is called
	 * or the chart is destroyed.
	 * </p>
	 * @see Attachable
	 * @param series The series to add.
	 */

	public void addSeries(final Series series)
	{
		nativeAddSeries(getHandle(), series);
	}

	/**
	 * <p>
	 * Adds a decoration to the chart.
	 * </p>
	 * <p>
	 * The decoration will be attached to this chart, until removeDecoration is
	 * called or the chart is destroyed.
	 * </p>
	 * @see Attachable
	 * @param decoration The decoration to add.
	 */

	public void addDecoration(final Decoration decoration)
	{
		nativeAddDecoration(getHandle(), decoration);
	}

	/**
	 * <p>
	 * Adds a constraint to the chart.
	 * </p>
	 * <p>
	 * The constraint will be attached to this chart, until removeConstraint is
	 * called or the chart is destroyed.
	 * </p>
	 * @see Attachable
	 * @param constraint The constraint to add.
	 */

	public void addConstraint(final Constraint constraint)
	{
		nativeAddConstraint(getHandle(), constraint);
	}

	/**
	 * <p>
	 * Removes a previously added axis.
	 * </p>
	 * <p>
	 * The axis will also be detached from the chart
	 * </p>
	 * @see Attachable
	 * @param axis The axis to remove.
	 */

	public void removeAxis(final Axis axis)
	{
		nativeRemoveAxis(getHandle(), axis);
	}

	/**
	 * <p>
	 * Removes a previously added series.
	 * </p>
	 * <p>
	 * The series will also be detached from the chart
	 * </p>
	 * @see Attachable
	 * @param series The series to remove.
	 */

	public void removeSeries(final Series series)
	{
		nativeRemoveSeries(getHandle(), series);
	}

	/**
	 * <p>
	 * Removes a previously added decoration
	 * </p>
	 * <p>
	 * The decoration will also be detached from the chart
	 * </p>
	 * @see Attachable
	 * @param decoration The decoration to remove.
	 */

	public void removeDecoration(final Decoration decoration)
	{
		nativeRemoveDecoration(getHandle(), decoration);
	}

	/**
	 * <p>
	 * Removes a previously added constraint
	 * </p>
	 * <p>
	 * The constraint will also be detached from the chart
	 * </p>
	 * @see Attachable
	 * @param constraint The constraint to remove.
	 */

	public void removeConstraint(final Constraint constraint)
	{
		nativeRemoveConstraint(getHandle(), constraint);
	}

	/**
	 * <p>
	 * Attaches an animation, it will be automatically unattached when it
	 * completes or is cancelled.
	 * </p>
	 * @see Attachable
	 * @param animation The animation to add.
	 */

	public void applyAnimation(final Animation animation)
	{
		nativeApplyAnimation(getHandle(), animation);
	}

	/**
	 * <p>
	 * Load new data
	 * </p>
	 * <p>
	 * Calling this method is optional (it will be called by update)
	 * </p>
	 */

	public void preUpdate()
	{
		nativePreUpdate(getHandle());
	}

	/**
	 * <p>
	 * Synchronize changed properties with internal state
	 * </p>
	 * <p>
	 * A valid size must be set before calling this method
	 * </p>
	 * @return The result.
	 */

	public boolean update()
	{
		return nativeUpdate(getHandle());
	}

	/**
	 * <p>
	 * Prepare OpenGL context for rendering
	 * </p>
	 * <p>
	 * Must be called from a thread which has the correct OpenGL context.
	 * </p>
	 * <p>
	 * Calling this method is optional (it will be called by render)
	 * </p>
	 */

	public void preRender()
	{
		nativePreRender(getHandle());
	}

	/**
	 * <p>
	 * Must be called from a thread which has the correct OpenGL context.
	 * </p>
	 */

	public void render()
	{
		nativeRender(getHandle());
	}

	/**
	 * <p>
	 * Render a partial region, at a given scale.
	 * </p>
	 * <p>
	 * Must be called from a thread which has the correct OpenGL context.
	 * </p>
	 * @param position Region top left corner
	 * @param size Region size
	 * @param scale Scale factor
	 */

	public void renderRegion(final Point position, final Size size, final double scale)
	{
		nativeRenderRegion(getHandle(), position, size, scale);
	}

	/**
	 * <p>
	 * Disposes of graphical memory associated with the chart (this will happen
	 * automatically when the chart is deallocated, but this method is provided
	 * for cases where deallocation is non-deterministic (eg Java).
	 * </p>
	 * <p>
	 * Must be called from a thread which has the correct OpenGL context.
	 * </p>
	 */

	public void dispose()
	{
		nativeDispose(getHandle());
	}

	/**
	 * <p>
	 * Handle interactions (touch movement).
	 * </p>
	 * <p>
	 * The next pan/zoom value are calculated from the position and previous
	 * position of all active touches.
	 * </p>
	 * @param touches Input touches.
	 */

	public void handleTouches(final List<Touch> touches)
	{
		nativeHandleTouches(getHandle(), touches);
	}

	// need this to prevent default constructor in base classes
	/*package*/ Chart(boolean dummy)
	{
		super(dummy);
	}

	protected void onFinalize()
	{
		nativeDestroy(getHandle());
	}

	private final native long nativeCreate();
	private final native void nativeDestroy(long ptr);
	private final native Object nativeGetTitle(long ptr);
	private final native void nativeSetTitle(long ptr, Object value);
	private final native Object nativeGetBackgroundColor(long ptr);
	private final native void nativeSetBackgroundColor(long ptr, Object value);
	private final native Object nativeGetFillColor(long ptr);
	private final native void nativeSetFillColor(long ptr, Object value);
	private final native Object nativeGetMargin(long ptr);
	private final native void nativeSetMargin(long ptr, Object value);
	private final native Object nativeGetAxisList(long ptr);
	private final native Object nativeGetSeriesList(long ptr);
	private final native Object nativeGetDecorationList(long ptr);
	private final native Object nativeGetConstraintList(long ptr);
	private final native Object nativeGetActiveAnimationList(long ptr);
	private final native Object nativeGetLastTouches(long ptr);
	private final native Object nativeGetSize(long ptr);
	private final native double nativeGetContentScaleFactor(long ptr);
	private final native Object nativeGetResizeMode(long ptr);
	private final native void nativeSetResizeMode(long ptr, Object value);
	private final native Object nativeGetTransform(long ptr);
	private final native void nativeSetTransform(long ptr, Object value);
	private final native void nativeResize(long ptr, Object size, double contentScaleFactor);
	private final native void nativeRelayout(long ptr);
	private final native void nativeAddAxis(long ptr, Object axis);
	private final native void nativeAddSeries(long ptr, Object series);
	private final native void nativeAddDecoration(long ptr, Object decoration);
	private final native void nativeAddConstraint(long ptr, Object constraint);
	private final native void nativeRemoveAxis(long ptr, Object axis);
	private final native void nativeRemoveSeries(long ptr, Object series);
	private final native void nativeRemoveDecoration(long ptr, Object decoration);
	private final native void nativeRemoveConstraint(long ptr, Object constraint);
	private final native void nativeApplyAnimation(long ptr, Object animation);
	private final native void nativePreUpdate(long ptr);
	private final native boolean nativeUpdate(long ptr);
	private final native void nativePreRender(long ptr);
	private final native void nativeRender(long ptr);
	private final native void nativeRenderRegion(long ptr, Object position, Object size, double scale);
	private final native void nativeDispose(long ptr);
	private final native void nativeHandleTouches(long ptr, Object touches);
}
