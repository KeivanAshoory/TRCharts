/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Combines a text value and its visual style.
 * </p>
 * <p>
 * <b>WARNING:</b> This is an automatically generated wrapper around a
 * native object; overriding methods will not work as expected.
 * </p>
 */

@SuppressWarnings("all")
public class Label extends Drawable
{
	/**
	 * Default constructor
	 */

	public Label()
	{
		this(true);
		setHandle(nativeCreate());
	}

	/**
	 * Get the label text.
	 * @return The current label text.
	 */

	public String getText()
	{
		return nativeGetText(getHandle());
	}

	/**
	 * Set the label text.
	 * @param value The new label text.
	 */

	public void setText(final String value)
	{
		nativeSetText(getHandle(), value);
	}

	/**
	 * Get the label color.
	 * @return The current label color.
	 */

	public Color getColor()
	{
		return (Color)nativeGetColor(getHandle());
	}

	/**
	 * Set the label color.
	 * @param value The new label color.
	 */

	public void setColor(final Color value)
	{
		nativeSetColor(getHandle(), value);
	}

	/**
	 * Get the label font.
	 * @return The current label font.
	 */

	public Font getFont()
	{
		return (Font)nativeGetFont(getHandle());
	}

	/**
	 * Set the label font.
	 * @param value The new label font.
	 */

	public void setFont(final Font value)
	{
		nativeSetFont(getHandle(), value);
	}

	/**
	 * Get the label margin.
	 * <p>
	 * Per-edge margin (can be used to offset the label from its draw area)
	 * </p>
	 * @return The current label margin.
	 */

	public Margin getMargin()
	{
		return (Margin)nativeGetMargin(getHandle());
	}

	/**
	 * Set the label margin.
	 * <p>
	 * Per-edge margin (can be used to offset the label from its draw area)
	 * </p>
	 * @param value The new label margin.
	 */

	public void setMargin(final Margin value)
	{
		nativeSetMargin(getHandle(), value);
	}

	/**
	 * Get the label size.
	 * <p>
	 * Size of the label in points, must be specified explicitly for correct
	 * layout
	 * </p>
	 * <p>
	 * <b>WARNING:</b> It was intended that a facility should be provided to
	 * automatically infer this from the font size and text content, but this
	 * was never implemented. As such, it is necessary to estimate (or
	 * externally calculate) the point size of the label.
	 * </p>
	 * @return The current label size.
	 */

	public Size getSize()
	{
		return (Size)nativeGetSize(getHandle());
	}

	/**
	 * Set the label size.
	 * <p>
	 * Size of the label in points, must be specified explicitly for correct
	 * layout
	 * </p>
	 * <p>
	 * <b>WARNING:</b> It was intended that a facility should be provided to
	 * automatically infer this from the font size and text content, but this
	 * was never implemented. As such, it is necessary to estimate (or
	 * externally calculate) the point size of the label.
	 * </p>
	 * @param value The new label size.
	 */

	public void setSize(final Size value)
	{
		nativeSetSize(getHandle(), value);
	}

	// need this to prevent default constructor in base classes
	/*package*/ Label(boolean dummy)
	{
		super(dummy);
	}

	protected void onFinalize()
	{
		nativeDestroy(getHandle());
	}

	private final native long nativeCreate();
	private final native void nativeDestroy(long ptr);
	private final native String nativeGetText(long ptr);
	private final native void nativeSetText(long ptr, String value);
	private final native Object nativeGetColor(long ptr);
	private final native void nativeSetColor(long ptr, Object value);
	private final native Object nativeGetFont(long ptr);
	private final native void nativeSetFont(long ptr, Object value);
	private final native Object nativeGetMargin(long ptr);
	private final native void nativeSetMargin(long ptr, Object value);
	private final native Object nativeGetSize(long ptr);
	private final native void nativeSetSize(long ptr, Object value);
}
