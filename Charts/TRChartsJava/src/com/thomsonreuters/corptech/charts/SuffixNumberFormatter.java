/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Extends BasicNumberFormatter, to also display the relevant metric suffix
 * (by default)
 * </p>
 * <p>
 * The formatter is configurable, and could be used with other bases and
 * suffixes; the first suffix will be used for a magnitude that exceeds
 * base^0, the second for a magnitude that exceeds base^1, and so on.
 * </p>
 * <p>
 * <b>WARNING:</b> This is an automatically generated wrapper around a
 * native object; overriding methods will not work as expected.
 * </p>
 */

@SuppressWarnings("all")
public class SuffixNumberFormatter extends BasicNumberFormatter
{
	/**
	 * Default constructor
	 */

	public SuffixNumberFormatter()
	{
		this(true);
		setHandle(nativeCreate());
	}

	/**
	 * Get the base.
	 * <p>
	 * Indicates the threshold base for selecting a suffix.
	 * </p>
	 * @return The current base.
	 */

	public long getBase()
	{
		return nativeGetBase(getHandle());
	}

	/**
	 * Set the base.
	 * <p>
	 * Indicates the threshold base for selecting a suffix.
	 * </p>
	 * @param value The new base.
	 */

	public void setBase(final long value)
	{
		nativeSetBase(getHandle(), value);
	}

	/**
	 * Get the suffixes.
	 * <p>
	 * Suffix for magnitudes that exceed each power of the base.
	 * </p>
	 * @return The current suffixes.
	 */

	public List<String> getSuffixes()
	{
		return (List<String>)nativeGetSuffixes(getHandle());
	}

	/**
	 * Set the suffixes.
	 * <p>
	 * Suffix for magnitudes that exceed each power of the base.
	 * </p>
	 * @param value The new suffixes.
	 */

	public void setSuffixes(final List<String> value)
	{
		nativeSetSuffixes(getHandle(), value);
	}

	/**
	 * <p>
	 * Returns the formatted number
	 * </p>
	 * @param value Number to format
	 * @return The result.
	 */

	public String formatNumber(final double value)
	{
		return nativeFormatNumber(getHandle(), value);
	}

	// need this to prevent default constructor in base classes
	/*package*/ SuffixNumberFormatter(boolean dummy)
	{
		super(dummy);
	}

	protected void onFinalize()
	{
		nativeDestroy(getHandle());
	}

	private final native long nativeCreate();
	private final native void nativeDestroy(long ptr);
	private final native long nativeGetBase(long ptr);
	private final native void nativeSetBase(long ptr, long value);
	private final native Object nativeGetSuffixes(long ptr);
	private final native void nativeSetSuffixes(long ptr, Object value);
	private final native String nativeFormatNumber(long ptr, double value);
}
