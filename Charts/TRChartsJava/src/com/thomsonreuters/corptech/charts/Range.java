/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * An inclusive range in the real number domain.
 * </p>
 * <p>
 * <b>NOTE:</b> This is a value class, when passing it to other library
 * methods it is always effectively copied.
 * </p>
 */

@SuppressWarnings("all")
public class Range
{
	private double min;
	private double max;

	/**
	 * Initialize a Range with default values.
	 */
	public Range()
	{
	}

	/**
	 * Initialize a Range with provided values.
	 *
	 * @param min The min value.
	 * @param max The max value.
	 */

	public Range(double min, double max)
	{
		this.min = min;
		this.max = max;
	}

	/**
	 * Get the min value.
	 * @return The current min value.
	 */

	public final double getMin()
	{
		return this.min;
	}

	/**
	 * Set the min value.
	 * @param value The new min value.
	 */

	public final void setMin(final double value)
	{
		this.min = value;
	}

	/**
	 * Get the max value.
	 * @return The current max value.
	 */

	public final double getMax()
	{
		return this.max;
	}

	/**
	 * Set the max value.
	 * @param value The new max value.
	 */

	public final void setMax(final double value)
	{
		this.max = value;
	}

	@Override
	public String toString()
	{
		return "Range {" +
				"min=" + min + ", " +
				"max=" + max +
				"}";
	}

	@Override
	public boolean equals(final Object other)
	{
		if(this == other) return true;
		if(!(other instanceof Range)) return false;

		final Range tmp = (Range)other;

		if(!(this.min == tmp.min)) return false;
		if(!(this.max == tmp.max)) return false;

		return true;
	}

	@Override
	public int hashCode()
	{
		int result = 7;

		result = 31 * result + ((Double)min).hashCode();
		result = 31 * result + ((Double)max).hashCode();

		return result;
	}

	/**
	 * <p>
	 * Return the length of the range (max - min)
	 * </p>
	 * @param range Input range
	 * @return The result.
	 */

	public static double length(final Range range)
	{
		return nativeLength(range);
	}

	/**
	 * <p>
	 * Returns true if the min value is less than or equal to max value
	 * </p>
	 * @param range Input range
	 * @return The result.
	 */

	public static boolean valid(final Range range)
	{
		return nativeValid(range);
	}

	/**
	 * <p>
	 * Returns true if the min value is less than max value
	 * </p>
	 * @param range Input range
	 * @return The result.
	 */

	public static boolean positive(final Range range)
	{
		return nativePositive(range);
	}

	/**
	 * <p>
	 * Returns the enclosing range of the arguments
	 * </p>
	 * <p>
	 * Both ranges must be valid, else behaviour is not defined.
	 * </p>
	 * @param range Input range
	 * @param otherRange Input range
	 * @return The result.
	 */

	public static Range merge(final Range range, final Range otherRange)
	{
		return (Range)nativeMerge(range, otherRange);
	}

	/**
	 * <p>
	 * Clamps the input range so that it's min and max values fall within the
	 * clamp range.
	 * </p>
	 * <p>
	 * Both ranges must be valid, else behaviour is not defined.
	 * </p>
	 * @param range Input range
	 * @param withinRange Clamp range
	 * @return The result.
	 */

	public static Range clamp(final Range range, final Range withinRange)
	{
		return (Range)nativeClamp(range, withinRange);
	}

	/**
	 * <p>
	 * Returns true if the ranges overlap (intersect)
	 * </p>
	 * <p>
	 * Both ranges must be valid, else behaviour is not defined.
	 * </p>
	 * @param range Input range
	 * @param otherRange Input range
	 * @return The result.
	 */

	public static boolean overlap(final Range range, final Range otherRange)
	{
		return nativeOverlap(range, otherRange);
	}

	/**
	 * <p>
	 * Returns the range [0,0]
	 * </p>
	 * @return The result.
	 */

	public static Range identity()
	{
		return (Range)nativeIdentity();
	}


	private static final native double nativeLength(Object range);
	private static final native boolean nativeValid(Object range);
	private static final native boolean nativePositive(Object range);
	private static final native Object nativeMerge(Object range, Object otherRange);
	private static final native Object nativeClamp(Object range, Object withinRange);
	private static final native boolean nativeOverlap(Object range, Object otherRange);
	private static final native Object nativeIdentity();
}
