/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Represents a line style
 * </p>
 * <p>
 * <b>NOTE:</b> This is a value class, when passing it to other library
 * methods it is always effectively copied.
 * </p>
 */

@SuppressWarnings("all")
public class LineStyle
{
	private double thickness;
	private LineMode mode;

	/**
	 * Initialize a LineStyle with default values.
	 */
	public LineStyle()
	{
	}

	/**
	 * Initialize a LineStyle with provided values.
	 *
	 * @param thickness The line thickness.
	 * @param mode The line mode.
	 */

	public LineStyle(double thickness, LineMode mode)
	{
		this.thickness = thickness;
		this.mode = mode;
	}

	/**
	 * Get the line thickness.
	 * @return The current line thickness.
	 */

	public final double getThickness()
	{
		return this.thickness;
	}

	/**
	 * Set the line thickness.
	 * @param value The new line thickness.
	 */

	public final void setThickness(final double value)
	{
		this.thickness = value;
	}

	/**
	 * Get the line mode.
	 * @return The current line mode.
	 */

	public final LineMode getMode()
	{
		return this.mode;
	}

	/**
	 * Set the line mode.
	 * @param value The new line mode.
	 */

	public final void setMode(final LineMode value)
	{
		this.mode = value;
	}

	@Override
	public String toString()
	{
		return "LineStyle {" +
				"thickness=" + thickness + ", " +
				"mode=" + mode +
				"}";
	}

	@Override
	public boolean equals(final Object other)
	{
		if(this == other) return true;
		if(!(other instanceof LineStyle)) return false;

		final LineStyle tmp = (LineStyle)other;

		if(!(this.thickness == tmp.thickness)) return false;
		if(!((this.mode == null) ? (tmp.mode == null) : this.mode.equals(tmp.mode))) return false;

		return true;
	}

	@Override
	public int hashCode()
	{
		int result = 7;

		result = 31 * result + ((Double)thickness).hashCode();
		result = 31 * result + ((this.mode == null) ? 0 : this.mode.hashCode());

		return result;
	}

}
