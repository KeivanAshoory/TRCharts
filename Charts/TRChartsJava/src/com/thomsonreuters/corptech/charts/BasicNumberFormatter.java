/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Format a number using a set number of decimal spaces (using the platform
 * current locale)
 * </p>
 * <p>
 * <b>WARNING:</b> This is an automatically generated wrapper around a
 * native object; overriding methods will not work as expected.
 * </p>
 */

@SuppressWarnings("all")
public class BasicNumberFormatter extends BaseObject implements NumberFormatter
{
	/**
	 * Default constructor
	 */

	public BasicNumberFormatter()
	{
		this(true);
		setHandle(nativeCreate());
	}

	/**
	 * Get the number of decimal places to display.
	 * @return The current number of decimal places to display.
	 */

	public long getDecimalPlaces()
	{
		return nativeGetDecimalPlaces(getHandle());
	}

	/**
	 * Set the number of decimal places to display.
	 * @param value The new number of decimal places to display.
	 */

	public void setDecimalPlaces(final long value)
	{
		nativeSetDecimalPlaces(getHandle(), value);
	}

	/**
	 * <p>
	 * Returns the formatted number
	 * </p>
	 * @param value Number to format
	 * @return The result.
	 */

	public String formatNumber(final double value)
	{
		return nativeFormatNumber(getHandle(), value);
	}

	// need this to prevent default constructor in base classes
	/*package*/ BasicNumberFormatter(boolean dummy)
	{
		super(dummy);
	}

	protected void onFinalize()
	{
		nativeDestroy(getHandle());
	}

	private final native long nativeCreate();
	private final native void nativeDestroy(long ptr);
	private final native long nativeGetDecimalPlaces(long ptr);
	private final native void nativeSetDecimalPlaces(long ptr, long value);
	private final native String nativeFormatNumber(long ptr, double value);
}
