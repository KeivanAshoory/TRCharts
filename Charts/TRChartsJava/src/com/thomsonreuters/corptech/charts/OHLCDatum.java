/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * A continuous datum holding open/high/low/close values.
 * </p>
 * <p>
 * <b>NOTE:</b> This is a value class, when passing it to other library
 * methods it is always effectively copied.
 * </p>
 */

@SuppressWarnings("all")
public class OHLCDatum extends ContinuousDatum
{
	private OHLC ordinate;

	/**
	 * Initialize a OHLCDatum with default values.
	 */
	public OHLCDatum()
	{
	}

	/**
	 * Initialize a OHLCDatum with provided values.
	 *
	 * @param abscissa The abscissa value.
	 * @param ordinate The ordinate value.
	 */

	public OHLCDatum(double abscissa, OHLC ordinate)
	{
		super(abscissa);
		this.ordinate = ordinate;
	}

	/**
	 * Get the ordinate value.
	 * <p>
	 * The dependent variable (usually)
	 * </p>
	 * @return The current ordinate value.
	 */

	public final OHLC getOrdinate()
	{
		return this.ordinate;
	}

	/**
	 * Set the ordinate value.
	 * <p>
	 * The dependent variable (usually)
	 * </p>
	 * @param value The new ordinate value.
	 */

	public final void setOrdinate(final OHLC value)
	{
		this.ordinate = value;
	}

	@Override
	public String toString()
	{
		return "OHLCDatum {" +
				"super=" + super.toString() + ", " +
				"ordinate=" + ordinate +
				"}";
	}

	@Override
	public boolean equals(final Object other)
	{
		if(this == other) return true;
		if(!(super.equals(this))) return false;
		if(!(other instanceof OHLCDatum)) return false;

		final OHLCDatum tmp = (OHLCDatum)other;

		if(!((this.ordinate == null) ? (tmp.ordinate == null) : this.ordinate.equals(tmp.ordinate))) return false;

		return true;
	}

	@Override
	public int hashCode()
	{
		int result = super.hashCode();

		result = 31 * result + ((this.ordinate == null) ? 0 : this.ordinate.hashCode());

		return result;
	}

}
