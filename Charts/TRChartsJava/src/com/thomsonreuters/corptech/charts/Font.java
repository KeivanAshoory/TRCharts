/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Represents a font
 * </p>
 * <p>
 * Resolving the name to a usable font is platform-dependent.
 * </p>
 * <p>
 * The font is looked up using
 * com.thomsonreuters.corptech.tr3dutils.TextFactory
 * </p>
 * <p>
 * <b>NOTE:</b> This is a value class, when passing it to other library
 * methods it is always effectively copied.
 * </p>
 */

@SuppressWarnings("all")
public class Font
{
	private String name;
	private long size;
	private FontHint hint;

	/**
	 * Initialize a Font with default values.
	 */
	public Font()
	{
	}

	/**
	 * Initialize a Font with provided values.
	 *
	 * @param name The font name.
	 * @param size The font size.
	 * @param hint The font rendering hint.
	 */

	public Font(String name, long size, FontHint hint)
	{
		this.name = name;
		this.size = size;
		this.hint = hint;
	}

	/**
	 * Get the font name.
	 * @return The current font name.
	 */

	public final String getName()
	{
		return this.name;
	}

	/**
	 * Set the font name.
	 * @param value The new font name.
	 */

	public final void setName(final String value)
	{
		this.name = value;
	}

	/**
	 * Get the font size.
	 * <p>
	 * Size of the font, in platform specific units (more detail?)
	 * </p>
	 * @return The current font size.
	 */

	public final long getSize()
	{
		return this.size;
	}

	/**
	 * Set the font size.
	 * <p>
	 * Size of the font, in platform specific units (more detail?)
	 * </p>
	 * @param value The new font size.
	 */

	public final void setSize(final long value)
	{
		this.size = value;
	}

	/**
	 * Get the font rendering hint.
	 * <p>
	 * This value is currently ignored.
	 * </p>
	 * @return The current font rendering hint.
	 */

	public final FontHint getHint()
	{
		return this.hint;
	}

	/**
	 * Set the font rendering hint.
	 * <p>
	 * This value is currently ignored.
	 * </p>
	 * @param value The new font rendering hint.
	 */

	public final void setHint(final FontHint value)
	{
		this.hint = value;
	}

	@Override
	public String toString()
	{
		return "Font {" +
				"name=" + name + ", " +
				"size=" + size + ", " +
				"hint=" + hint +
				"}";
	}

	@Override
	public boolean equals(final Object other)
	{
		if(this == other) return true;
		if(!(other instanceof Font)) return false;

		final Font tmp = (Font)other;

		if(!((this.name == null) ? (tmp.name == null) : this.name.equals(tmp.name))) return false;
		if(!(this.size == tmp.size)) return false;
		if(!((this.hint == null) ? (tmp.hint == null) : this.hint.equals(tmp.hint))) return false;

		return true;
	}

	@Override
	public int hashCode()
	{
		int result = 7;

		result = 31 * result + ((this.name == null) ? 0 : this.name.hashCode());
		result = 31 * result + ((Long)size).hashCode();
		result = 31 * result + ((this.hint == null) ? 0 : this.hint.hashCode());

		return result;
	}

}
