/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * A screen-space transform
 * </p>
 * <p>
 * <b>NOTE:</b> This is a value class, when passing it to other library
 * methods it is always effectively copied.
 * </p>
 */

@SuppressWarnings("all")
public class Transform
{
	private Point offset;
	private Point scale;

	/**
	 * Initialize a Transform with default values.
	 */
	public Transform()
	{
	}

	/**
	 * Initialize a Transform with provided values.
	 *
	 * @param offset The offset.
	 * @param scale The scale.
	 */

	public Transform(Point offset, Point scale)
	{
		this.offset = offset;
		this.scale = scale;
	}

	/**
	 * Get the offset.
	 * @return The current offset.
	 */

	public final Point getOffset()
	{
		return this.offset;
	}

	/**
	 * Set the offset.
	 * @param value The new offset.
	 */

	public final void setOffset(final Point value)
	{
		this.offset = value;
	}

	/**
	 * Get the scale.
	 * @return The current scale.
	 */

	public final Point getScale()
	{
		return this.scale;
	}

	/**
	 * Set the scale.
	 * @param value The new scale.
	 */

	public final void setScale(final Point value)
	{
		this.scale = value;
	}

	@Override
	public String toString()
	{
		return "Transform {" +
				"offset=" + offset + ", " +
				"scale=" + scale +
				"}";
	}

	@Override
	public boolean equals(final Object other)
	{
		if(this == other) return true;
		if(!(other instanceof Transform)) return false;

		final Transform tmp = (Transform)other;

		if(!((this.offset == null) ? (tmp.offset == null) : this.offset.equals(tmp.offset))) return false;
		if(!((this.scale == null) ? (tmp.scale == null) : this.scale.equals(tmp.scale))) return false;

		return true;
	}

	@Override
	public int hashCode()
	{
		int result = 7;

		result = 31 * result + ((this.offset == null) ? 0 : this.offset.hashCode());
		result = 31 * result + ((this.scale == null) ? 0 : this.scale.hashCode());

		return result;
	}

	/**
	 * <p>
	 * Concatenate (multiply) two transforms
	 * </p>
	 * @param transform First transform
	 * @param otherTransform Second transform
	 * @return The result.
	 */

	public static Transform concatenate(final Transform transform, final Transform otherTransform)
	{
		return (Transform)nativeConcatenate(transform, otherTransform);
	}


	private static final native Object nativeConcatenate(Object transform, Object otherTransform);
}
