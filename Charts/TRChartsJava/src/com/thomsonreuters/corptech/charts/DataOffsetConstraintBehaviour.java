/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Constrain the data scale for a given set of axes, such that the axis
 * cannot be panned further than the total data range.
 * </p>
 * <p>
 * <b>WARNING:</b> This is an automatically generated wrapper around a
 * native object; overriding methods will not work as expected.
 * </p>
 */

@SuppressWarnings("all")
public class DataOffsetConstraintBehaviour extends BaseObject implements ConstraintBehaviour
{
	/**
	 * Default constructor
	 */

	public DataOffsetConstraintBehaviour()
	{
		this(true);
		setHandle(nativeCreate());
	}

	/**
	 * Get the axes.
	 * <p>
	 * Axes to target
	 * </p>
	 * @return The current axes.
	 */

	public List<Axis> getAxes()
	{
		return (List<Axis>)nativeGetAxes(getHandle());
	}

	/**
	 * Set the axes.
	 * <p>
	 * Axes to target
	 * </p>
	 * @param value The new axes.
	 */

	public void setAxes(final List<Axis> value)
	{
		nativeSetAxes(getHandle(), value);
	}

	/**
	 * Get the edges.
	 * <p>
	 * Edges to target
	 * </p>
	 * @return The current edges.
	 */

	public List<Edge> getEdges()
	{
		return (List<Edge>)nativeGetEdges(getHandle());
	}

	/**
	 * Set the edges.
	 * <p>
	 * Edges to target
	 * </p>
	 * @param value The new edges.
	 */

	public void setEdges(final List<Edge> value)
	{
		nativeSetEdges(getHandle(), value);
	}

	/**
	 * Get the multiplier.
	 * <p>
	 * Mix factor between the current value and the fully constrained value (may
	 * be used to visually animate the constraint).
	 * </p>
	 * @return The current multiplier.
	 */

	public double getMultiplier()
	{
		return nativeGetMultiplier(getHandle());
	}

	/**
	 * Set the multiplier.
	 * <p>
	 * Mix factor between the current value and the fully constrained value (may
	 * be used to visually animate the constraint).
	 * </p>
	 * @param value The new multiplier.
	 */

	public void setMultiplier(final double value)
	{
		nativeSetMultiplier(getHandle(), value);
	}

	/**
	 * @param chart Current chart
	 * @param size Screen-space size of the chart
	 * @param transform Screen-space transform
	 * @return The result.
	 */

	public Transform apply(final Chart chart, final Size size, final Transform transform)
	{
		return (Transform)nativeApply(getHandle(), chart, size, transform);
	}

	// need this to prevent default constructor in base classes
	/*package*/ DataOffsetConstraintBehaviour(boolean dummy)
	{
		super(dummy);
	}

	protected void onFinalize()
	{
		nativeDestroy(getHandle());
	}

	private final native long nativeCreate();
	private final native void nativeDestroy(long ptr);
	private final native Object nativeGetAxes(long ptr);
	private final native void nativeSetAxes(long ptr, Object value);
	private final native Object nativeGetEdges(long ptr);
	private final native void nativeSetEdges(long ptr, Object value);
	private final native double nativeGetMultiplier(long ptr);
	private final native void nativeSetMultiplier(long ptr, double value);
	private final native Object nativeApply(long ptr, Object chart, Object size, Object transform);
}
