/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * A series that displays scalar datums as disconnected points.
 * </p>
 * <p>
 * <b>WARNING:</b> This is an automatically generated wrapper around a
 * native object; overriding methods will not work as expected.
 * </p>
 */

@SuppressWarnings("all")
public class PointSeries extends ContinuousSeries<ScalarDatum>
{
	/**
	 * Default constructor
	 */

	public PointSeries()
	{
		this(true);
		setHandle(nativeCreate());
	}

	/**
	 * Get the pointStyle.
	 * <p>
	 * The point style
	 * </p>
	 * @return The current pointStyle.
	 */

	public PointStyle getPointStyle()
	{
		return (PointStyle)nativeGetPointStyle(getHandle());
	}

	/**
	 * Set the pointStyle.
	 * <p>
	 * The point style
	 * </p>
	 * @param value The new pointStyle.
	 */

	public void setPointStyle(final PointStyle value)
	{
		nativeSetPointStyle(getHandle(), value);
	}

	/**
	 * Get the data source.
	 * @return The current data source.
	 */

	public ContinuousDataSource<ScalarDatum> getDataSource()
	{
		return (ContinuousDataSource<ScalarDatum>)nativeGetDataSource(getHandle());
	}

	/**
	 * Set the data source.
	 * @param value The new data source.
	 */

	public void setDataSource(final ContinuousDataSource<ScalarDatum> value)
	{
		nativeSetDataSource(getHandle(), value);
	}

	/**
	 * <p>
	 * Get the datum with the provided index.
	 * </p>
	 * @param index Data source index
	 * @return The result.
	 */

	public ScalarDatum getDatum(final long index)
	{
		return (ScalarDatum)nativeGetDatum(getHandle(), index);
	}

	/**
	 * <p>
	 * Interpolate the datum value at the provided abscissa value.
	 * </p>
	 * <p>
	 * The interpolated value is dependent on the series type.
	 * </p>
	 * @param abscissa Abscissa value
	 * @return The result.
	 */

	public ScalarDatum interpolateDatum(final double abscissa)
	{
		return (ScalarDatum)nativeInterpolateDatum(getHandle(), abscissa);
	}

	// need this to prevent default constructor in base classes
	/*package*/ PointSeries(boolean dummy)
	{
		super(dummy);
	}

	protected void onFinalize()
	{
		nativeDestroy(getHandle());
	}

	private final native long nativeCreate();
	private final native void nativeDestroy(long ptr);
	private final native Object nativeGetPointStyle(long ptr);
	private final native void nativeSetPointStyle(long ptr, Object value);
	private final native Object nativeGetDataSource(long ptr);
	private final native void nativeSetDataSource(long ptr, Object value);
	private final native Object nativeGetDatum(long ptr, long index);
	private final native Object nativeInterpolateDatum(long ptr, double abscissa);
}
