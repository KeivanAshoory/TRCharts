/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Base axis class, see concrete implementations for more details
 * </p>
 * <p>
 * A chart can hae a number of axes, each is assigned a given edge. If a
 * chart has multiple axes on a given edge, they will be stacked.
 * </p>
 * <p>
 * This base class provides configuration for the generalized display of an
 * axis. An axis has a primary line (drawn on the selected edge), gridlines
 * (drawn inside the data area and perpendicular to the edge) and ticks
 * (drawn on the outside of the data area and perpendicular to the edge).
 * </p>
 * <p>
 * <b>WARNING:</b> It is important to always set the tickLabelMaxSize field
 * for an axis, the maximum size is not calculated based on the text width
 * </p>
 * <p>
 * <b>WARNING:</b> This is an automatically generated wrapper around a
 * native object; overriding methods will not work as expected.
 * </p>
 */

@SuppressWarnings("all")
public abstract class Axis extends ChartElement
{
	/**
	 * Default constructor
	 */

	private Axis()
	{
		this(true);
	}

	/**
	 * Get the axis edge.
	 * <p>
	 * Defines which edge of the chart the axis is placed on
	 * </p>
	 * @return The current axis edge.
	 */

	public Edge getEdge()
	{
		return (Edge)nativeGetEdge(getHandle());
	}

	/**
	 * Set the axis edge.
	 * <p>
	 * Defines which edge of the chart the axis is placed on
	 * </p>
	 * @param value The new axis edge.
	 */

	public void setEdge(final Edge value)
	{
		nativeSetEdge(getHandle(), value);
	}

	/**
	 * Get the axis title.
	 * <p>
	 * Text label displayed on the axis, the orientation and display of the
	 * label is based on the edge
	 * </p>
	 * @return The current axis title.
	 */

	public Label getTitle()
	{
		return (Label)nativeGetTitle(getHandle());
	}

	/**
	 * Set the axis title.
	 * <p>
	 * Text label displayed on the axis, the orientation and display of the
	 * label is based on the edge
	 * </p>
	 * @param value The new axis title.
	 */

	public void setTitle(final Label value)
	{
		nativeSetTitle(getHandle(), value);
	}

	/**
	 * Get the axis color.
	 * <p>
	 * Color for the label and main line of the axis
	 * </p>
	 * @return The current axis color.
	 */

	public Color getAxisColor()
	{
		return (Color)nativeGetAxisColor(getHandle());
	}

	/**
	 * Set the axis color.
	 * <p>
	 * Color for the label and main line of the axis
	 * </p>
	 * @param value The new axis color.
	 */

	public void setAxisColor(final Color value)
	{
		nativeSetAxisColor(getHandle(), value);
	}

	/**
	 * Get the axis line style.
	 * <p>
	 * The line style used for the main line of the axis
	 * </p>
	 * @return The current axis line style.
	 */

	public LineStyle getAxisLineStyle()
	{
		return (LineStyle)nativeGetAxisLineStyle(getHandle());
	}

	/**
	 * Set the axis line style.
	 * <p>
	 * The line style used for the main line of the axis
	 * </p>
	 * @param value The new axis line style.
	 */

	public void setAxisLineStyle(final LineStyle value)
	{
		nativeSetAxisLineStyle(getHandle(), value);
	}

	/**
	 * Get the grid visibility flag.
	 * <p>
	 * If true, a grid will be drawn perpendicular to the axis, at the tick
	 * frequency
	 * </p>
	 * @return The current grid visibility flag.
	 */

	public boolean isGridVisible()
	{
		return nativeIsGridVisible(getHandle());
	}

	/**
	 * Set the grid visibility flag.
	 * <p>
	 * If true, a grid will be drawn perpendicular to the axis, at the tick
	 * frequency
	 * </p>
	 * @param value The new grid visibility flag.
	 */

	public void setGridVisible(final boolean value)
	{
		nativeSetGridVisible(getHandle(), value);
	}

	/**
	 * Get the grid color.
	 * <p>
	 * Color for the grid lines (if enabled)
	 * </p>
	 * @return The current grid color.
	 */

	public Color getGridColor()
	{
		return (Color)nativeGetGridColor(getHandle());
	}

	/**
	 * Set the grid color.
	 * <p>
	 * Color for the grid lines (if enabled)
	 * </p>
	 * @param value The new grid color.
	 */

	public void setGridColor(final Color value)
	{
		nativeSetGridColor(getHandle(), value);
	}

	/**
	 * Get the grid line style.
	 * <p>
	 * Line style for the grid lines (if enabled)
	 * </p>
	 * @return The current grid line style.
	 */

	public LineStyle getGridLineStyle()
	{
		return (LineStyle)nativeGetGridLineStyle(getHandle());
	}

	/**
	 * Set the grid line style.
	 * <p>
	 * Line style for the grid lines (if enabled)
	 * </p>
	 * @param value The new grid line style.
	 */

	public void setGridLineStyle(final LineStyle value)
	{
		nativeSetGridLineStyle(getHandle(), value);
	}

	/**
	 * Get the tick color.
	 * <p>
	 * Color used for tick marks and labels
	 * </p>
	 * @return The current tick color.
	 */

	public Color getTickColor()
	{
		return (Color)nativeGetTickColor(getHandle());
	}

	/**
	 * Set the tick color.
	 * <p>
	 * Color used for tick marks and labels
	 * </p>
	 * @param value The new tick color.
	 */

	public void setTickColor(final Color value)
	{
		nativeSetTickColor(getHandle(), value);
	}

	/**
	 * Get the tick line style.
	 * <p>
	 * Line style used for the tick marks
	 * </p>
	 * @return The current tick line style.
	 */

	public LineStyle getTickLineStyle()
	{
		return (LineStyle)nativeGetTickLineStyle(getHandle());
	}

	/**
	 * Set the tick line style.
	 * <p>
	 * Line style used for the tick marks
	 * </p>
	 * @param value The new tick line style.
	 */

	public void setTickLineStyle(final LineStyle value)
	{
		nativeSetTickLineStyle(getHandle(), value);
	}

	/**
	 * Get the tick offset.
	 * <p>
	 * Point offset of the ticks relative to the edge (positive number moves the
	 * tick away from the edge)
	 * </p>
	 * @return The current tick offset.
	 */

	public double getTickOffset()
	{
		return nativeGetTickOffset(getHandle());
	}

	/**
	 * Set the tick offset.
	 * <p>
	 * Point offset of the ticks relative to the edge (positive number moves the
	 * tick away from the edge)
	 * </p>
	 * @param value The new tick offset.
	 */

	public void setTickOffset(final double value)
	{
		nativeSetTickOffset(getHandle(), value);
	}

	/**
	 * Get the tick size.
	 * @return The current tick size.
	 */

	public double getTickSize()
	{
		return nativeGetTickSize(getHandle());
	}

	/**
	 * Set the tick size.
	 * @param value The new tick size.
	 */

	public void setTickSize(final double value)
	{
		nativeSetTickSize(getHandle(), value);
	}

	/**
	 * Get the tick label color.
	 * <p>
	 * Color used for the tick label
	 * </p>
	 * @return The current tick label color.
	 */

	public Color getTickLabelColor()
	{
		return (Color)nativeGetTickLabelColor(getHandle());
	}

	/**
	 * Set the tick label color.
	 * <p>
	 * Color used for the tick label
	 * </p>
	 * @param value The new tick label color.
	 */

	public void setTickLabelColor(final Color value)
	{
		nativeSetTickLabelColor(getHandle(), value);
	}

	/**
	 * Get the tick label font.
	 * <p>
	 * Font used for the tick label
	 * </p>
	 * @return The current tick label font.
	 */

	public Font getTickLabelFont()
	{
		return (Font)nativeGetTickLabelFont(getHandle());
	}

	/**
	 * Set the tick label font.
	 * <p>
	 * Font used for the tick label
	 * </p>
	 * @param value The new tick label font.
	 */

	public void setTickLabelFont(final Font value)
	{
		nativeSetTickLabelFont(getHandle(), value);
	}

	/**
	 * Get the tick label maximum size.
	 * <p>
	 * Maximum size of the tick label (must be specified size it influences the
	 * chart layout)
	 * </p>
	 * @return The current tick label maximum size.
	 */

	public double getTickLabelMaxSize()
	{
		return nativeGetTickLabelMaxSize(getHandle());
	}

	/**
	 * Set the tick label maximum size.
	 * <p>
	 * Maximum size of the tick label (must be specified size it influences the
	 * chart layout)
	 * </p>
	 * @param value The new tick label maximum size.
	 */

	public void setTickLabelMaxSize(final double value)
	{
		nativeSetTickLabelMaxSize(getHandle(), value);
	}

	/**
	 * Get the tick label offset.
	 * <p>
	 * Offset of the label from the tick mark (positive number moves the label
	 * away from the tick mark)
	 * </p>
	 * @return The current tick label offset.
	 */

	public double getTickLabelOffset()
	{
		return nativeGetTickLabelOffset(getHandle());
	}

	/**
	 * Set the tick label offset.
	 * <p>
	 * Offset of the label from the tick mark (positive number moves the label
	 * away from the tick mark)
	 * </p>
	 * @param value The new tick label offset.
	 */

	public void setTickLabelOffset(final double value)
	{
		nativeSetTickLabelOffset(getHandle(), value);
	}

	/**
	 * Get the current screen length.
	 * <p>
	 * Read-only property that indicates the total calculated screen length of
	 * the axis (perpendicular to edge)
	 * </p>
	 * @return The current current screen length.
	 */

	public double getScreenLength()
	{
		return nativeGetScreenLength(getHandle());
	}

	/**
	 * <p>
	 * Call to cause the axis to be laid out again on the next update call
	 * </p>
	 */

	public void relayout()
	{
		nativeRelayout(getHandle());
	}

	// need this to prevent default constructor in base classes
	/*package*/ Axis(boolean dummy)
	{
		super(dummy);
	}

	private final native Object nativeGetEdge(long ptr);
	private final native void nativeSetEdge(long ptr, Object value);
	private final native Object nativeGetTitle(long ptr);
	private final native void nativeSetTitle(long ptr, Object value);
	private final native Object nativeGetAxisColor(long ptr);
	private final native void nativeSetAxisColor(long ptr, Object value);
	private final native Object nativeGetAxisLineStyle(long ptr);
	private final native void nativeSetAxisLineStyle(long ptr, Object value);
	private final native boolean nativeIsGridVisible(long ptr);
	private final native void nativeSetGridVisible(long ptr, boolean value);
	private final native Object nativeGetGridColor(long ptr);
	private final native void nativeSetGridColor(long ptr, Object value);
	private final native Object nativeGetGridLineStyle(long ptr);
	private final native void nativeSetGridLineStyle(long ptr, Object value);
	private final native Object nativeGetTickColor(long ptr);
	private final native void nativeSetTickColor(long ptr, Object value);
	private final native Object nativeGetTickLineStyle(long ptr);
	private final native void nativeSetTickLineStyle(long ptr, Object value);
	private final native double nativeGetTickOffset(long ptr);
	private final native void nativeSetTickOffset(long ptr, double value);
	private final native double nativeGetTickSize(long ptr);
	private final native void nativeSetTickSize(long ptr, double value);
	private final native Object nativeGetTickLabelColor(long ptr);
	private final native void nativeSetTickLabelColor(long ptr, Object value);
	private final native Object nativeGetTickLabelFont(long ptr);
	private final native void nativeSetTickLabelFont(long ptr, Object value);
	private final native double nativeGetTickLabelMaxSize(long ptr);
	private final native void nativeSetTickLabelMaxSize(long ptr, double value);
	private final native double nativeGetTickLabelOffset(long ptr);
	private final native void nativeSetTickLabelOffset(long ptr, double value);
	private final native double nativeGetScreenLength(long ptr);
	private final native void nativeRelayout(long ptr);
}
