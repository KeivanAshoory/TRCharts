/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Represents a 2D point. (Used as a conceptual point and vector).
 * </p>
 * <p>
 * <b>NOTE:</b> This is a value class, when passing it to other library
 * methods it is always effectively copied.
 * </p>
 */

@SuppressWarnings("all")
public class Point
{
	private double x;
	private double y;

	/**
	 * Initialize a Point with default values.
	 */
	public Point()
	{
	}

	/**
	 * Initialize a Point with provided values.
	 *
	 * @param x The X value.
	 * @param y The Y value.
	 */

	public Point(double x, double y)
	{
		this.x = x;
		this.y = y;
	}

	/**
	 * Get the X value.
	 * @return The current X value.
	 */

	public final double getX()
	{
		return this.x;
	}

	/**
	 * Set the X value.
	 * @param value The new X value.
	 */

	public final void setX(final double value)
	{
		this.x = value;
	}

	/**
	 * Get the Y value.
	 * @return The current Y value.
	 */

	public final double getY()
	{
		return this.y;
	}

	/**
	 * Set the Y value.
	 * @param value The new Y value.
	 */

	public final void setY(final double value)
	{
		this.y = value;
	}

	@Override
	public String toString()
	{
		return "Point {" +
				"x=" + x + ", " +
				"y=" + y +
				"}";
	}

	@Override
	public boolean equals(final Object other)
	{
		if(this == other) return true;
		if(!(other instanceof Point)) return false;

		final Point tmp = (Point)other;

		if(!(this.x == tmp.x)) return false;
		if(!(this.y == tmp.y)) return false;

		return true;
	}

	@Override
	public int hashCode()
	{
		int result = 7;

		result = 31 * result + ((Double)x).hashCode();
		result = 31 * result + ((Double)y).hashCode();

		return result;
	}

	/**
	 * <p>
	 * Utility method to add two points (componentwise)
	 * </p>
	 * <p>
	 * Return value is (result.x = first.x + second.x, ...)
	 * </p>
	 * @param point First point
	 * @param otherPoint Second point
	 * @return The result.
	 */

	public static Point add(final Point point, final Point otherPoint)
	{
		return (Point)nativeAdd(point, otherPoint);
	}

	/**
	 * <p>
	 * Utility method to subtract two points (componentwise)
	 * </p>
	 * <p>
	 * Return value is (result.x = first.x - second.x, ...)
	 * </p>
	 * @param point First point
	 * @param otherPoint Second point
	 * @return The result.
	 */

	public static Point subtract(final Point point, final Point otherPoint)
	{
		return (Point)nativeSubtract(point, otherPoint);
	}

	/**
	 * <p>
	 * Utility method to multiply two points (componentwise)
	 * </p>
	 * <p>
	 * Return value is (result.x = first.x * second.x, ...)
	 * </p>
	 * @param point First point
	 * @param otherPoint Second point
	 * @return The result.
	 */

	public static Point multiply(final Point point, final Point otherPoint)
	{
		return (Point)nativeMultiply(point, otherPoint);
	}

	/**
	 * <p>
	 * Utility method to divide two points (componentwise)
	 * </p>
	 * <p>
	 * Return value is (result.x = first.x / second.x, ...)
	 * </p>
	 * @param point First point
	 * @param otherPoint Second point
	 * @return The result.
	 */

	public static Point divide(final Point point, final Point otherPoint)
	{
		return (Point)nativeDivide(point, otherPoint);
	}


	private static final native Object nativeAdd(Object point, Object otherPoint);
	private static final native Object nativeSubtract(Object point, Object otherPoint);
	private static final native Object nativeMultiply(Object point, Object otherPoint);
	private static final native Object nativeDivide(Object point, Object otherPoint);
}
