/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

package com.thomsonreuters.corptech.charts;

import java.util.List;

/**
 * <p>
 * Represents an RGBA color (values range between 0-255)
 * </p>
 * <p>
 * <b>NOTE:</b> This is a value class, when passing it to other library
 * methods it is always effectively copied.
 * </p>
 */

@SuppressWarnings("all")
public class Color
{
	private double red;
	private double green;
	private double blue;
	private double alpha;

	/**
	 * Initialize a Color with default values.
	 */
	public Color()
	{
	}

	/**
	 * Initialize a Color with provided values.
	 *
	 * @param red The red component.
	 * @param green The green component.
	 * @param blue The blue component.
	 * @param alpha The alpha component.
	 */

	public Color(double red, double green, double blue, double alpha)
	{
		this.red = red;
		this.green = green;
		this.blue = blue;
		this.alpha = alpha;
	}

	/**
	 * Get the red component.
	 * @return The current red component.
	 */

	public final double getRed()
	{
		return this.red;
	}

	/**
	 * Set the red component.
	 * @param value The new red component.
	 */

	public final void setRed(final double value)
	{
		this.red = value;
	}

	/**
	 * Get the green component.
	 * @return The current green component.
	 */

	public final double getGreen()
	{
		return this.green;
	}

	/**
	 * Set the green component.
	 * @param value The new green component.
	 */

	public final void setGreen(final double value)
	{
		this.green = value;
	}

	/**
	 * Get the blue component.
	 * @return The current blue component.
	 */

	public final double getBlue()
	{
		return this.blue;
	}

	/**
	 * Set the blue component.
	 * @param value The new blue component.
	 */

	public final void setBlue(final double value)
	{
		this.blue = value;
	}

	/**
	 * Get the alpha component.
	 * @return The current alpha component.
	 */

	public final double getAlpha()
	{
		return this.alpha;
	}

	/**
	 * Set the alpha component.
	 * @param value The new alpha component.
	 */

	public final void setAlpha(final double value)
	{
		this.alpha = value;
	}

	@Override
	public String toString()
	{
		return "Color {" +
				"red=" + red + ", " +
				"green=" + green + ", " +
				"blue=" + blue + ", " +
				"alpha=" + alpha +
				"}";
	}

	@Override
	public boolean equals(final Object other)
	{
		if(this == other) return true;
		if(!(other instanceof Color)) return false;

		final Color tmp = (Color)other;

		if(!(this.red == tmp.red)) return false;
		if(!(this.green == tmp.green)) return false;
		if(!(this.blue == tmp.blue)) return false;
		if(!(this.alpha == tmp.alpha)) return false;

		return true;
	}

	@Override
	public int hashCode()
	{
		int result = 7;

		result = 31 * result + ((Double)red).hashCode();
		result = 31 * result + ((Double)green).hashCode();
		result = 31 * result + ((Double)blue).hashCode();
		result = 31 * result + ((Double)alpha).hashCode();

		return result;
	}

}
