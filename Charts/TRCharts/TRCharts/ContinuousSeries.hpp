/*******************************************************************************
 * Copyright 2015 Thomson Reuters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
/* NOTE: This file is autogenerated, do not edit this file directly.*/

#ifndef Charts_ContinuousSeries_hpp
#define Charts_ContinuousSeries_hpp

#include <TRCharts/Common.hpp>
#include <TRCharts/Series.hpp>
#include <TRCharts/Coordinates.hpp>
#include <TRCharts/Point.hpp>
#include <TRCharts/Range.hpp>

namespace Charts
{
	template <typename T>
	class ContinuousSeries;
	class ContinuousAxis;
	template <typename T> class ContinuousDataSource;
	class ColorSource;

	/* Non-generic interface for ContinuousSeries */
	class IContinuousSeries
	{
	public:
		virtual ~IContinuousSeries(void);

		virtual const std::shared_ptr<Charts::ContinuousAxis> & getAbscissaAxis(void) const = 0;

		virtual void setAbscissaAxis(const std::shared_ptr<Charts::ContinuousAxis> & value) = 0;

		virtual const std::shared_ptr<Charts::ColorSource> & getColorSource(void) const = 0;

		virtual void setColorSource(const std::shared_ptr<Charts::ColorSource> & value) = 0;

		virtual Charts::Coordinates screenPositionToValue(const Charts::Point & screenPosition) const = 0;

		virtual Charts::Point valueToScreenPosition(const Charts::Coordinates & value) const = 0;

		virtual long getIndexBeforeAbscissaValue(double abscissa, bool includeEqual) const = 0;

		virtual long getIndexAfterAbscissaValue(double abscissa, bool includeEqual) const = 0;

		virtual long getIndexNearestAbscissaValue(double abscissa) const = 0;

		virtual long getIndexNearestScreenPosition(const Charts::Point & screenPosition) const = 0;

		virtual double getDatumSquaredDistanceToScreenPosition(long index, const Charts::Point & screenPosition) const = 0;

		virtual Charts::Range getOrdinateRangeWithinAbscissaRange(const Charts::Range & abscissaRange) const = 0;

	};

	inline IContinuousSeries::~IContinuousSeries(void)
	{
	}

	template <typename T>
	class GeneratedContinuousSeries : public Charts::Series, public IContinuousSeries
	{
	public:
		virtual ~GeneratedContinuousSeries(void);

		std::shared_ptr<ContinuousSeries<T>> getSharedPtr(void);

		std::shared_ptr<const ContinuousSeries<T>> getSharedPtr(void) const;

		virtual const std::shared_ptr<Charts::ContinuousAxis> & getAbscissaAxis(void) const = 0;

		virtual void setAbscissaAxis(const std::shared_ptr<Charts::ContinuousAxis> & value) = 0;

		virtual const std::shared_ptr<Charts::ContinuousDataSource<T>> & getDataSource(void) const = 0;

		virtual void setDataSource(const std::shared_ptr<Charts::ContinuousDataSource<T>> & value) = 0;

		virtual const std::shared_ptr<Charts::ColorSource> & getColorSource(void) const = 0;

		virtual void setColorSource(const std::shared_ptr<Charts::ColorSource> & value) = 0;

		virtual Charts::Coordinates screenPositionToValue(const Charts::Point & screenPosition) const = 0;

		virtual Charts::Point valueToScreenPosition(const Charts::Coordinates & value) const = 0;

		virtual T getDatum(long index) const = 0;

		virtual T interpolateDatum(double abscissa) const = 0;

		virtual long getIndexBeforeAbscissaValue(double abscissa, bool includeEqual) const = 0;

		virtual long getIndexAfterAbscissaValue(double abscissa, bool includeEqual) const = 0;

		virtual long getIndexNearestAbscissaValue(double abscissa) const = 0;

		virtual long getIndexNearestScreenPosition(const Charts::Point & screenPosition) const = 0;

		virtual double getDatumSquaredDistanceToScreenPosition(long index, const Charts::Point & screenPosition) const = 0;

		virtual Charts::Range getOrdinateRangeWithinAbscissaRange(const Charts::Range & abscissaRange) const = 0;

	protected:
		GeneratedContinuousSeries(void);

	};
}

#include <TRCharts/Impl/ContinuousSeriesImpl.hpp>

#endif

#include <TRCharts/ContinuousSeries.impl.hpp>