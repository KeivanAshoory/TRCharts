[#ftl strip_text=true]

[#macro cpp_method_declaration_signature method][#rt]
[#if method.instance]virtual[#else]static[/#if] [#rt]
[@cpp_method_declaration_signature_inner method/][#rt]
[#if method.instance && !method.mutating] const[/#if][#rt]
[/#macro]

[#macro cpp_method_declaration_signature_inner method][#rt]
[#if method.returnReference]${method.returnType.cppConstReferenceType}[#else]${method.returnType.cppValueType}[/#if] ${method.name}([#if method.parameters?has_content][#rt]
[#list method.parameters as param][#rt]
${param.type.cppConstReferenceType} ${param.name}[#rt]
[#if param_has_next], [/#if][#rt]
[/#list][#rt]
[#else][#rt]
void[#rt]
[/#if][#rt]
)[#rt]
[/#macro]

[#macro cpp_method_implementation_signature className method][#rt]
[#if method.returnReference]${method.returnType.cppConstReferenceType}[#else]${method.returnType.cppValueType}[/#if] ${className}::${method.name}([#if method.parameters?has_content][#rt]
[#list method.parameters as param][#rt]
${param.type.cppConstReferenceType} ${param.name}[#rt]
[#if param_has_next], [/#if][#rt]
[/#list][#rt]
[#else][#rt]
void[#rt]
[/#if][#rt]
)[#if method.instance && !method.mutating] const[/#if][#rt]
[/#macro]

[#macro cpp_getter_declaration_signature field inClass=true][#rt]
[#if inClass][#if field.instance]virtual[#else]static[/#if] [/#if][#if field.returnReference]${field.type.cppConstReferenceType}[#else]${field.type.cppValueType}[/#if] ${field.type.getterPrefix}${field.name?cap_first}(void)[#if field.instance && inClass] const[/#if][#rt]
[/#macro]

[#macro cpp_getter_implementation_signature className field inClass=true][#rt]
[#if field.returnReference]${field.type.cppConstReferenceType}[#else]${field.type.cppValueType}[/#if] ${className}::${field.type.getterPrefix}${field.name?cap_first}(void)[#if field.instance && inClass] const[/#if][#rt]
[/#macro]

[#macro cpp_setter_declaration_signature field inClass=true][#rt]
[#if inClass][#if field.instance]virtual[#else]static[/#if] [/#if]void set${field.name?cap_first}(${field.type.cppConstReferenceType} value)[#rt]
[/#macro]

[#macro cpp_setter_implementation_signature className field inClass=true][#rt]
void ${className}::set${field.name?cap_first}(${field.type.cppConstReferenceType} value)[#rt]
[/#macro]

[#macro cpp_method_call method][#rt]
${method.name}([#rt]
[#list method.parameters as param][#rt]
${param.name}[#rt]
[#if param_has_next], [/#if][#rt]
[/#list][#rt]
)[#rt]
[/#macro]
